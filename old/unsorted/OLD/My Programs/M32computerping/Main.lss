
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cd0  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000cd0  00000d64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000045  00800062  00800062  00000d66  2**0
                  ALLOC
  3 .noinit       00000000  008000a7  008000a7  00000d66  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000d66  2**0
                  CONTENTS
  5 .debug_aranges 0000003c  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001dd  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006a2  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000280  00000000  00000000  00001621  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000052f  00000000  00000000  000018a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000195  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54
   4:	0c 94 45 00 	jmp	0x8a
   8:	0c 94 45 00 	jmp	0x8a
   c:	0c 94 45 00 	jmp	0x8a
  10:	0c 94 45 00 	jmp	0x8a
  14:	0c 94 45 00 	jmp	0x8a
  18:	0c 94 45 00 	jmp	0x8a
  1c:	0c 94 45 00 	jmp	0x8a
  20:	0c 94 45 00 	jmp	0x8a
  24:	0c 94 45 00 	jmp	0x8a
  28:	0c 94 45 00 	jmp	0x8a
  2c:	0c 94 45 00 	jmp	0x8a
  30:	0c 94 45 00 	jmp	0x8a
  34:	0c 94 45 00 	jmp	0x8a
  38:	0c 94 45 00 	jmp	0x8a
  3c:	0c 94 45 00 	jmp	0x8a
  40:	0c 94 45 00 	jmp	0x8a
  44:	0c 94 45 00 	jmp	0x8a
  48:	0c 94 45 00 	jmp	0x8a
  4c:	0c 94 45 00 	jmp	0x8a
  50:	0c 94 45 00 	jmp	0x8a

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3a       	cpi	r26, 0xA7	; 167
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e
  86:	0c 94 47 00 	jmp	0x8e

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0

0000008e <main>:
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
int cnt;
int main() {
  8e:	cb e4       	ldi	r28, 0x4B	; 75
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  char string[20];
  int c;
  initIO();
  96:	0e 94 bf 03 	call	0x77e
  enable_uart();
  9a:	0e 94 8c 00 	call	0x118
  setIOB(0,I);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	86 2f       	mov	r24, r22
  a2:	0e 94 12 04 	call	0x824
  setIOD(5,O);
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	0e 94 96 04 	call	0x92c
  setIOD(4,O);
  ae:	61 e0       	ldi	r22, 0x01	; 1
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	0e 94 96 04 	call	0x92c
  c = 0;
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	10 e0       	ldi	r17, 0x00	; 0
  while (1) {
      /*if(getStateB(0) == 0) {
	    uprintf("if you can read this, PING\r");
	    while(getStateB(0) == 0);
		for(cnt=0;cnt<200;cnt++){_delay_loop_2(30000);}
	  }*/
	  if(c == 200){c = 0;}
  ba:	08 3c       	cpi	r16, 0xC8	; 200
  bc:	11 05       	cpc	r17, r1
  be:	19 f4       	brne	.+6      	; 0xc6
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	10 e0       	ldi	r17, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca
	  else {c++;}
  c6:	0f 5f       	subi	r16, 0xFF	; 255
  c8:	1f 4f       	sbci	r17, 0xFF	; 255
	  itoa(c,string,10);
  ca:	4a e0       	ldi	r20, 0x0A	; 10
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	be 01       	movw	r22, r28
  d0:	6f 5f       	subi	r22, 0xFF	; 255
  d2:	7f 4f       	sbci	r23, 0xFF	; 255
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 14 06 	call	0xc28
	  strcat(string,"\r");
  da:	60 e6       	ldi	r22, 0x60	; 96
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	ce 01       	movw	r24, r28
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	0e 94 39 06 	call	0xc72
	  uprintf(string);
  e6:	ce 01       	movw	r24, r28
  e8:	01 96       	adiw	r24, 0x01	; 1
  ea:	0e 94 98 00 	call	0x130
	  for(cnt=0;cnt<200;cnt++){_delay_loop_2(30000);}
  ee:	10 92 6d 00 	sts	0x006D, r1
  f2:	10 92 6c 00 	sts	0x006C, r1
  f6:	27 ec       	ldi	r18, 0xC7	; 199
  f8:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
static __inline__ void
_delay_loop_2(uint16_t __count)
{
  fa:	80 e3       	ldi	r24, 0x30	; 48
  fc:	95 e7       	ldi	r25, 0x75	; 117
	__asm__ volatile (
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe
 102:	21 50       	subi	r18, 0x01	; 1
 104:	30 40       	sbci	r19, 0x00	; 0
 106:	37 ff       	sbrs	r19, 7
 108:	f8 cf       	rjmp	.-16     	; 0xfa
 10a:	28 ec       	ldi	r18, 0xC8	; 200
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	30 93 6d 00 	sts	0x006D, r19
 112:	20 93 6c 00 	sts	0x006C, r18
 116:	d1 cf       	rjmp	.-94     	; 0xba

00000118 <enable_uart>:
#include <avr/io.h>
#include "avrstdio.h"

void enable_uart(void) {
  UBRRH = 0x00;
 118:	10 bc       	out	0x20, r1	; 32
  UBRRL = 25;
 11a:	89 e1       	ldi	r24, 0x19	; 25
 11c:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);	
 11e:	88 e9       	ldi	r24, 0x98	; 152
 120:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 122:	86 e8       	ldi	r24, 0x86	; 134
 124:	80 bd       	out	0x20, r24	; 32
 126:	08 95       	ret

00000128 <txb>:
}

void txb(unsigned char dat) {
	while ( !( UCSRA & (1<<UDRE)) );
 128:	5d 9b       	sbis	0x0b, 5	; 11
 12a:	fe cf       	rjmp	.-4      	; 0x128
	UDR = dat;
 12c:	8c b9       	out	0x0c, r24	; 12
 12e:	08 95       	ret

00000130 <uprintf>:
}

void uprintf(unsigned char data[]) {
 130:	6f 92       	push	r6
 132:	7f 92       	push	r7
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
 150:	28 97       	sbiw	r28, 0x08	; 8
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	f8 94       	cli
 156:	de bf       	out	0x3e, r29	; 62
 158:	0f be       	out	0x3f, r0	; 63
 15a:	cd bf       	out	0x3d, r28	; 61
 15c:	3c 01       	movw	r6, r24
	for(x=0;x<strlen(data);x++) {
 15e:	10 92 62 00 	sts	0x0062, r1
 162:	10 92 63 00 	sts	0x0063, r1
 166:	10 92 64 00 	sts	0x0064, r1
 16a:	10 92 65 00 	sts	0x0065, r1
 16e:	10 92 66 00 	sts	0x0066, r1
 172:	10 92 67 00 	sts	0x0067, r1
 176:	10 92 68 00 	sts	0x0068, r1
 17a:	10 92 69 00 	sts	0x0069, r1
 17e:	8c c0       	rjmp	.+280    	; 0x298
	  txb(data[x]);
 180:	e0 91 62 00 	lds	r30, 0x0062
 184:	f0 91 63 00 	lds	r31, 0x0063
 188:	e6 0d       	add	r30, r6
 18a:	f7 1d       	adc	r31, r7
 18c:	80 81       	ld	r24, Z
 18e:	0e 94 94 00 	call	0x128
 192:	80 90 62 00 	lds	r8, 0x0062
 196:	90 90 63 00 	lds	r9, 0x0063
 19a:	a0 90 64 00 	lds	r10, 0x0064
 19e:	b0 90 65 00 	lds	r11, 0x0065
 1a2:	c0 90 66 00 	lds	r12, 0x0066
 1a6:	d0 90 67 00 	lds	r13, 0x0067
 1aa:	e0 90 68 00 	lds	r14, 0x0068
 1ae:	f0 90 69 00 	lds	r15, 0x0069
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	89 83       	std	Y+1, r24	; 0x01
 1b6:	1a 82       	std	Y+2, r1	; 0x02
 1b8:	1b 82       	std	Y+3, r1	; 0x03
 1ba:	1c 82       	std	Y+4, r1	; 0x04
 1bc:	1d 82       	std	Y+5, r1	; 0x05
 1be:	1e 82       	std	Y+6, r1	; 0x06
 1c0:	1f 82       	std	Y+7, r1	; 0x07
 1c2:	18 86       	std	Y+8, r1	; 0x08
 1c4:	08 2f       	mov	r16, r24
 1c6:	08 0d       	add	r16, r8
 1c8:	08 15       	cp	r16, r8
 1ca:	08 f0       	brcs	.+2      	; 0x1ce
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	1a 81       	ldd	r17, Y+2	; 0x02
 1d0:	19 0d       	add	r17, r9
 1d2:	a1 e0       	ldi	r26, 0x01	; 1
 1d4:	19 15       	cp	r17, r9
 1d6:	08 f0       	brcs	.+2      	; 0x1da
 1d8:	a0 e0       	ldi	r26, 0x00	; 0
 1da:	81 0f       	add	r24, r17
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	81 17       	cp	r24, r17
 1e0:	08 f0       	brcs	.+2      	; 0x1e4
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	a9 2b       	or	r26, r25
 1e6:	18 2f       	mov	r17, r24
 1e8:	2b 81       	ldd	r18, Y+3	; 0x03
 1ea:	2a 0d       	add	r18, r10
 1ec:	b1 e0       	ldi	r27, 0x01	; 1
 1ee:	2a 15       	cp	r18, r10
 1f0:	08 f0       	brcs	.+2      	; 0x1f4
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	8a 2f       	mov	r24, r26
 1f6:	82 0f       	add	r24, r18
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	82 17       	cp	r24, r18
 1fc:	08 f0       	brcs	.+2      	; 0x200
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	b9 2b       	or	r27, r25
 202:	28 2f       	mov	r18, r24
 204:	3c 81       	ldd	r19, Y+4	; 0x04
 206:	3b 0d       	add	r19, r11
 208:	a1 e0       	ldi	r26, 0x01	; 1
 20a:	3b 15       	cp	r19, r11
 20c:	08 f0       	brcs	.+2      	; 0x210
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	8b 2f       	mov	r24, r27
 212:	83 0f       	add	r24, r19
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	83 17       	cp	r24, r19
 218:	08 f0       	brcs	.+2      	; 0x21c
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	a9 2b       	or	r26, r25
 21e:	38 2f       	mov	r19, r24
 220:	4d 81       	ldd	r20, Y+5	; 0x05
 222:	4c 0d       	add	r20, r12
 224:	b1 e0       	ldi	r27, 0x01	; 1
 226:	4c 15       	cp	r20, r12
 228:	08 f0       	brcs	.+2      	; 0x22c
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	8a 2f       	mov	r24, r26
 22e:	84 0f       	add	r24, r20
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	84 17       	cp	r24, r20
 234:	08 f0       	brcs	.+2      	; 0x238
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	b9 2b       	or	r27, r25
 23a:	48 2f       	mov	r20, r24
 23c:	5e 81       	ldd	r21, Y+6	; 0x06
 23e:	5d 0d       	add	r21, r13
 240:	a1 e0       	ldi	r26, 0x01	; 1
 242:	5d 15       	cp	r21, r13
 244:	08 f0       	brcs	.+2      	; 0x248
 246:	a0 e0       	ldi	r26, 0x00	; 0
 248:	8b 2f       	mov	r24, r27
 24a:	85 0f       	add	r24, r21
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	85 17       	cp	r24, r21
 250:	08 f0       	brcs	.+2      	; 0x254
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	a9 2b       	or	r26, r25
 256:	58 2f       	mov	r21, r24
 258:	6f 81       	ldd	r22, Y+7	; 0x07
 25a:	6e 0d       	add	r22, r14
 25c:	f1 e0       	ldi	r31, 0x01	; 1
 25e:	6e 15       	cp	r22, r14
 260:	08 f0       	brcs	.+2      	; 0x264
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	9a 2f       	mov	r25, r26
 266:	96 0f       	add	r25, r22
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	96 17       	cp	r25, r22
 26c:	08 f0       	brcs	.+2      	; 0x270
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	8f 2b       	or	r24, r31
 272:	78 85       	ldd	r23, Y+8	; 0x08
 274:	7f 0d       	add	r23, r15
 276:	87 0f       	add	r24, r23
 278:	00 93 62 00 	sts	0x0062, r16
 27c:	10 93 63 00 	sts	0x0063, r17
 280:	20 93 64 00 	sts	0x0064, r18
 284:	30 93 65 00 	sts	0x0065, r19
 288:	40 93 66 00 	sts	0x0066, r20
 28c:	50 93 67 00 	sts	0x0067, r21
 290:	90 93 68 00 	sts	0x0068, r25
 294:	80 93 69 00 	sts	0x0069, r24
 298:	f3 01       	movw	r30, r6
 29a:	01 90       	ld	r0, Z+
 29c:	00 20       	and	r0, r0
 29e:	e9 f7       	brne	.-6      	; 0x29a
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	e6 19       	sub	r30, r6
 2a4:	f7 09       	sbc	r31, r7
 2a6:	8f 01       	movw	r16, r30
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	80 91 69 00 	lds	r24, 0x0069
 2ae:	82 17       	cp	r24, r18
 2b0:	08 f4       	brcc	.+2      	; 0x2b4
 2b2:	66 cf       	rjmp	.-308    	; 0x180
 2b4:	82 17       	cp	r24, r18
 2b6:	79 f5       	brne	.+94     	; 0x316
 2b8:	80 91 68 00 	lds	r24, 0x0068
 2bc:	82 17       	cp	r24, r18
 2be:	08 f4       	brcc	.+2      	; 0x2c2
 2c0:	5f cf       	rjmp	.-322    	; 0x180
 2c2:	82 17       	cp	r24, r18
 2c4:	41 f5       	brne	.+80     	; 0x316
 2c6:	80 91 67 00 	lds	r24, 0x0067
 2ca:	82 17       	cp	r24, r18
 2cc:	08 f4       	brcc	.+2      	; 0x2d0
 2ce:	58 cf       	rjmp	.-336    	; 0x180
 2d0:	82 17       	cp	r24, r18
 2d2:	09 f5       	brne	.+66     	; 0x316
 2d4:	80 91 66 00 	lds	r24, 0x0066
 2d8:	82 17       	cp	r24, r18
 2da:	08 f4       	brcc	.+2      	; 0x2de
 2dc:	51 cf       	rjmp	.-350    	; 0x180
 2de:	82 17       	cp	r24, r18
 2e0:	d1 f4       	brne	.+52     	; 0x316
 2e2:	80 91 65 00 	lds	r24, 0x0065
 2e6:	82 17       	cp	r24, r18
 2e8:	08 f4       	brcc	.+2      	; 0x2ec
 2ea:	4a cf       	rjmp	.-364    	; 0x180
 2ec:	82 17       	cp	r24, r18
 2ee:	99 f4       	brne	.+38     	; 0x316
 2f0:	80 91 64 00 	lds	r24, 0x0064
 2f4:	82 17       	cp	r24, r18
 2f6:	08 f4       	brcc	.+2      	; 0x2fa
 2f8:	43 cf       	rjmp	.-378    	; 0x180
 2fa:	82 17       	cp	r24, r18
 2fc:	61 f4       	brne	.+24     	; 0x316
 2fe:	80 91 63 00 	lds	r24, 0x0063
 302:	81 17       	cp	r24, r17
 304:	08 f4       	brcc	.+2      	; 0x308
 306:	3c cf       	rjmp	.-392    	; 0x180
 308:	81 17       	cp	r24, r17
 30a:	29 f4       	brne	.+10     	; 0x316
 30c:	80 91 62 00 	lds	r24, 0x0062
 310:	8e 17       	cp	r24, r30
 312:	08 f4       	brcc	.+2      	; 0x316
 314:	35 cf       	rjmp	.-406    	; 0x180
 316:	28 96       	adiw	r28, 0x08	; 8
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	df 90       	pop	r13
 330:	cf 90       	pop	r12
 332:	bf 90       	pop	r11
 334:	af 90       	pop	r10
 336:	9f 90       	pop	r9
 338:	8f 90       	pop	r8
 33a:	7f 90       	pop	r7
 33c:	6f 90       	pop	r6
 33e:	08 95       	ret

00000340 <rxb>:
	}
}

unsigned char rxb(void) {
  while( !(UCSRA & (1<<RXC)));
 340:	5f 9b       	sbis	0x0b, 7	; 11
 342:	fe cf       	rjmp	.-4      	; 0x340
  s = UDR;
 344:	8c b1       	in	r24, 0x0c	; 12
 346:	80 93 73 00 	sts	0x0073, r24
  return s;
}
 34a:	99 27       	eor	r25, r25
 34c:	08 95       	ret

0000034e <uscanf>:

unsigned char *uscanf(uint8_t elements,uint8_t onoff) {
 34e:	7f 92       	push	r7
 350:	8f 92       	push	r8
 352:	9f 92       	push	r9
 354:	af 92       	push	r10
 356:	bf 92       	push	r11
 358:	cf 92       	push	r12
 35a:	df 92       	push	r13
 35c:	ef 92       	push	r14
 35e:	ff 92       	push	r15
 360:	0f 93       	push	r16
 362:	1f 93       	push	r17
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	cd b7       	in	r28, 0x3d	; 61
 36a:	de b7       	in	r29, 0x3e	; 62
 36c:	c2 54       	subi	r28, 0x42	; 66
 36e:	d0 40       	sbci	r29, 0x00	; 0
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	78 2e       	mov	r7, r24
 37c:	86 2f       	mov	r24, r22
  unsigned char str[50];
  strcpy(str,"");
 37e:	19 82       	std	Y+1, r1	; 0x01
  switch (onoff) {
 380:	99 27       	eor	r25, r25
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	21 f0       	breq	.+8      	; 0x38e
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	09 f4       	brne	.+2      	; 0x38c
 38a:	fe c0       	rjmp	.+508    	; 0x588
 38c:	e1 c1       	rjmp	.+962    	; 0x750
   case ON:
    for(x=0;x<elements;x++) {
 38e:	10 92 62 00 	sts	0x0062, r1
 392:	10 92 63 00 	sts	0x0063, r1
 396:	10 92 64 00 	sts	0x0064, r1
 39a:	10 92 65 00 	sts	0x0065, r1
 39e:	10 92 66 00 	sts	0x0066, r1
 3a2:	10 92 67 00 	sts	0x0067, r1
 3a6:	10 92 68 00 	sts	0x0068, r1
 3aa:	10 92 69 00 	sts	0x0069, r1
 3ae:	ad c0       	rjmp	.+346    	; 0x50a
	  str[x] = rxb();
 3b0:	00 91 62 00 	lds	r16, 0x0062
 3b4:	10 91 63 00 	lds	r17, 0x0063
 3b8:	7e 01       	movw	r14, r28
 3ba:	08 94       	sec
 3bc:	e1 1c       	adc	r14, r1
 3be:	f1 1c       	adc	r15, r1
 3c0:	0e 0d       	add	r16, r14
 3c2:	1f 1d       	adc	r17, r15
 3c4:	0e 94 a0 01 	call	0x340
 3c8:	f8 01       	movw	r30, r16
 3ca:	80 83       	st	Z, r24
	  if(str[x] == '\r'){str[x] = 0;x = elements;}
 3cc:	e0 91 62 00 	lds	r30, 0x0062
 3d0:	f0 91 63 00 	lds	r31, 0x0063
 3d4:	ee 0d       	add	r30, r14
 3d6:	ff 1d       	adc	r31, r15
 3d8:	80 81       	ld	r24, Z
 3da:	8d 30       	cpi	r24, 0x0D	; 13
 3dc:	91 f4       	brne	.+36     	; 0x402
 3de:	10 82       	st	Z, r1
 3e0:	30 81       	ld	r19, Z
 3e2:	70 92 62 00 	sts	0x0062, r7
 3e6:	30 93 63 00 	sts	0x0063, r19
 3ea:	30 93 64 00 	sts	0x0064, r19
 3ee:	30 93 65 00 	sts	0x0065, r19
 3f2:	30 93 66 00 	sts	0x0066, r19
 3f6:	30 93 67 00 	sts	0x0067, r19
 3fa:	30 93 68 00 	sts	0x0068, r19
 3fe:	30 93 69 00 	sts	0x0069, r19
 402:	80 90 62 00 	lds	r8, 0x0062
 406:	90 90 63 00 	lds	r9, 0x0063
 40a:	a0 90 64 00 	lds	r10, 0x0064
 40e:	b0 90 65 00 	lds	r11, 0x0065
 412:	c0 90 66 00 	lds	r12, 0x0066
 416:	d0 90 67 00 	lds	r13, 0x0067
 41a:	e0 90 68 00 	lds	r14, 0x0068
 41e:	f0 90 69 00 	lds	r15, 0x0069
 422:	f1 e0       	ldi	r31, 0x01	; 1
 424:	fb ab       	std	Y+51, r31	; 0x33
 426:	1c aa       	std	Y+52, r1	; 0x34
 428:	1d aa       	std	Y+53, r1	; 0x35
 42a:	1e aa       	std	Y+54, r1	; 0x36
 42c:	1f aa       	std	Y+55, r1	; 0x37
 42e:	18 ae       	std	Y+56, r1	; 0x38
 430:	19 ae       	std	Y+57, r1	; 0x39
 432:	1a ae       	std	Y+58, r1	; 0x3a
 434:	0f 2f       	mov	r16, r31
 436:	08 0d       	add	r16, r8
 438:	8f 2f       	mov	r24, r31
 43a:	08 15       	cp	r16, r8
 43c:	08 f0       	brcs	.+2      	; 0x440
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	1c a9       	ldd	r17, Y+52	; 0x34
 442:	19 0d       	add	r17, r9
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	19 15       	cp	r17, r9
 448:	08 f0       	brcs	.+2      	; 0x44c
 44a:	e0 e0       	ldi	r30, 0x00	; 0
 44c:	81 0f       	add	r24, r17
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	81 17       	cp	r24, r17
 452:	08 f0       	brcs	.+2      	; 0x456
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	e9 2b       	or	r30, r25
 458:	18 2f       	mov	r17, r24
 45a:	2d a9       	ldd	r18, Y+53	; 0x35
 45c:	2a 0d       	add	r18, r10
 45e:	f1 e0       	ldi	r31, 0x01	; 1
 460:	2a 15       	cp	r18, r10
 462:	08 f0       	brcs	.+2      	; 0x466
 464:	f0 e0       	ldi	r31, 0x00	; 0
 466:	8e 2f       	mov	r24, r30
 468:	82 0f       	add	r24, r18
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	82 17       	cp	r24, r18
 46e:	08 f0       	brcs	.+2      	; 0x472
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	f9 2b       	or	r31, r25
 474:	28 2f       	mov	r18, r24
 476:	3e a9       	ldd	r19, Y+54	; 0x36
 478:	3b 0d       	add	r19, r11
 47a:	e1 e0       	ldi	r30, 0x01	; 1
 47c:	3b 15       	cp	r19, r11
 47e:	08 f0       	brcs	.+2      	; 0x482
 480:	e0 e0       	ldi	r30, 0x00	; 0
 482:	8f 2f       	mov	r24, r31
 484:	83 0f       	add	r24, r19
 486:	91 e0       	ldi	r25, 0x01	; 1
 488:	83 17       	cp	r24, r19
 48a:	08 f0       	brcs	.+2      	; 0x48e
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	e9 2b       	or	r30, r25
 490:	38 2f       	mov	r19, r24
 492:	4f a9       	ldd	r20, Y+55	; 0x37
 494:	4c 0d       	add	r20, r12
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	4c 15       	cp	r20, r12
 49a:	08 f0       	brcs	.+2      	; 0x49e
 49c:	f0 e0       	ldi	r31, 0x00	; 0
 49e:	8e 2f       	mov	r24, r30
 4a0:	84 0f       	add	r24, r20
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	84 17       	cp	r24, r20
 4a6:	08 f0       	brcs	.+2      	; 0x4aa
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	f9 2b       	or	r31, r25
 4ac:	48 2f       	mov	r20, r24
 4ae:	58 ad       	ldd	r21, Y+56	; 0x38
 4b0:	5d 0d       	add	r21, r13
 4b2:	e1 e0       	ldi	r30, 0x01	; 1
 4b4:	5d 15       	cp	r21, r13
 4b6:	08 f0       	brcs	.+2      	; 0x4ba
 4b8:	e0 e0       	ldi	r30, 0x00	; 0
 4ba:	8f 2f       	mov	r24, r31
 4bc:	85 0f       	add	r24, r21
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	85 17       	cp	r24, r21
 4c2:	08 f0       	brcs	.+2      	; 0x4c6
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	e9 2b       	or	r30, r25
 4c8:	58 2f       	mov	r21, r24
 4ca:	69 ad       	ldd	r22, Y+57	; 0x39
 4cc:	6e 0d       	add	r22, r14
 4ce:	f1 e0       	ldi	r31, 0x01	; 1
 4d0:	6e 15       	cp	r22, r14
 4d2:	08 f0       	brcs	.+2      	; 0x4d6
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	9e 2f       	mov	r25, r30
 4d8:	96 0f       	add	r25, r22
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	96 17       	cp	r25, r22
 4de:	08 f0       	brcs	.+2      	; 0x4e2
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	8f 2b       	or	r24, r31
 4e4:	7a ad       	ldd	r23, Y+58	; 0x3a
 4e6:	7f 0d       	add	r23, r15
 4e8:	87 0f       	add	r24, r23
 4ea:	00 93 62 00 	sts	0x0062, r16
 4ee:	10 93 63 00 	sts	0x0063, r17
 4f2:	20 93 64 00 	sts	0x0064, r18
 4f6:	30 93 65 00 	sts	0x0065, r19
 4fa:	40 93 66 00 	sts	0x0066, r20
 4fe:	50 93 67 00 	sts	0x0067, r21
 502:	90 93 68 00 	sts	0x0068, r25
 506:	80 93 69 00 	sts	0x0069, r24
 50a:	10 e0       	ldi	r17, 0x00	; 0
 50c:	80 91 69 00 	lds	r24, 0x0069
 510:	81 17       	cp	r24, r17
 512:	08 f4       	brcc	.+2      	; 0x516
 514:	4d cf       	rjmp	.-358    	; 0x3b0
 516:	81 17       	cp	r24, r17
 518:	09 f0       	breq	.+2      	; 0x51c
 51a:	1a c1       	rjmp	.+564    	; 0x750
 51c:	80 91 68 00 	lds	r24, 0x0068
 520:	81 17       	cp	r24, r17
 522:	08 f4       	brcc	.+2      	; 0x526
 524:	45 cf       	rjmp	.-374    	; 0x3b0
 526:	81 17       	cp	r24, r17
 528:	09 f0       	breq	.+2      	; 0x52c
 52a:	12 c1       	rjmp	.+548    	; 0x750
 52c:	80 91 67 00 	lds	r24, 0x0067
 530:	81 17       	cp	r24, r17
 532:	08 f4       	brcc	.+2      	; 0x536
 534:	3d cf       	rjmp	.-390    	; 0x3b0
 536:	81 17       	cp	r24, r17
 538:	09 f0       	breq	.+2      	; 0x53c
 53a:	0a c1       	rjmp	.+532    	; 0x750
 53c:	80 91 66 00 	lds	r24, 0x0066
 540:	81 17       	cp	r24, r17
 542:	08 f4       	brcc	.+2      	; 0x546
 544:	35 cf       	rjmp	.-406    	; 0x3b0
 546:	81 17       	cp	r24, r17
 548:	09 f0       	breq	.+2      	; 0x54c
 54a:	02 c1       	rjmp	.+516    	; 0x750
 54c:	80 91 65 00 	lds	r24, 0x0065
 550:	81 17       	cp	r24, r17
 552:	08 f4       	brcc	.+2      	; 0x556
 554:	2d cf       	rjmp	.-422    	; 0x3b0
 556:	81 17       	cp	r24, r17
 558:	09 f0       	breq	.+2      	; 0x55c
 55a:	fa c0       	rjmp	.+500    	; 0x750
 55c:	80 91 64 00 	lds	r24, 0x0064
 560:	81 17       	cp	r24, r17
 562:	08 f4       	brcc	.+2      	; 0x566
 564:	25 cf       	rjmp	.-438    	; 0x3b0
 566:	81 17       	cp	r24, r17
 568:	09 f0       	breq	.+2      	; 0x56c
 56a:	f2 c0       	rjmp	.+484    	; 0x750
 56c:	80 91 63 00 	lds	r24, 0x0063
 570:	81 17       	cp	r24, r17
 572:	08 f4       	brcc	.+2      	; 0x576
 574:	1d cf       	rjmp	.-454    	; 0x3b0
 576:	81 17       	cp	r24, r17
 578:	09 f0       	breq	.+2      	; 0x57c
 57a:	ea c0       	rjmp	.+468    	; 0x750
 57c:	80 91 62 00 	lds	r24, 0x0062
 580:	87 15       	cp	r24, r7
 582:	08 f4       	brcc	.+2      	; 0x586
 584:	15 cf       	rjmp	.-470    	; 0x3b0
	}
	break;
 586:	e4 c0       	rjmp	.+456    	; 0x750
   case OFF:
    for(x=0;x<elements;x++) {
 588:	10 92 62 00 	sts	0x0062, r1
 58c:	10 92 63 00 	sts	0x0063, r1
 590:	10 92 64 00 	sts	0x0064, r1
 594:	10 92 65 00 	sts	0x0065, r1
 598:	10 92 66 00 	sts	0x0066, r1
 59c:	10 92 67 00 	sts	0x0067, r1
 5a0:	10 92 68 00 	sts	0x0068, r1
 5a4:	10 92 69 00 	sts	0x0069, r1
 5a8:	9c c0       	rjmp	.+312    	; 0x6e2
	  str[x] = rxb();
 5aa:	00 91 62 00 	lds	r16, 0x0062
 5ae:	10 91 63 00 	lds	r17, 0x0063
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	08 0f       	add	r16, r24
 5b8:	19 1f       	adc	r17, r25
 5ba:	0e 94 a0 01 	call	0x340
 5be:	f8 01       	movw	r30, r16
 5c0:	80 83       	st	Z, r24
 5c2:	80 90 62 00 	lds	r8, 0x0062
 5c6:	90 90 63 00 	lds	r9, 0x0063
 5ca:	a0 90 64 00 	lds	r10, 0x0064
 5ce:	b0 90 65 00 	lds	r11, 0x0065
 5d2:	c0 90 66 00 	lds	r12, 0x0066
 5d6:	d0 90 67 00 	lds	r13, 0x0067
 5da:	e0 90 68 00 	lds	r14, 0x0068
 5de:	f0 90 69 00 	lds	r15, 0x0069
 5e2:	f1 e0       	ldi	r31, 0x01	; 1
 5e4:	fb af       	std	Y+59, r31	; 0x3b
 5e6:	1c ae       	std	Y+60, r1	; 0x3c
 5e8:	1d ae       	std	Y+61, r1	; 0x3d
 5ea:	1e ae       	std	Y+62, r1	; 0x3e
 5ec:	1f ae       	std	Y+63, r1	; 0x3f
 5ee:	21 96       	adiw	r28, 0x01	; 1
 5f0:	1f ae       	std	Y+63, r1	; 0x3f
 5f2:	21 97       	sbiw	r28, 0x01	; 1
 5f4:	22 96       	adiw	r28, 0x02	; 2
 5f6:	1f ae       	std	Y+63, r1	; 0x3f
 5f8:	22 97       	sbiw	r28, 0x02	; 2
 5fa:	23 96       	adiw	r28, 0x03	; 3
 5fc:	1f ae       	std	Y+63, r1	; 0x3f
 5fe:	23 97       	sbiw	r28, 0x03	; 3
 600:	0f 2f       	mov	r16, r31
 602:	08 0d       	add	r16, r8
 604:	8f 2f       	mov	r24, r31
 606:	08 15       	cp	r16, r8
 608:	08 f0       	brcs	.+2      	; 0x60c
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	1c ad       	ldd	r17, Y+60	; 0x3c
 60e:	19 0d       	add	r17, r9
 610:	e1 e0       	ldi	r30, 0x01	; 1
 612:	19 15       	cp	r17, r9
 614:	08 f0       	brcs	.+2      	; 0x618
 616:	e0 e0       	ldi	r30, 0x00	; 0
 618:	81 0f       	add	r24, r17
 61a:	91 e0       	ldi	r25, 0x01	; 1
 61c:	81 17       	cp	r24, r17
 61e:	08 f0       	brcs	.+2      	; 0x622
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	e9 2b       	or	r30, r25
 624:	18 2f       	mov	r17, r24
 626:	2d ad       	ldd	r18, Y+61	; 0x3d
 628:	2a 0d       	add	r18, r10
 62a:	f1 e0       	ldi	r31, 0x01	; 1
 62c:	2a 15       	cp	r18, r10
 62e:	08 f0       	brcs	.+2      	; 0x632
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	8e 2f       	mov	r24, r30
 634:	82 0f       	add	r24, r18
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	82 17       	cp	r24, r18
 63a:	08 f0       	brcs	.+2      	; 0x63e
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	f9 2b       	or	r31, r25
 640:	28 2f       	mov	r18, r24
 642:	3e ad       	ldd	r19, Y+62	; 0x3e
 644:	3b 0d       	add	r19, r11
 646:	e1 e0       	ldi	r30, 0x01	; 1
 648:	3b 15       	cp	r19, r11
 64a:	08 f0       	brcs	.+2      	; 0x64e
 64c:	e0 e0       	ldi	r30, 0x00	; 0
 64e:	8f 2f       	mov	r24, r31
 650:	83 0f       	add	r24, r19
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	83 17       	cp	r24, r19
 656:	08 f0       	brcs	.+2      	; 0x65a
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	e9 2b       	or	r30, r25
 65c:	38 2f       	mov	r19, r24
 65e:	4f ad       	ldd	r20, Y+63	; 0x3f
 660:	4c 0d       	add	r20, r12
 662:	f1 e0       	ldi	r31, 0x01	; 1
 664:	4c 15       	cp	r20, r12
 666:	08 f0       	brcs	.+2      	; 0x66a
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	8e 2f       	mov	r24, r30
 66c:	84 0f       	add	r24, r20
 66e:	91 e0       	ldi	r25, 0x01	; 1
 670:	84 17       	cp	r24, r20
 672:	08 f0       	brcs	.+2      	; 0x676
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	f9 2b       	or	r31, r25
 678:	48 2f       	mov	r20, r24
 67a:	21 96       	adiw	r28, 0x01	; 1
 67c:	5f ad       	ldd	r21, Y+63	; 0x3f
 67e:	21 97       	sbiw	r28, 0x01	; 1
 680:	5d 0d       	add	r21, r13
 682:	e1 e0       	ldi	r30, 0x01	; 1
 684:	5d 15       	cp	r21, r13
 686:	08 f0       	brcs	.+2      	; 0x68a
 688:	e0 e0       	ldi	r30, 0x00	; 0
 68a:	8f 2f       	mov	r24, r31
 68c:	85 0f       	add	r24, r21
 68e:	91 e0       	ldi	r25, 0x01	; 1
 690:	85 17       	cp	r24, r21
 692:	08 f0       	brcs	.+2      	; 0x696
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	e9 2b       	or	r30, r25
 698:	58 2f       	mov	r21, r24
 69a:	22 96       	adiw	r28, 0x02	; 2
 69c:	6f ad       	ldd	r22, Y+63	; 0x3f
 69e:	22 97       	sbiw	r28, 0x02	; 2
 6a0:	6e 0d       	add	r22, r14
 6a2:	f1 e0       	ldi	r31, 0x01	; 1
 6a4:	6e 15       	cp	r22, r14
 6a6:	08 f0       	brcs	.+2      	; 0x6aa
 6a8:	f0 e0       	ldi	r31, 0x00	; 0
 6aa:	9e 2f       	mov	r25, r30
 6ac:	96 0f       	add	r25, r22
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	96 17       	cp	r25, r22
 6b2:	08 f0       	brcs	.+2      	; 0x6b6
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	8f 2b       	or	r24, r31
 6b8:	23 96       	adiw	r28, 0x03	; 3
 6ba:	7f ad       	ldd	r23, Y+63	; 0x3f
 6bc:	23 97       	sbiw	r28, 0x03	; 3
 6be:	7f 0d       	add	r23, r15
 6c0:	87 0f       	add	r24, r23
 6c2:	00 93 62 00 	sts	0x0062, r16
 6c6:	10 93 63 00 	sts	0x0063, r17
 6ca:	20 93 64 00 	sts	0x0064, r18
 6ce:	30 93 65 00 	sts	0x0065, r19
 6d2:	40 93 66 00 	sts	0x0066, r20
 6d6:	50 93 67 00 	sts	0x0067, r21
 6da:	90 93 68 00 	sts	0x0068, r25
 6de:	80 93 69 00 	sts	0x0069, r24
 6e2:	10 e0       	ldi	r17, 0x00	; 0
 6e4:	80 91 69 00 	lds	r24, 0x0069
 6e8:	81 17       	cp	r24, r17
 6ea:	08 f4       	brcc	.+2      	; 0x6ee
 6ec:	5e cf       	rjmp	.-324    	; 0x5aa
 6ee:	81 17       	cp	r24, r17
 6f0:	79 f5       	brne	.+94     	; 0x750
 6f2:	80 91 68 00 	lds	r24, 0x0068
 6f6:	81 17       	cp	r24, r17
 6f8:	08 f4       	brcc	.+2      	; 0x6fc
 6fa:	57 cf       	rjmp	.-338    	; 0x5aa
 6fc:	81 17       	cp	r24, r17
 6fe:	41 f5       	brne	.+80     	; 0x750
 700:	80 91 67 00 	lds	r24, 0x0067
 704:	81 17       	cp	r24, r17
 706:	08 f4       	brcc	.+2      	; 0x70a
 708:	50 cf       	rjmp	.-352    	; 0x5aa
 70a:	81 17       	cp	r24, r17
 70c:	09 f5       	brne	.+66     	; 0x750
 70e:	80 91 66 00 	lds	r24, 0x0066
 712:	81 17       	cp	r24, r17
 714:	08 f4       	brcc	.+2      	; 0x718
 716:	49 cf       	rjmp	.-366    	; 0x5aa
 718:	81 17       	cp	r24, r17
 71a:	d1 f4       	brne	.+52     	; 0x750
 71c:	80 91 65 00 	lds	r24, 0x0065
 720:	81 17       	cp	r24, r17
 722:	08 f4       	brcc	.+2      	; 0x726
 724:	42 cf       	rjmp	.-380    	; 0x5aa
 726:	81 17       	cp	r24, r17
 728:	99 f4       	brne	.+38     	; 0x750
 72a:	80 91 64 00 	lds	r24, 0x0064
 72e:	81 17       	cp	r24, r17
 730:	08 f4       	brcc	.+2      	; 0x734
 732:	3b cf       	rjmp	.-394    	; 0x5aa
 734:	81 17       	cp	r24, r17
 736:	61 f4       	brne	.+24     	; 0x750
 738:	80 91 63 00 	lds	r24, 0x0063
 73c:	81 17       	cp	r24, r17
 73e:	08 f4       	brcc	.+2      	; 0x742
 740:	34 cf       	rjmp	.-408    	; 0x5aa
 742:	81 17       	cp	r24, r17
 744:	29 f4       	brne	.+10     	; 0x750
 746:	80 91 62 00 	lds	r24, 0x0062
 74a:	87 15       	cp	r24, r7
 74c:	08 f4       	brcc	.+2      	; 0x750
 74e:	2d cf       	rjmp	.-422    	; 0x5aa
	}
	break;
  }
  return str;
} 750:	ce 01       	movw	r24, r28
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	ce 5b       	subi	r28, 0xBE	; 190
 756:	df 4f       	sbci	r29, 0xFF	; 255
 758:	0f b6       	in	r0, 0x3f	; 63
 75a:	f8 94       	cli
 75c:	de bf       	out	0x3e, r29	; 62
 75e:	0f be       	out	0x3f, r0	; 63
 760:	cd bf       	out	0x3d, r28	; 61
 762:	df 91       	pop	r29
 764:	cf 91       	pop	r28
 766:	1f 91       	pop	r17
 768:	0f 91       	pop	r16
 76a:	ff 90       	pop	r15
 76c:	ef 90       	pop	r14
 76e:	df 90       	pop	r13
 770:	cf 90       	pop	r12
 772:	bf 90       	pop	r11
 774:	af 90       	pop	r10
 776:	9f 90       	pop	r9
 778:	8f 90       	pop	r8
 77a:	7f 90       	pop	r7
 77c:	08 95       	ret

0000077e <initIO>:
#include "M32io.h"

void  initIO ( void )
{
  prta = 0;
 77e:	10 92 71 00 	sts	0x0071, r1
  prtb = 0;
 782:	10 92 70 00 	sts	0x0070, r1
  prtc = 0;
 786:	10 92 6a 00 	sts	0x006A, r1
  prtd = 0;
 78a:	10 92 6b 00 	sts	0x006B, r1
  dira = 0;
 78e:	10 92 74 00 	sts	0x0074, r1
  dirb = 0;
 792:	10 92 6f 00 	sts	0x006F, r1
  dirc = 0;
 796:	10 92 72 00 	sts	0x0072, r1
  dird = 0;
 79a:	10 92 6e 00 	sts	0x006E, r1
 79e:	08 95       	ret

000007a0 <setIOA>:
}

void  setIOA(uint8_t pin , uint8_t direction)
{
 7a0:	58 2f       	mov	r21, r24
  switch (direction)
 7a2:	26 2f       	mov	r18, r22
 7a4:	33 27       	eor	r19, r19
 7a6:	21 15       	cp	r18, r1
 7a8:	31 05       	cpc	r19, r1
 7aa:	f9 f0       	breq	.+62     	; 0x7ea
 7ac:	21 30       	cpi	r18, 0x01	; 1
 7ae:	31 05       	cpc	r19, r1
 7b0:	b9 f5       	brne	.+110    	; 0x820
  {
    case O:
	if(((dira >> pin) & 0x01) == 0){DDRA = DDRA + (1 << pin);dira = dira + (1 << pin);}
 7b2:	60 91 74 00 	lds	r22, 0x0074
 7b6:	86 2f       	mov	r24, r22
 7b8:	99 27       	eor	r25, r25
 7ba:	45 2f       	mov	r20, r21
 7bc:	55 27       	eor	r21, r21
 7be:	04 2e       	mov	r0, r20
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6
 7c2:	95 95       	asr	r25
 7c4:	87 95       	ror	r24
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2
 7ca:	82 27       	eor	r24, r18
 7cc:	93 27       	eor	r25, r19
 7ce:	80 ff       	sbrs	r24, 0
 7d0:	27 c0       	rjmp	.+78     	; 0x820
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8
 7d4:	22 0f       	add	r18, r18
 7d6:	33 1f       	adc	r19, r19
 7d8:	4a 95       	dec	r20
 7da:	e2 f7       	brpl	.-8      	; 0x7d4
 7dc:	8a b3       	in	r24, 0x1a	; 26
 7de:	82 0f       	add	r24, r18
 7e0:	8a bb       	out	0x1a, r24	; 26
 7e2:	62 0f       	add	r22, r18
 7e4:	60 93 74 00 	sts	0x0074, r22
	break;
 7e8:	08 95       	ret
	
	case I:
	if(((dira >> pin) & 0x01) == 1){DDRA = DDRA - (1 << pin);dira = dira - (1 << pin);}
 7ea:	40 91 74 00 	lds	r20, 0x0074
 7ee:	84 2f       	mov	r24, r20
 7f0:	99 27       	eor	r25, r25
 7f2:	25 2f       	mov	r18, r21
 7f4:	33 27       	eor	r19, r19
 7f6:	02 2e       	mov	r0, r18
 7f8:	02 c0       	rjmp	.+4      	; 0x7fe
 7fa:	95 95       	asr	r25
 7fc:	87 95       	ror	r24
 7fe:	0a 94       	dec	r0
 800:	e2 f7       	brpl	.-8      	; 0x7fa
 802:	80 ff       	sbrs	r24, 0
 804:	0d c0       	rjmp	.+26     	; 0x820
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810
 80c:	88 0f       	add	r24, r24
 80e:	99 1f       	adc	r25, r25
 810:	2a 95       	dec	r18
 812:	e2 f7       	brpl	.-8      	; 0x80c
 814:	2a b3       	in	r18, 0x1a	; 26
 816:	28 1b       	sub	r18, r24
 818:	2a bb       	out	0x1a, r18	; 26
 81a:	48 1b       	sub	r20, r24
 81c:	40 93 74 00 	sts	0x0074, r20
 820:	08 95       	ret
 822:	08 95       	ret

00000824 <setIOB>:
	break;
  }
}

void  setIOB(uint8_t pin , uint8_t direction)
{
 824:	58 2f       	mov	r21, r24
  switch (direction)
 826:	26 2f       	mov	r18, r22
 828:	33 27       	eor	r19, r19
 82a:	21 15       	cp	r18, r1
 82c:	31 05       	cpc	r19, r1
 82e:	f9 f0       	breq	.+62     	; 0x86e
 830:	21 30       	cpi	r18, 0x01	; 1
 832:	31 05       	cpc	r19, r1
 834:	b9 f5       	brne	.+110    	; 0x8a4
  {
    case O:
	if(((dirb >> pin) & 0x01) == 0){DDRB = DDRB + (1 << pin);dirb = dirb + (1 << pin);}
 836:	60 91 6f 00 	lds	r22, 0x006F
 83a:	86 2f       	mov	r24, r22
 83c:	99 27       	eor	r25, r25
 83e:	45 2f       	mov	r20, r21
 840:	55 27       	eor	r21, r21
 842:	04 2e       	mov	r0, r20
 844:	02 c0       	rjmp	.+4      	; 0x84a
 846:	95 95       	asr	r25
 848:	87 95       	ror	r24
 84a:	0a 94       	dec	r0
 84c:	e2 f7       	brpl	.-8      	; 0x846
 84e:	82 27       	eor	r24, r18
 850:	93 27       	eor	r25, r19
 852:	80 ff       	sbrs	r24, 0
 854:	27 c0       	rjmp	.+78     	; 0x8a4
 856:	02 c0       	rjmp	.+4      	; 0x85c
 858:	22 0f       	add	r18, r18
 85a:	33 1f       	adc	r19, r19
 85c:	4a 95       	dec	r20
 85e:	e2 f7       	brpl	.-8      	; 0x858
 860:	87 b3       	in	r24, 0x17	; 23
 862:	82 0f       	add	r24, r18
 864:	87 bb       	out	0x17, r24	; 23
 866:	62 0f       	add	r22, r18
 868:	60 93 6f 00 	sts	0x006F, r22
	break;
 86c:	08 95       	ret
	
	case I:
	if(((dirb >> pin) & 0x01) == 1){DDRB = DDRB - (1 << pin);dirb = dirb - (1 << pin);}
 86e:	40 91 6f 00 	lds	r20, 0x006F
 872:	84 2f       	mov	r24, r20
 874:	99 27       	eor	r25, r25
 876:	25 2f       	mov	r18, r21
 878:	33 27       	eor	r19, r19
 87a:	02 2e       	mov	r0, r18
 87c:	02 c0       	rjmp	.+4      	; 0x882
 87e:	95 95       	asr	r25
 880:	87 95       	ror	r24
 882:	0a 94       	dec	r0
 884:	e2 f7       	brpl	.-8      	; 0x87e
 886:	80 ff       	sbrs	r24, 0
 888:	0d c0       	rjmp	.+26     	; 0x8a4
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	02 c0       	rjmp	.+4      	; 0x894
 890:	88 0f       	add	r24, r24
 892:	99 1f       	adc	r25, r25
 894:	2a 95       	dec	r18
 896:	e2 f7       	brpl	.-8      	; 0x890
 898:	27 b3       	in	r18, 0x17	; 23
 89a:	28 1b       	sub	r18, r24
 89c:	27 bb       	out	0x17, r18	; 23
 89e:	48 1b       	sub	r20, r24
 8a0:	40 93 6f 00 	sts	0x006F, r20
 8a4:	08 95       	ret
 8a6:	08 95       	ret

000008a8 <setIOC>:
	break;
  }
}

void  setIOC(uint8_t pin , uint8_t direction)
{
 8a8:	58 2f       	mov	r21, r24
  switch (direction)
 8aa:	26 2f       	mov	r18, r22
 8ac:	33 27       	eor	r19, r19
 8ae:	21 15       	cp	r18, r1
 8b0:	31 05       	cpc	r19, r1
 8b2:	f9 f0       	breq	.+62     	; 0x8f2
 8b4:	21 30       	cpi	r18, 0x01	; 1
 8b6:	31 05       	cpc	r19, r1
 8b8:	b9 f5       	brne	.+110    	; 0x928
  {
    case O:
	if(((dirc >> pin) & 0x01) == 0){DDRC = DDRC + (1 << pin);dirc = dirc + (1 << pin);}
 8ba:	60 91 72 00 	lds	r22, 0x0072
 8be:	86 2f       	mov	r24, r22
 8c0:	99 27       	eor	r25, r25
 8c2:	45 2f       	mov	r20, r21
 8c4:	55 27       	eor	r21, r21
 8c6:	04 2e       	mov	r0, r20
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce
 8ca:	95 95       	asr	r25
 8cc:	87 95       	ror	r24
 8ce:	0a 94       	dec	r0
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca
 8d2:	82 27       	eor	r24, r18
 8d4:	93 27       	eor	r25, r19
 8d6:	80 ff       	sbrs	r24, 0
 8d8:	27 c0       	rjmp	.+78     	; 0x928
 8da:	02 c0       	rjmp	.+4      	; 0x8e0
 8dc:	22 0f       	add	r18, r18
 8de:	33 1f       	adc	r19, r19
 8e0:	4a 95       	dec	r20
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc
 8e4:	84 b3       	in	r24, 0x14	; 20
 8e6:	82 0f       	add	r24, r18
 8e8:	84 bb       	out	0x14, r24	; 20
 8ea:	62 0f       	add	r22, r18
 8ec:	60 93 72 00 	sts	0x0072, r22
	break;
 8f0:	08 95       	ret
	
	case I:
	if(((dirc >> pin) & 0x01) == 1){DDRC = DDRC - (1 << pin);dirc = dirc - (1 << pin);}
 8f2:	40 91 72 00 	lds	r20, 0x0072
 8f6:	84 2f       	mov	r24, r20
 8f8:	99 27       	eor	r25, r25
 8fa:	25 2f       	mov	r18, r21
 8fc:	33 27       	eor	r19, r19
 8fe:	02 2e       	mov	r0, r18
 900:	02 c0       	rjmp	.+4      	; 0x906
 902:	95 95       	asr	r25
 904:	87 95       	ror	r24
 906:	0a 94       	dec	r0
 908:	e2 f7       	brpl	.-8      	; 0x902
 90a:	80 ff       	sbrs	r24, 0
 90c:	0d c0       	rjmp	.+26     	; 0x928
 90e:	81 e0       	ldi	r24, 0x01	; 1
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	02 c0       	rjmp	.+4      	; 0x918
 914:	88 0f       	add	r24, r24
 916:	99 1f       	adc	r25, r25
 918:	2a 95       	dec	r18
 91a:	e2 f7       	brpl	.-8      	; 0x914
 91c:	24 b3       	in	r18, 0x14	; 20
 91e:	28 1b       	sub	r18, r24
 920:	24 bb       	out	0x14, r18	; 20
 922:	48 1b       	sub	r20, r24
 924:	40 93 72 00 	sts	0x0072, r20
 928:	08 95       	ret
 92a:	08 95       	ret

0000092c <setIOD>:
	break;
  }
}

void  setIOD(uint8_t pin , uint8_t direction)
{
 92c:	58 2f       	mov	r21, r24
  switch (direction)
 92e:	26 2f       	mov	r18, r22
 930:	33 27       	eor	r19, r19
 932:	21 15       	cp	r18, r1
 934:	31 05       	cpc	r19, r1
 936:	f9 f0       	breq	.+62     	; 0x976
 938:	21 30       	cpi	r18, 0x01	; 1
 93a:	31 05       	cpc	r19, r1
 93c:	b9 f5       	brne	.+110    	; 0x9ac
  {
    case O:
	if(((dird >> pin) & 0x01) == 0){DDRD = DDRD + (1 << pin);dird = dird + (1 << pin);}
 93e:	60 91 6e 00 	lds	r22, 0x006E
 942:	86 2f       	mov	r24, r22
 944:	99 27       	eor	r25, r25
 946:	45 2f       	mov	r20, r21
 948:	55 27       	eor	r21, r21
 94a:	04 2e       	mov	r0, r20
 94c:	02 c0       	rjmp	.+4      	; 0x952
 94e:	95 95       	asr	r25
 950:	87 95       	ror	r24
 952:	0a 94       	dec	r0
 954:	e2 f7       	brpl	.-8      	; 0x94e
 956:	82 27       	eor	r24, r18
 958:	93 27       	eor	r25, r19
 95a:	80 ff       	sbrs	r24, 0
 95c:	27 c0       	rjmp	.+78     	; 0x9ac
 95e:	02 c0       	rjmp	.+4      	; 0x964
 960:	22 0f       	add	r18, r18
 962:	33 1f       	adc	r19, r19
 964:	4a 95       	dec	r20
 966:	e2 f7       	brpl	.-8      	; 0x960
 968:	81 b3       	in	r24, 0x11	; 17
 96a:	82 0f       	add	r24, r18
 96c:	81 bb       	out	0x11, r24	; 17
 96e:	62 0f       	add	r22, r18
 970:	60 93 6e 00 	sts	0x006E, r22
	break;
 974:	08 95       	ret
	
	case I:
	if(((dird >> pin) & 0x01) == 1){DDRD = DDRD - (1 << pin);dird = dird - (1 << pin);}
 976:	40 91 6e 00 	lds	r20, 0x006E
 97a:	84 2f       	mov	r24, r20
 97c:	99 27       	eor	r25, r25
 97e:	25 2f       	mov	r18, r21
 980:	33 27       	eor	r19, r19
 982:	02 2e       	mov	r0, r18
 984:	02 c0       	rjmp	.+4      	; 0x98a
 986:	95 95       	asr	r25
 988:	87 95       	ror	r24
 98a:	0a 94       	dec	r0
 98c:	e2 f7       	brpl	.-8      	; 0x986
 98e:	80 ff       	sbrs	r24, 0
 990:	0d c0       	rjmp	.+26     	; 0x9ac
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	2a 95       	dec	r18
 99e:	e2 f7       	brpl	.-8      	; 0x998
 9a0:	21 b3       	in	r18, 0x11	; 17
 9a2:	28 1b       	sub	r18, r24
 9a4:	21 bb       	out	0x11, r18	; 17
 9a6:	48 1b       	sub	r20, r24
 9a8:	40 93 6e 00 	sts	0x006E, r20
 9ac:	08 95       	ret
 9ae:	08 95       	ret

000009b0 <setStateA>:
	break;
  }
}

void  setStateA(uint8_t pin , uint8_t state)
{
 9b0:	58 2f       	mov	r21, r24
  switch (state)
 9b2:	26 2f       	mov	r18, r22
 9b4:	33 27       	eor	r19, r19
 9b6:	21 15       	cp	r18, r1
 9b8:	31 05       	cpc	r19, r1
 9ba:	f9 f0       	breq	.+62     	; 0x9fa
 9bc:	21 30       	cpi	r18, 0x01	; 1
 9be:	31 05       	cpc	r19, r1
 9c0:	b9 f5       	brne	.+110    	; 0xa30
  {
    case 1:
	if(((prta >> pin) & 0x01) == 0){PORTA = PORTA + (1 << pin);prta = prta + (1 << pin);}
 9c2:	60 91 71 00 	lds	r22, 0x0071
 9c6:	86 2f       	mov	r24, r22
 9c8:	99 27       	eor	r25, r25
 9ca:	45 2f       	mov	r20, r21
 9cc:	55 27       	eor	r21, r21
 9ce:	04 2e       	mov	r0, r20
 9d0:	02 c0       	rjmp	.+4      	; 0x9d6
 9d2:	95 95       	asr	r25
 9d4:	87 95       	ror	r24
 9d6:	0a 94       	dec	r0
 9d8:	e2 f7       	brpl	.-8      	; 0x9d2
 9da:	82 27       	eor	r24, r18
 9dc:	93 27       	eor	r25, r19
 9de:	80 ff       	sbrs	r24, 0
 9e0:	27 c0       	rjmp	.+78     	; 0xa30
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8
 9e4:	22 0f       	add	r18, r18
 9e6:	33 1f       	adc	r19, r19
 9e8:	4a 95       	dec	r20
 9ea:	e2 f7       	brpl	.-8      	; 0x9e4
 9ec:	8b b3       	in	r24, 0x1b	; 27
 9ee:	82 0f       	add	r24, r18
 9f0:	8b bb       	out	0x1b, r24	; 27
 9f2:	62 0f       	add	r22, r18
 9f4:	60 93 71 00 	sts	0x0071, r22
	break;
 9f8:	08 95       	ret
	
	case 0:
	if(((prta >> pin) & 0x01) == 1){PORTA = PORTA - (1 << pin);prta = prta - (1 << pin);}
 9fa:	40 91 71 00 	lds	r20, 0x0071
 9fe:	84 2f       	mov	r24, r20
 a00:	99 27       	eor	r25, r25
 a02:	25 2f       	mov	r18, r21
 a04:	33 27       	eor	r19, r19
 a06:	02 2e       	mov	r0, r18
 a08:	02 c0       	rjmp	.+4      	; 0xa0e
 a0a:	95 95       	asr	r25
 a0c:	87 95       	ror	r24
 a0e:	0a 94       	dec	r0
 a10:	e2 f7       	brpl	.-8      	; 0xa0a
 a12:	80 ff       	sbrs	r24, 0
 a14:	0d c0       	rjmp	.+26     	; 0xa30
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20
 a1c:	88 0f       	add	r24, r24
 a1e:	99 1f       	adc	r25, r25
 a20:	2a 95       	dec	r18
 a22:	e2 f7       	brpl	.-8      	; 0xa1c
 a24:	2b b3       	in	r18, 0x1b	; 27
 a26:	28 1b       	sub	r18, r24
 a28:	2b bb       	out	0x1b, r18	; 27
 a2a:	48 1b       	sub	r20, r24
 a2c:	40 93 71 00 	sts	0x0071, r20
 a30:	08 95       	ret
 a32:	08 95       	ret

00000a34 <setStateB>:
	break;
  }
}

void  setStateB(uint8_t pin , uint8_t state)
{
 a34:	58 2f       	mov	r21, r24
  switch (state)
 a36:	26 2f       	mov	r18, r22
 a38:	33 27       	eor	r19, r19
 a3a:	21 15       	cp	r18, r1
 a3c:	31 05       	cpc	r19, r1
 a3e:	f9 f0       	breq	.+62     	; 0xa7e
 a40:	21 30       	cpi	r18, 0x01	; 1
 a42:	31 05       	cpc	r19, r1
 a44:	b9 f5       	brne	.+110    	; 0xab4
  {
    case 1:
	if(((prtb >> pin) & 0x01) == 0){PORTB = PORTB + (1 << pin);prtb = prtb + (1 << pin);}
 a46:	60 91 70 00 	lds	r22, 0x0070
 a4a:	86 2f       	mov	r24, r22
 a4c:	99 27       	eor	r25, r25
 a4e:	45 2f       	mov	r20, r21
 a50:	55 27       	eor	r21, r21
 a52:	04 2e       	mov	r0, r20
 a54:	02 c0       	rjmp	.+4      	; 0xa5a
 a56:	95 95       	asr	r25
 a58:	87 95       	ror	r24
 a5a:	0a 94       	dec	r0
 a5c:	e2 f7       	brpl	.-8      	; 0xa56
 a5e:	82 27       	eor	r24, r18
 a60:	93 27       	eor	r25, r19
 a62:	80 ff       	sbrs	r24, 0
 a64:	27 c0       	rjmp	.+78     	; 0xab4
 a66:	02 c0       	rjmp	.+4      	; 0xa6c
 a68:	22 0f       	add	r18, r18
 a6a:	33 1f       	adc	r19, r19
 a6c:	4a 95       	dec	r20
 a6e:	e2 f7       	brpl	.-8      	; 0xa68
 a70:	88 b3       	in	r24, 0x18	; 24
 a72:	82 0f       	add	r24, r18
 a74:	88 bb       	out	0x18, r24	; 24
 a76:	62 0f       	add	r22, r18
 a78:	60 93 70 00 	sts	0x0070, r22
	break;
 a7c:	08 95       	ret
	
	case 0:
	if(((prtb >> pin) & 0x01) == 1){PORTB = PORTB - (1 << pin);prtb = prtb - (1 << pin);}
 a7e:	40 91 70 00 	lds	r20, 0x0070
 a82:	84 2f       	mov	r24, r20
 a84:	99 27       	eor	r25, r25
 a86:	25 2f       	mov	r18, r21
 a88:	33 27       	eor	r19, r19
 a8a:	02 2e       	mov	r0, r18
 a8c:	02 c0       	rjmp	.+4      	; 0xa92
 a8e:	95 95       	asr	r25
 a90:	87 95       	ror	r24
 a92:	0a 94       	dec	r0
 a94:	e2 f7       	brpl	.-8      	; 0xa8e
 a96:	80 ff       	sbrs	r24, 0
 a98:	0d c0       	rjmp	.+26     	; 0xab4
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4
 aa0:	88 0f       	add	r24, r24
 aa2:	99 1f       	adc	r25, r25
 aa4:	2a 95       	dec	r18
 aa6:	e2 f7       	brpl	.-8      	; 0xaa0
 aa8:	28 b3       	in	r18, 0x18	; 24
 aaa:	28 1b       	sub	r18, r24
 aac:	28 bb       	out	0x18, r18	; 24
 aae:	48 1b       	sub	r20, r24
 ab0:	40 93 70 00 	sts	0x0070, r20
 ab4:	08 95       	ret
 ab6:	08 95       	ret

00000ab8 <setStateC>:
	break;
  }
}

void  setStateC(uint8_t pin , uint8_t state)
{
 ab8:	58 2f       	mov	r21, r24
  switch (state)
 aba:	26 2f       	mov	r18, r22
 abc:	33 27       	eor	r19, r19
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	f9 f0       	breq	.+62     	; 0xb02
 ac4:	21 30       	cpi	r18, 0x01	; 1
 ac6:	31 05       	cpc	r19, r1
 ac8:	b9 f5       	brne	.+110    	; 0xb38
  {
    case 1:
	if(((prtc >> pin) & 0x01) == 0){PORTC = PORTC + (1 << pin);prtc = prtc + (1 << pin);}
 aca:	60 91 6a 00 	lds	r22, 0x006A
 ace:	86 2f       	mov	r24, r22
 ad0:	99 27       	eor	r25, r25
 ad2:	45 2f       	mov	r20, r21
 ad4:	55 27       	eor	r21, r21
 ad6:	04 2e       	mov	r0, r20
 ad8:	02 c0       	rjmp	.+4      	; 0xade
 ada:	95 95       	asr	r25
 adc:	87 95       	ror	r24
 ade:	0a 94       	dec	r0
 ae0:	e2 f7       	brpl	.-8      	; 0xada
 ae2:	82 27       	eor	r24, r18
 ae4:	93 27       	eor	r25, r19
 ae6:	80 ff       	sbrs	r24, 0
 ae8:	27 c0       	rjmp	.+78     	; 0xb38
 aea:	02 c0       	rjmp	.+4      	; 0xaf0
 aec:	22 0f       	add	r18, r18
 aee:	33 1f       	adc	r19, r19
 af0:	4a 95       	dec	r20
 af2:	e2 f7       	brpl	.-8      	; 0xaec
 af4:	85 b3       	in	r24, 0x15	; 21
 af6:	82 0f       	add	r24, r18
 af8:	85 bb       	out	0x15, r24	; 21
 afa:	62 0f       	add	r22, r18
 afc:	60 93 6a 00 	sts	0x006A, r22
	break;
 b00:	08 95       	ret
	
	case 0:
	if(((prtc >> pin) & 0x01) == 1){PORTC = PORTC - (1 << pin);prtc = prtc - (1 << pin);}
 b02:	40 91 6a 00 	lds	r20, 0x006A
 b06:	84 2f       	mov	r24, r20
 b08:	99 27       	eor	r25, r25
 b0a:	25 2f       	mov	r18, r21
 b0c:	33 27       	eor	r19, r19
 b0e:	02 2e       	mov	r0, r18
 b10:	02 c0       	rjmp	.+4      	; 0xb16
 b12:	95 95       	asr	r25
 b14:	87 95       	ror	r24
 b16:	0a 94       	dec	r0
 b18:	e2 f7       	brpl	.-8      	; 0xb12
 b1a:	80 ff       	sbrs	r24, 0
 b1c:	0d c0       	rjmp	.+26     	; 0xb38
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	90 e0       	ldi	r25, 0x00	; 0
 b22:	02 c0       	rjmp	.+4      	; 0xb28
 b24:	88 0f       	add	r24, r24
 b26:	99 1f       	adc	r25, r25
 b28:	2a 95       	dec	r18
 b2a:	e2 f7       	brpl	.-8      	; 0xb24
 b2c:	25 b3       	in	r18, 0x15	; 21
 b2e:	28 1b       	sub	r18, r24
 b30:	25 bb       	out	0x15, r18	; 21
 b32:	48 1b       	sub	r20, r24
 b34:	40 93 6a 00 	sts	0x006A, r20
 b38:	08 95       	ret
 b3a:	08 95       	ret

00000b3c <setStateD>:
	break;
  }
}

void  setStateD(uint8_t pin , uint8_t state)
{
 b3c:	58 2f       	mov	r21, r24
  switch (state)
 b3e:	26 2f       	mov	r18, r22
 b40:	33 27       	eor	r19, r19
 b42:	21 15       	cp	r18, r1
 b44:	31 05       	cpc	r19, r1
 b46:	f9 f0       	breq	.+62     	; 0xb86
 b48:	21 30       	cpi	r18, 0x01	; 1
 b4a:	31 05       	cpc	r19, r1
 b4c:	b9 f5       	brne	.+110    	; 0xbbc
  {
    case 1:
	if(((prtd >> pin) & 0x01) == 0){PORTD = PORTD + (1 << pin);prtd = prtd + (1 << pin);}
 b4e:	60 91 6b 00 	lds	r22, 0x006B
 b52:	86 2f       	mov	r24, r22
 b54:	99 27       	eor	r25, r25
 b56:	45 2f       	mov	r20, r21
 b58:	55 27       	eor	r21, r21
 b5a:	04 2e       	mov	r0, r20
 b5c:	02 c0       	rjmp	.+4      	; 0xb62
 b5e:	95 95       	asr	r25
 b60:	87 95       	ror	r24
 b62:	0a 94       	dec	r0
 b64:	e2 f7       	brpl	.-8      	; 0xb5e
 b66:	82 27       	eor	r24, r18
 b68:	93 27       	eor	r25, r19
 b6a:	80 ff       	sbrs	r24, 0
 b6c:	27 c0       	rjmp	.+78     	; 0xbbc
 b6e:	02 c0       	rjmp	.+4      	; 0xb74
 b70:	22 0f       	add	r18, r18
 b72:	33 1f       	adc	r19, r19
 b74:	4a 95       	dec	r20
 b76:	e2 f7       	brpl	.-8      	; 0xb70
 b78:	82 b3       	in	r24, 0x12	; 18
 b7a:	82 0f       	add	r24, r18
 b7c:	82 bb       	out	0x12, r24	; 18
 b7e:	62 0f       	add	r22, r18
 b80:	60 93 6b 00 	sts	0x006B, r22
	break;
 b84:	08 95       	ret
	
	case 0:
	if(((prtd >> pin) & 0x01) == 1){PORTD = PORTD - (1 << pin);prtd = prtd - (1 << pin);}
 b86:	40 91 6b 00 	lds	r20, 0x006B
 b8a:	84 2f       	mov	r24, r20
 b8c:	99 27       	eor	r25, r25
 b8e:	25 2f       	mov	r18, r21
 b90:	33 27       	eor	r19, r19
 b92:	02 2e       	mov	r0, r18
 b94:	02 c0       	rjmp	.+4      	; 0xb9a
 b96:	95 95       	asr	r25
 b98:	87 95       	ror	r24
 b9a:	0a 94       	dec	r0
 b9c:	e2 f7       	brpl	.-8      	; 0xb96
 b9e:	80 ff       	sbrs	r24, 0
 ba0:	0d c0       	rjmp	.+26     	; 0xbbc
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	02 c0       	rjmp	.+4      	; 0xbac
 ba8:	88 0f       	add	r24, r24
 baa:	99 1f       	adc	r25, r25
 bac:	2a 95       	dec	r18
 bae:	e2 f7       	brpl	.-8      	; 0xba8
 bb0:	22 b3       	in	r18, 0x12	; 18
 bb2:	28 1b       	sub	r18, r24
 bb4:	22 bb       	out	0x12, r18	; 18
 bb6:	48 1b       	sub	r20, r24
 bb8:	40 93 6b 00 	sts	0x006B, r20
 bbc:	08 95       	ret
 bbe:	08 95       	ret

00000bc0 <getStateA>:
	break;
  }
}

uint8_t  getStateA(uint8_t pin)
{
  return ((PINA >> pin) & 0x01);
 bc0:	99 b3       	in	r25, 0x19	; 25
 bc2:	29 2f       	mov	r18, r25
 bc4:	33 27       	eor	r19, r19
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc
 bc8:	35 95       	asr	r19
 bca:	27 95       	ror	r18
 bcc:	8a 95       	dec	r24
 bce:	e2 f7       	brpl	.-8      	; 0xbc8
 bd0:	82 2f       	mov	r24, r18
 bd2:	99 27       	eor	r25, r25
}
 bd4:	81 70       	andi	r24, 0x01	; 1
 bd6:	90 70       	andi	r25, 0x00	; 0
 bd8:	08 95       	ret

00000bda <getStateB>:

uint8_t  getStateB(uint8_t pin)
{
  return ((PINB >> pin) & 0x01);
 bda:	96 b3       	in	r25, 0x16	; 22
 bdc:	29 2f       	mov	r18, r25
 bde:	33 27       	eor	r19, r19
 be0:	02 c0       	rjmp	.+4      	; 0xbe6
 be2:	35 95       	asr	r19
 be4:	27 95       	ror	r18
 be6:	8a 95       	dec	r24
 be8:	e2 f7       	brpl	.-8      	; 0xbe2
 bea:	82 2f       	mov	r24, r18
 bec:	99 27       	eor	r25, r25
}
 bee:	81 70       	andi	r24, 0x01	; 1
 bf0:	90 70       	andi	r25, 0x00	; 0
 bf2:	08 95       	ret

00000bf4 <getStateC>:

uint8_t  getStateC(uint8_t pin)
{
  return ((PINC >> pin) & 0x01);
 bf4:	93 b3       	in	r25, 0x13	; 19
 bf6:	29 2f       	mov	r18, r25
 bf8:	33 27       	eor	r19, r19
 bfa:	02 c0       	rjmp	.+4      	; 0xc00
 bfc:	35 95       	asr	r19
 bfe:	27 95       	ror	r18
 c00:	8a 95       	dec	r24
 c02:	e2 f7       	brpl	.-8      	; 0xbfc
 c04:	82 2f       	mov	r24, r18
 c06:	99 27       	eor	r25, r25
}
 c08:	81 70       	andi	r24, 0x01	; 1
 c0a:	90 70       	andi	r25, 0x00	; 0
 c0c:	08 95       	ret

00000c0e <getStateD>:

uint8_t  getStateD(uint8_t pin)
{
  return ((PIND >> pin) & 0x01);
 c0e:	90 b3       	in	r25, 0x10	; 16
 c10:	29 2f       	mov	r18, r25
 c12:	33 27       	eor	r19, r19
 c14:	02 c0       	rjmp	.+4      	; 0xc1a
 c16:	35 95       	asr	r19
 c18:	27 95       	ror	r18
 c1a:	8a 95       	dec	r24
 c1c:	e2 f7       	brpl	.-8      	; 0xc16
 c1e:	82 2f       	mov	r24, r18
 c20:	99 27       	eor	r25, r25
} c22:	81 70       	andi	r24, 0x01	; 1
 c24:	90 70       	andi	r25, 0x00	; 0
 c26:	08 95       	ret

00000c28 <itoa>:
 c28:	e6 2f       	mov	r30, r22
 c2a:	f7 2f       	mov	r31, r23
 c2c:	2e 2f       	mov	r18, r30
 c2e:	3f 2f       	mov	r19, r31
 c30:	e8 94       	clt
 c32:	42 30       	cpi	r20, 0x02	; 2
 c34:	cc f0       	brlt	.+50     	; 0xc68
 c36:	45 32       	cpi	r20, 0x25	; 37
 c38:	bc f4       	brge	.+46     	; 0xc68
 c3a:	4a 30       	cpi	r20, 0x0A	; 10
 c3c:	29 f4       	brne	.+10     	; 0xc48
 c3e:	97 fb       	bst	r25, 7
 c40:	1e f4       	brtc	.+6      	; 0xc48
 c42:	90 95       	com	r25
 c44:	81 95       	neg	r24
 c46:	9f 4f       	sbci	r25, 0xFF	; 255

00000c48 <divide_loop>:
 c48:	64 2f       	mov	r22, r20
 c4a:	77 27       	eor	r23, r23
 c4c:	0e 94 54 06 	call	0xca8
 c50:	80 5d       	subi	r24, 0xD0	; 208
 c52:	8a 33       	cpi	r24, 0x3A	; 58
 c54:	0c f0       	brlt	.+2      	; 0xc58
 c56:	89 5d       	subi	r24, 0xD9	; 217

00000c58 <L_10>:
 c58:	81 93       	st	Z+, r24
 c5a:	86 2f       	mov	r24, r22
 c5c:	97 2f       	mov	r25, r23
 c5e:	00 97       	sbiw	r24, 0x00	; 0
 c60:	99 f7       	brne	.-26     	; 0xc48
 c62:	16 f4       	brtc	.+4      	; 0xc68
 c64:	5d e2       	ldi	r21, 0x2D	; 45
 c66:	51 93       	st	Z+, r21

00000c68 <terminate>:
 c68:	93 2f       	mov	r25, r19
 c6a:	82 2f       	mov	r24, r18
 c6c:	10 82       	st	Z, r1
 c6e:	0c 94 44 06 	jmp	0xc88

00000c72 <strcat>:
 c72:	fb 01       	movw	r30, r22
 c74:	dc 01       	movw	r26, r24

00000c76 <.strcat_skip>:
 c76:	0d 90       	ld	r0, X+
 c78:	00 20       	and	r0, r0
 c7a:	e9 f7       	brne	.-6      	; 0xc76
 c7c:	11 97       	sbiw	r26, 0x01	; 1

00000c7e <.strcat_loop>:
 c7e:	01 90       	ld	r0, Z+
 c80:	0d 92       	st	X+, r0
 c82:	00 20       	and	r0, r0
 c84:	e1 f7       	brne	.-8      	; 0xc7e
 c86:	08 95       	ret

00000c88 <strrev>:
 c88:	dc 01       	movw	r26, r24
 c8a:	fc 01       	movw	r30, r24

00000c8c <.strrev_eos>:
 c8c:	01 90       	ld	r0, Z+
 c8e:	00 20       	and	r0, r0
 c90:	e9 f7       	brne	.-6      	; 0xc8c
 c92:	32 97       	sbiw	r30, 0x02	; 2

00000c94 <.strrev_loop>:
 c94:	ae 17       	cp	r26, r30
 c96:	bf 07       	cpc	r27, r31
 c98:	30 f4       	brcc	.+12     	; 0xca6
 c9a:	7c 91       	ld	r23, X
 c9c:	60 81       	ld	r22, Z
 c9e:	70 83       	st	Z, r23
 ca0:	31 97       	sbiw	r30, 0x01	; 1
 ca2:	6d 93       	st	X+, r22
 ca4:	f7 cf       	rjmp	.-18     	; 0xc94

00000ca6 <.strrev_done>:
 ca6:	08 95       	ret

00000ca8 <__udivmodhi4>:
 ca8:	aa 1b       	sub	r26, r26
 caa:	bb 1b       	sub	r27, r27
 cac:	51 e1       	ldi	r21, 0x11	; 17
 cae:	07 c0       	rjmp	.+14     	; 0xcbe

00000cb0 <__udivmodhi4_loop>:
 cb0:	aa 1f       	adc	r26, r26
 cb2:	bb 1f       	adc	r27, r27
 cb4:	a6 17       	cp	r26, r22
 cb6:	b7 07       	cpc	r27, r23
 cb8:	10 f0       	brcs	.+4      	; 0xcbe
 cba:	a6 1b       	sub	r26, r22
 cbc:	b7 0b       	sbc	r27, r23

00000cbe <__udivmodhi4_ep>:
 cbe:	88 1f       	adc	r24, r24
 cc0:	99 1f       	adc	r25, r25
 cc2:	5a 95       	dec	r21
 cc4:	a9 f7       	brne	.-22     	; 0xcb0
 cc6:	80 95       	com	r24
 cc8:	90 95       	com	r25
 cca:	bc 01       	movw	r22, r24
 ccc:	cd 01       	movw	r24, r26
 cce:	08 95       	ret
