
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d8  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003d8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800060  00800060  0000046c  2**0
                  ALLOC
  3 .noinit       00000000  0080006d  0080006d  0000046c  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000046c  2**0
                  CONTENTS
  5 .stab         0000036c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY, DEBUGGING
  6 .stabstr      00000084  00000000  00000000  000007d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000028  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000f4  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000002c8  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000133  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000225  00000000  00000000  00000d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000012c  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	26 c0       	rjmp	.+76     	; 0x5a <__bad_interrupt>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	68 c0       	rjmp	.+208    	; 0xe4 <__vector_9>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 ed       	ldi	r30, 0xD8	; 216
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ad 36       	cpi	r26, 0x6D	; 109
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	3a c0       	rjmp	.+116    	; 0xce <main>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <DELAY_US>:

#if MCU_FREQ == 8000000UL

    /* 8mhz clock, 4 instructions per loop_count  */
    loop_count = microseconds * 2;
  5c:	88 0f       	add	r24, r24
  5e:	99 1f       	adc	r25, r25

#elif MCU_FREQ == 1000000UL

    /* 1mhz clock, 4 instructions per loop_count */
    loop_count = microseconds / 4;

#elif MCU_FREQ == 16000000UL

    /* 1mhz clock, 4 instructions per loop_count */
    loop_count = microseconds / 4;

#else
#error MCU_FREQ undefined or set to an unknown value!
    loop_count = 0; /* don't really know what to do */
#endif

    __asm__ volatile (
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <DELAY_US+0x4>
  64:	08 95       	ret

00000066 <DELAY_MS>:
        "1: sbiw %0,1" "\n\t"
        "brne 1b"
        : "=w" ( loop_count )
        : "0"  ( loop_count )
    );
}

void DELAY_MS( uint16_t milliseconds )
{
  66:	0f 93       	push	r16
  68:	1f 93       	push	r17
  6a:	cf 93       	push	r28
  6c:	df 93       	push	r29
  6e:	8c 01       	movw	r16, r24
    uint16_t i;

    for ( i = 0; i < milliseconds; ++i )
  70:	c0 e0       	ldi	r28, 0x00	; 0
  72:	d0 e0       	ldi	r29, 0x00	; 0
  74:	c8 17       	cp	r28, r24
  76:	d9 07       	cpc	r29, r25
  78:	38 f4       	brcc	.+14     	; 0x88 <DELAY_MS+0x22>
    {
        DELAY_US( 1000 );
  7a:	88 ee       	ldi	r24, 0xE8	; 232
  7c:	93 e0       	ldi	r25, 0x03	; 3
  7e:	ee df       	rcall	.-36     	; 0x5c <DELAY_US>
  80:	21 96       	adiw	r28, 0x01	; 1
  82:	c0 17       	cp	r28, r16
  84:	d1 07       	cpc	r29, r17
  86:	c8 f3       	brcs	.-14     	; 0x7a <DELAY_MS+0x14>
  88:	df 91       	pop	r29
  8a:	cf 91       	pop	r28
  8c:	1f 91       	pop	r17
  8e:	0f 91       	pop	r16
  90:	08 95       	ret

00000092 <MAIN_PRG>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	80 ec       	ldi	r24, 0xC0	; 192
  98:	9d e5       	ldi	r25, 0x5D	; 93
  9a:	73 d1       	rcall	.+742    	; 0x382 <setONcycles>
  9c:	c4 e1       	ldi	r28, 0x14	; 20
  9e:	d0 e0       	ldi	r29, 0x00	; 0
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	9b eb       	ldi	r25, 0xBB	; 187
  a4:	83 d1       	rcall	.+774    	; 0x3ac <setOFFcycles>
  a6:	ca 34       	cpi	r28, 0x4A	; 74
  a8:	d1 05       	cpc	r29, r1
  aa:	38 f4       	brcc	.+14     	; 0xba <MAIN_PRG+0x28>
  ac:	ce 01       	movw	r24, r28
  ae:	69 d1       	rcall	.+722    	; 0x382 <setONcycles>
  b0:	21 96       	adiw	r28, 0x01	; 1
  b2:	82 e3       	ldi	r24, 0x32	; 50
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	d7 df       	rcall	.-82     	; 0x66 <DELAY_MS>
  b8:	f6 cf       	rjmp	.-20     	; 0xa6 <MAIN_PRG+0x14>
  ba:	c2 31       	cpi	r28, 0x12	; 18
  bc:	d1 05       	cpc	r29, r1
  be:	98 f3       	brcs	.-26     	; 0xa6 <MAIN_PRG+0x14>
  c0:	ce 01       	movw	r24, r28
  c2:	5f d1       	rcall	.+702    	; 0x382 <setONcycles>
  c4:	21 97       	sbiw	r28, 0x01	; 1
  c6:	82 e3       	ldi	r24, 0x32	; 50
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	cd df       	rcall	.-102    	; 0x66 <DELAY_MS>
  cc:	f6 cf       	rjmp	.-20     	; 0xba <MAIN_PRG+0x28>

000000ce <main>:
  ce:	cf e5       	ldi	r28, 0x5F	; 95
  d0:	d4 e0       	ldi	r29, 0x04	; 4
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	cd bf       	out	0x3d, r28	; 61
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	87 bb       	out	0x17, r24	; 23
  da:	3a d1       	rcall	.+628    	; 0x350 <start>
  dc:	da df       	rcall	.-76     	; 0x92 <MAIN_PRG>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	79 c1       	rjmp	.+754    	; 0x3d6 <_exit>

000000e4 <__vector_9>:
enum {ON , OFF};
uint8_t onoff;
  
SIGNAL (SIG_OVERFLOW0)           //unquote if using timer 0 interrupts
{
  e4:	1f 92       	push	r1
  e6:	0f 92       	push	r0
  e8:	0f b6       	in	r0, 0x3f	; 63
  ea:	0f 92       	push	r0
  ec:	11 24       	eor	r1, r1
  ee:	8f 92       	push	r8
  f0:	9f 92       	push	r9
  f2:	af 92       	push	r10
  f4:	bf 92       	push	r11
  f6:	cf 92       	push	r12
  f8:	df 92       	push	r13
  fa:	ef 92       	push	r14
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	28 97       	sbiw	r28, 0x08	; 8
 124:	de bf       	out	0x3e, r29	; 62
 126:	cd bf       	out	0x3d, r28	; 61
  switch (onoff)
 128:	80 91 6c 00 	lds	r24, 0x006C
 12c:	99 27       	eor	r25, r25
 12e:	00 97       	sbiw	r24, 0x00	; 0
 130:	19 f0       	breq	.+6      	; 0x138 <__vector_9+0x54>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	91 f1       	breq	.+100    	; 0x19a <__vector_9+0xb6>
 136:	68 c0       	rjmp	.+208    	; 0x208 <__vector_9+0x124>
  {
    case ON:
	  if(counter == counttoON)
 138:	00 91 60 00 	lds	r16, 0x0060
 13c:	10 91 61 00 	lds	r17, 0x0061
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	80 91 64 00 	lds	r24, 0x0064
 146:	80 17       	cp	r24, r16
 148:	09 f0       	breq	.+2      	; 0x14c <__vector_9+0x68>
 14a:	5e c0       	rjmp	.+188    	; 0x208 <__vector_9+0x124>
 14c:	80 91 65 00 	lds	r24, 0x0065
 150:	81 17       	cp	r24, r17
 152:	09 f0       	breq	.+2      	; 0x156 <__vector_9+0x72>
 154:	59 c0       	rjmp	.+178    	; 0x208 <__vector_9+0x124>
 156:	80 91 66 00 	lds	r24, 0x0066
 15a:	82 17       	cp	r24, r18
 15c:	09 f0       	breq	.+2      	; 0x160 <__vector_9+0x7c>
 15e:	54 c0       	rjmp	.+168    	; 0x208 <__vector_9+0x124>
 160:	80 91 67 00 	lds	r24, 0x0067
 164:	82 17       	cp	r24, r18
 166:	09 f0       	breq	.+2      	; 0x16a <__vector_9+0x86>
 168:	4f c0       	rjmp	.+158    	; 0x208 <__vector_9+0x124>
 16a:	80 91 68 00 	lds	r24, 0x0068
 16e:	82 17       	cp	r24, r18
 170:	09 f0       	breq	.+2      	; 0x174 <__vector_9+0x90>
 172:	4a c0       	rjmp	.+148    	; 0x208 <__vector_9+0x124>
 174:	80 91 69 00 	lds	r24, 0x0069
 178:	82 17       	cp	r24, r18
 17a:	09 f0       	breq	.+2      	; 0x17e <__vector_9+0x9a>
 17c:	45 c0       	rjmp	.+138    	; 0x208 <__vector_9+0x124>
 17e:	80 91 6a 00 	lds	r24, 0x006A
 182:	82 17       	cp	r24, r18
 184:	09 f0       	breq	.+2      	; 0x188 <__vector_9+0xa4>
 186:	40 c0       	rjmp	.+128    	; 0x208 <__vector_9+0x124>
 188:	90 91 6b 00 	lds	r25, 0x006B
 18c:	99 23       	and	r25, r25
 18e:	e1 f5       	brne	.+120    	; 0x208 <__vector_9+0x124>
	  {
	    onoff = OFF;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 6c 00 	sts	0x006C, r24
		PORTB = 0;
 196:	98 bb       	out	0x18, r25	; 24
 198:	29 c0       	rjmp	.+82     	; 0x1ec <__vector_9+0x108>
		counter = 0;
	  }
	  break;
	
	case OFF:
	  if(counter == counttoOFF)
 19a:	00 91 62 00 	lds	r16, 0x0062
 19e:	10 91 63 00 	lds	r17, 0x0063
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	80 91 64 00 	lds	r24, 0x0064
 1a8:	80 17       	cp	r24, r16
 1aa:	71 f5       	brne	.+92     	; 0x208 <__vector_9+0x124>
 1ac:	80 91 65 00 	lds	r24, 0x0065
 1b0:	81 17       	cp	r24, r17
 1b2:	51 f5       	brne	.+84     	; 0x208 <__vector_9+0x124>
 1b4:	80 91 66 00 	lds	r24, 0x0066
 1b8:	82 17       	cp	r24, r18
 1ba:	31 f5       	brne	.+76     	; 0x208 <__vector_9+0x124>
 1bc:	80 91 67 00 	lds	r24, 0x0067
 1c0:	82 17       	cp	r24, r18
 1c2:	11 f5       	brne	.+68     	; 0x208 <__vector_9+0x124>
 1c4:	80 91 68 00 	lds	r24, 0x0068
 1c8:	82 17       	cp	r24, r18
 1ca:	f1 f4       	brne	.+60     	; 0x208 <__vector_9+0x124>
 1cc:	80 91 69 00 	lds	r24, 0x0069
 1d0:	82 17       	cp	r24, r18
 1d2:	d1 f4       	brne	.+52     	; 0x208 <__vector_9+0x124>
 1d4:	80 91 6a 00 	lds	r24, 0x006A
 1d8:	82 17       	cp	r24, r18
 1da:	b1 f4       	brne	.+44     	; 0x208 <__vector_9+0x124>
 1dc:	90 91 6b 00 	lds	r25, 0x006B
 1e0:	99 23       	and	r25, r25
 1e2:	91 f4       	brne	.+36     	; 0x208 <__vector_9+0x124>
	  {
	    onoff = ON;
 1e4:	90 93 6c 00 	sts	0x006C, r25
		PORTB = 2;
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	88 bb       	out	0x18, r24	; 24
		counter = 0;
 1ec:	90 93 64 00 	sts	0x0064, r25
 1f0:	90 93 65 00 	sts	0x0065, r25
 1f4:	90 93 66 00 	sts	0x0066, r25
 1f8:	90 93 67 00 	sts	0x0067, r25
 1fc:	90 93 68 00 	sts	0x0068, r25
 200:	90 93 69 00 	sts	0x0069, r25
 204:	90 93 6a 00 	sts	0x006A, r25
	  }
	  break;
  }
  counter++;
 208:	80 90 64 00 	lds	r8, 0x0064
 20c:	90 90 65 00 	lds	r9, 0x0065
 210:	a0 90 66 00 	lds	r10, 0x0066
 214:	b0 90 67 00 	lds	r11, 0x0067
 218:	c0 90 68 00 	lds	r12, 0x0068
 21c:	d0 90 69 00 	lds	r13, 0x0069
 220:	e0 90 6a 00 	lds	r14, 0x006A
 224:	f0 90 6b 00 	lds	r15, 0x006B
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	1a 82       	std	Y+2, r1	; 0x02
 22e:	1b 82       	std	Y+3, r1	; 0x03
 230:	1c 82       	std	Y+4, r1	; 0x04
 232:	1d 82       	std	Y+5, r1	; 0x05
 234:	1e 82       	std	Y+6, r1	; 0x06
 236:	1f 82       	std	Y+7, r1	; 0x07
 238:	18 86       	std	Y+8, r1	; 0x08
 23a:	08 2f       	mov	r16, r24
 23c:	08 0d       	add	r16, r8
 23e:	08 15       	cp	r16, r8
 240:	08 f0       	brcs	.+2      	; 0x244 <__vector_9+0x160>
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	1a 81       	ldd	r17, Y+2	; 0x02
 246:	19 0d       	add	r17, r9
 248:	a1 e0       	ldi	r26, 0x01	; 1
 24a:	19 15       	cp	r17, r9
 24c:	08 f0       	brcs	.+2      	; 0x250 <__vector_9+0x16c>
 24e:	a0 e0       	ldi	r26, 0x00	; 0
 250:	81 0f       	add	r24, r17
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	81 17       	cp	r24, r17
 256:	08 f0       	brcs	.+2      	; 0x25a <__vector_9+0x176>
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	a9 2b       	or	r26, r25
 25c:	18 2f       	mov	r17, r24
 25e:	2b 81       	ldd	r18, Y+3	; 0x03
 260:	2a 0d       	add	r18, r10
 262:	b1 e0       	ldi	r27, 0x01	; 1
 264:	2a 15       	cp	r18, r10
 266:	08 f0       	brcs	.+2      	; 0x26a <__vector_9+0x186>
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	8a 2f       	mov	r24, r26
 26c:	82 0f       	add	r24, r18
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	82 17       	cp	r24, r18
 272:	08 f0       	brcs	.+2      	; 0x276 <__vector_9+0x192>
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	b9 2b       	or	r27, r25
 278:	28 2f       	mov	r18, r24
 27a:	3c 81       	ldd	r19, Y+4	; 0x04
 27c:	3b 0d       	add	r19, r11
 27e:	a1 e0       	ldi	r26, 0x01	; 1
 280:	3b 15       	cp	r19, r11
 282:	08 f0       	brcs	.+2      	; 0x286 <__vector_9+0x1a2>
 284:	a0 e0       	ldi	r26, 0x00	; 0
 286:	8b 2f       	mov	r24, r27
 288:	83 0f       	add	r24, r19
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	83 17       	cp	r24, r19
 28e:	08 f0       	brcs	.+2      	; 0x292 <__vector_9+0x1ae>
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	a9 2b       	or	r26, r25
 294:	38 2f       	mov	r19, r24
 296:	4d 81       	ldd	r20, Y+5	; 0x05
 298:	4c 0d       	add	r20, r12
 29a:	b1 e0       	ldi	r27, 0x01	; 1
 29c:	4c 15       	cp	r20, r12
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <__vector_9+0x1be>
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	8a 2f       	mov	r24, r26
 2a4:	84 0f       	add	r24, r20
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	84 17       	cp	r24, r20
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <__vector_9+0x1ca>
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	b9 2b       	or	r27, r25
 2b0:	48 2f       	mov	r20, r24
 2b2:	5e 81       	ldd	r21, Y+6	; 0x06
 2b4:	5d 0d       	add	r21, r13
 2b6:	a1 e0       	ldi	r26, 0x01	; 1
 2b8:	5d 15       	cp	r21, r13
 2ba:	08 f0       	brcs	.+2      	; 0x2be <__vector_9+0x1da>
 2bc:	a0 e0       	ldi	r26, 0x00	; 0
 2be:	8b 2f       	mov	r24, r27
 2c0:	85 0f       	add	r24, r21
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	85 17       	cp	r24, r21
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <__vector_9+0x1e6>
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	a9 2b       	or	r26, r25
 2cc:	58 2f       	mov	r21, r24
 2ce:	6f 81       	ldd	r22, Y+7	; 0x07
 2d0:	6e 0d       	add	r22, r14
 2d2:	f1 e0       	ldi	r31, 0x01	; 1
 2d4:	6e 15       	cp	r22, r14
 2d6:	08 f0       	brcs	.+2      	; 0x2da <__vector_9+0x1f6>
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	9a 2f       	mov	r25, r26
 2dc:	96 0f       	add	r25, r22
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	96 17       	cp	r25, r22
 2e2:	08 f0       	brcs	.+2      	; 0x2e6 <__vector_9+0x202>
 2e4:	80 e0       	ldi	r24, 0x00	; 0
 2e6:	8f 2b       	or	r24, r31
 2e8:	78 85       	ldd	r23, Y+8	; 0x08
 2ea:	7f 0d       	add	r23, r15
 2ec:	87 0f       	add	r24, r23
 2ee:	00 93 64 00 	sts	0x0064, r16
 2f2:	10 93 65 00 	sts	0x0065, r17
 2f6:	20 93 66 00 	sts	0x0066, r18
 2fa:	30 93 67 00 	sts	0x0067, r19
 2fe:	40 93 68 00 	sts	0x0068, r20
 302:	50 93 69 00 	sts	0x0069, r21
 306:	90 93 6a 00 	sts	0x006A, r25
 30a:	80 93 6b 00 	sts	0x006B, r24
 30e:	28 96       	adiw	r28, 0x08	; 8
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	cd bf       	out	0x3d, r28	; 61
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	7f 91       	pop	r23
 328:	6f 91       	pop	r22
 32a:	5f 91       	pop	r21
 32c:	4f 91       	pop	r20
 32e:	3f 91       	pop	r19
 330:	2f 91       	pop	r18
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	ef 90       	pop	r14
 33a:	df 90       	pop	r13
 33c:	cf 90       	pop	r12
 33e:	bf 90       	pop	r11
 340:	af 90       	pop	r10
 342:	9f 90       	pop	r9
 344:	8f 90       	pop	r8
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <start>:
}

void start( void )
{
  DDRB = 255;
 350:	8f ef       	ldi	r24, 0xFF	; 255
 352:	87 bb       	out	0x17, r24	; 23
  counter = 0;
 354:	10 92 64 00 	sts	0x0064, r1
 358:	10 92 65 00 	sts	0x0065, r1
 35c:	10 92 66 00 	sts	0x0066, r1
 360:	10 92 67 00 	sts	0x0067, r1
 364:	10 92 68 00 	sts	0x0068, r1
 368:	10 92 69 00 	sts	0x0069, r1
 36c:	10 92 6a 00 	sts	0x006A, r1
 370:	10 92 6b 00 	sts	0x006B, r1
  onoff = OFF;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	80 93 6c 00 	sts	0x006C, r24
  //MCUCR = 15;   //unquote if using external interrupts
  //GICR = 192;   //unquote if using external interrupts
  TCCR0 = 1;    //unquote if using timer interrupts
 37a:	83 bf       	out	0x33, r24	; 51
  TIMSK = 1;  //unquote if using timer interrupts
 37c:	89 bf       	out	0x39, r24	; 57
  sei();
 37e:	78 94       	sei
 380:	08 95       	ret

00000382 <setONcycles>:
}

void setONcycles( uint16_t cyclesON )
{
  counter = 0;
 382:	10 92 64 00 	sts	0x0064, r1
 386:	10 92 65 00 	sts	0x0065, r1
 38a:	10 92 66 00 	sts	0x0066, r1
 38e:	10 92 67 00 	sts	0x0067, r1
 392:	10 92 68 00 	sts	0x0068, r1
 396:	10 92 69 00 	sts	0x0069, r1
 39a:	10 92 6a 00 	sts	0x006A, r1
 39e:	10 92 6b 00 	sts	0x006B, r1
  counttoON = cyclesON;
 3a2:	90 93 61 00 	sts	0x0061, r25
 3a6:	80 93 60 00 	sts	0x0060, r24
 3aa:	08 95       	ret

000003ac <setOFFcycles>:
}

void setOFFcycles( uint16_t cyclesOFF )
{
  counter = 0;
 3ac:	10 92 64 00 	sts	0x0064, r1
 3b0:	10 92 65 00 	sts	0x0065, r1
 3b4:	10 92 66 00 	sts	0x0066, r1
 3b8:	10 92 67 00 	sts	0x0067, r1
 3bc:	10 92 68 00 	sts	0x0068, r1
 3c0:	10 92 69 00 	sts	0x0069, r1
 3c4:	10 92 6a 00 	sts	0x006A, r1
 3c8:	10 92 6b 00 	sts	0x006B, r1
  counttoOFF = cyclesOFF;
 3cc:	90 93 63 00 	sts	0x0063, r25
 3d0:	80 93 62 00 	sts	0x0062, r24
 3d4:	08 95       	ret

000003d6 <_exit>:
 3d6:	ff cf       	rjmp	.-2      	; 0x3d6 <_exit>
