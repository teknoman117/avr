
Light_Blinky.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  000000c4  00000158  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  00000158  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000158  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000001b  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000d2  00000000  00000000  00000187  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000009a  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000000fc  00000000  00000000  000002f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000a6  00000000  00000000  000003ef  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54
   4:	0c 94 45 00 	jmp	0x8a
   8:	0c 94 45 00 	jmp	0x8a
   c:	0c 94 45 00 	jmp	0x8a
  10:	0c 94 45 00 	jmp	0x8a
  14:	0c 94 45 00 	jmp	0x8a
  18:	0c 94 45 00 	jmp	0x8a
  1c:	0c 94 45 00 	jmp	0x8a
  20:	0c 94 45 00 	jmp	0x8a
  24:	0c 94 45 00 	jmp	0x8a
  28:	0c 94 45 00 	jmp	0x8a
  2c:	0c 94 45 00 	jmp	0x8a
  30:	0c 94 45 00 	jmp	0x8a
  34:	0c 94 45 00 	jmp	0x8a
  38:	0c 94 45 00 	jmp	0x8a
  3c:	0c 94 45 00 	jmp	0x8a
  40:	0c 94 45 00 	jmp	0x8a
  44:	0c 94 45 00 	jmp	0x8a
  48:	0c 94 45 00 	jmp	0x8a
  4c:	0c 94 45 00 	jmp	0x8a
  50:	0c 94 45 00 	jmp	0x8a

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e
  86:	0c 94 47 00 	jmp	0x8e

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0

0000008e <main>:
 
#define time 30000000

void main (void)
  {
  8e:	cf e5       	ldi	r28, 0x5F	; 95
  90:	d8 e0       	ldi	r29, 0x08	; 8
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61
  unsigned char counter;
  DDRB = 0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	87 bb       	out	0x17, r24	; 23
  9a:	34 e0       	ldi	r19, 0x04	; 4
  9c:	42 e0       	ldi	r20, 0x02	; 2
  while (1)
  {
  PORTB = 4;
  9e:	38 bb       	out	0x18, r19	; 24
  counter = 0;
  a0:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
static __inline__ void
_delay_loop_2(uint16_t __count)
{
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	93 ec       	ldi	r25, 0xC3	; 195
	__asm__ volatile (
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6
  while (counter != 20)
    {
	_delay_loop_2(time);
	counter++;
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	24 31       	cpi	r18, 0x14	; 20
  ae:	c9 f7       	brne	.-14     	; 0xa2
	}
  PORTB = 2;
  b0:	48 bb       	out	0x18, r20	; 24
  counter = 0;
  b2:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
static __inline__ void
_delay_loop_2(uint16_t __count)
{
  b4:	80 e8       	ldi	r24, 0x80	; 128
  b6:	93 ec       	ldi	r25, 0xC3	; 195
	__asm__ volatile (
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8
  while (counter != 20)
    {
	_delay_loop_2(time);
	counter++;
  bc:	2f 5f       	subi	r18, 0xFF	; 255
  be:	24 31       	cpi	r18, 0x14	; 20
  c0:	c9 f7       	brne	.-14     	; 0xb4
  c2:	ed cf       	rjmp	.-38     	; 0x9e
