
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000036c  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000084  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c7  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000037c  00000000  00000000  000008c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c2  00000000  00000000  00000c43  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000e05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000010c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000137  00000000  00000000  000011b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c8  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	28 c0       	rjmp	.+80     	; 0x68 <__bad_interrupt>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>
  22:	22 c0       	rjmp	.+68     	; 0x68 <__bad_interrupt>
  24:	21 c0       	rjmp	.+66     	; 0x68 <__bad_interrupt>
  26:	20 c0       	rjmp	.+64     	; 0x68 <__bad_interrupt>
  28:	1f c0       	rjmp	.+62     	; 0x68 <__bad_interrupt>
  2a:	1e c0       	rjmp	.+60     	; 0x68 <__bad_interrupt>
  2c:	1d c0       	rjmp	.+58     	; 0x68 <__bad_interrupt>
  2e:	1c c0       	rjmp	.+56     	; 0x68 <__bad_interrupt>
  30:	1b c0       	rjmp	.+54     	; 0x68 <__bad_interrupt>
  32:	1a c0       	rjmp	.+52     	; 0x68 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ec e7       	ldi	r30, 0x7C	; 124
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	01 c0       	rjmp	.+2      	; 0x6a <main>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "timer1PWM.h"
/*you like the song "Wanted Dead or Alive and Copperhead Road*/
int main () {
  6a:	af 92       	push	r10
  6c:	bf 92       	push	r11
  6e:	cf 92       	push	r12
  70:	df 92       	push	r13
  72:	ef 92       	push	r14
  74:	ff 92       	push	r15
  76:	0f 93       	push	r16
  78:	1f 93       	push	r17
    DDRB=0xFF;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	84 b9       	out	0x04, r24	; 4
    initPWM();
  7e:	a9 d0       	rcall	.+338    	; 0x1d2 <initPWM>
	double x=128,y;
	setCHA(128);
  80:	80 e8       	ldi	r24, 0x80	; 128
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	a1 d0       	rcall	.+322    	; 0x1c8 <setCHA>
	setCHB(128);
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	99 d0       	rcall	.+306    	; 0x1be <setCHB>
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	e0 e3       	ldi	r30, 0x30	; 48
  92:	f5 e7       	ldi	r31, 0x75	; 117
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  94:	cf 01       	movw	r24, r30
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x2c>
  9a:	2f 5f       	subi	r18, 0xFF	; 255
  9c:	3f 4f       	sbci	r19, 0xFF	; 255
	for(y=0;y<500;y++){_delay_loop_2(30000);}
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	24 3f       	cpi	r18, 0xF4	; 244
  a2:	38 07       	cpc	r19, r24
  a4:	b9 f7       	brne	.-18     	; 0x94 <main+0x2a>
  a6:	0f 2e       	mov	r0, r31
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	af 2e       	mov	r10, r31
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	bf 2e       	mov	r11, r31
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	cf 2e       	mov	r12, r31
  b4:	f3 e4       	ldi	r31, 0x43	; 67
  b6:	df 2e       	mov	r13, r31
  b8:	f0 2d       	mov	r31, r0
  ba:	17 c0       	rjmp	.+46     	; 0xea <main+0x80>
	while (1) {
		while (x < 255) {
		    x++;
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	40 e8       	ldi	r20, 0x80	; 128
  c2:	5f e3       	ldi	r21, 0x3F	; 63
  c4:	c6 01       	movw	r24, r12
  c6:	b5 01       	movw	r22, r10
  c8:	8c d0       	rcall	.+280    	; 0x1e2 <__addsf3>
  ca:	5b 01       	movw	r10, r22
  cc:	6c 01       	movw	r12, r24
			//if(x==128){PORTB+=1;}
			//if(x==138){PORTB-=1;}
			setCHA(x);
  ce:	cb d0       	rcall	.+406    	; 0x266 <__fixsfsi>
  d0:	7b 01       	movw	r14, r22
  d2:	8c 01       	movw	r16, r24
  d4:	cb 01       	movw	r24, r22
  d6:	78 d0       	rcall	.+240    	; 0x1c8 <setCHA>
			setCHB(x);
  d8:	c7 01       	movw	r24, r14
  da:	71 d0       	rcall	.+226    	; 0x1be <setCHB>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  dc:	80 e3       	ldi	r24, 0x30	; 48
  de:	95 e7       	ldi	r25, 0x75	; 117
  e0:	fc 01       	movw	r30, r24
  e2:	31 97       	sbiw	r30, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x78>
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x7c>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	4f e7       	ldi	r20, 0x7F	; 127
  f0:	53 e4       	ldi	r21, 0x43	; 67
  f2:	c6 01       	movw	r24, r12
  f4:	b5 01       	movw	r22, r10
  f6:	d2 d0       	rcall	.+420    	; 0x29c <__eqsf2>
  f8:	88 23       	and	r24, r24
  fa:	c4 f4       	brge	.+48     	; 0x12c <main+0xc2>
  fc:	df cf       	rjmp	.-66     	; 0xbc <main+0x52>
			for(y=0;y<wait_interval;y++){_delay_loop_2(30000);}
		}
		while (x > 0) {
		    x--;
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	40 e8       	ldi	r20, 0x80	; 128
 104:	5f e3       	ldi	r21, 0x3F	; 63
 106:	c6 01       	movw	r24, r12
 108:	b5 01       	movw	r22, r10
 10a:	6a d0       	rcall	.+212    	; 0x1e0 <__subsf3>
 10c:	5b 01       	movw	r10, r22
 10e:	6c 01       	movw	r12, r24
			setCHA(x);
 110:	aa d0       	rcall	.+340    	; 0x266 <__fixsfsi>
 112:	7b 01       	movw	r14, r22
 114:	8c 01       	movw	r16, r24
 116:	cb 01       	movw	r24, r22
 118:	57 d0       	rcall	.+174    	; 0x1c8 <setCHA>
			setCHB(x);
 11a:	c7 01       	movw	r24, r14
 11c:	50 d0       	rcall	.+160    	; 0x1be <setCHB>
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	95 e7       	ldi	r25, 0x75	; 117
 122:	fc 01       	movw	r30, r24
 124:	31 97       	sbiw	r30, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0xba>
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0xbe>
 12c:	20 e0       	ldi	r18, 0x00	; 0
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	40 e0       	ldi	r20, 0x00	; 0
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	c6 01       	movw	r24, r12
 136:	b5 01       	movw	r22, r10
 138:	b4 d0       	rcall	.+360    	; 0x2a2 <__gesf2>
 13a:	18 16       	cp	r1, r24
 13c:	04 f3       	brlt	.-64     	; 0xfe <main+0x94>
 13e:	d5 cf       	rjmp	.-86     	; 0xea <main+0x80>

00000140 <initPWM08>:

void initPWM( void ) {
  initPWM08();
}
void initPWM08( void ) {
 140:	81 ea       	ldi	r24, 0xA1	; 161
 142:	80 93 80 00 	sts	0x0080, r24
  TCCR1A = ( 1 << WGM10 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
 146:	89 e0       	ldi	r24, 0x09	; 9
 148:	80 93 81 00 	sts	0x0081, r24
 14c:	08 95       	ret

0000014e <initPWM09>:
}
void initPWM09( void ) {
 14e:	82 ea       	ldi	r24, 0xA2	; 162
 150:	80 93 80 00 	sts	0x0080, r24
  TCCR1A = ( 1 << WGM11 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
 154:	89 e0       	ldi	r24, 0x09	; 9
 156:	80 93 81 00 	sts	0x0081, r24
 15a:	08 95       	ret

0000015c <initPWM10>:
}
void initPWM10( void ) {
 15c:	83 ea       	ldi	r24, 0xA3	; 163
 15e:	80 93 80 00 	sts	0x0080, r24
  TCCR1A = ( 1 << WGM10 ) | ( 1 << WGM11 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
 162:	89 e0       	ldi	r24, 0x09	; 9
 164:	80 93 81 00 	sts	0x0081, r24
 168:	08 95       	ret

0000016a <setCHA08>:
}
void setCHA( uint16_t valueA )
{
  setCHA08(valueA);
}

void setCHB( uint16_t valueB )
{
  setCHB08(valueB);
}
void setCHA08( uint16_t valueA ) {
 16a:	90 93 89 00 	sts	0x0089, r25
 16e:	80 93 88 00 	sts	0x0088, r24
 172:	08 95       	ret

00000174 <setCHB08>:
  OCR1A = valueA;
}
void setCHB08( uint16_t valueB ) {
 174:	90 93 8b 00 	sts	0x008B, r25
 178:	80 93 8a 00 	sts	0x008A, r24
 17c:	08 95       	ret

0000017e <setCHA09>:
  OCR1B = valueB;
}
void setCHA09( uint16_t valueA) {
 17e:	80 93 88 00 	sts	0x0088, r24
  OCR1AL = valueA & 0xFF;
  OCR1AH = ((valueA >> 8) & 0x01);
 182:	89 2f       	mov	r24, r25
 184:	99 27       	eor	r25, r25
 186:	81 70       	andi	r24, 0x01	; 1
 188:	80 93 89 00 	sts	0x0089, r24
 18c:	08 95       	ret

0000018e <setCHB09>:
}
void setCHB09( uint16_t valueB) {
 18e:	80 93 8a 00 	sts	0x008A, r24
  OCR1BL = valueB & 0xFF;
  OCR1BH = ((valueB >> 8) & 0x01);
 192:	89 2f       	mov	r24, r25
 194:	99 27       	eor	r25, r25
 196:	81 70       	andi	r24, 0x01	; 1
 198:	80 93 8b 00 	sts	0x008B, r24
 19c:	08 95       	ret

0000019e <setCHA10>:
}
void setCHA10( uint16_t valueA) {
 19e:	80 93 88 00 	sts	0x0088, r24
  OCR1AL = valueA & 0xFF;
  OCR1AH = ((valueA >> 8) & 0x03);
 1a2:	89 2f       	mov	r24, r25
 1a4:	99 27       	eor	r25, r25
 1a6:	83 70       	andi	r24, 0x03	; 3
 1a8:	80 93 89 00 	sts	0x0089, r24
 1ac:	08 95       	ret

000001ae <setCHB10>:
}
void setCHB10( uint16_t valueB) {
 1ae:	80 93 88 00 	sts	0x0088, r24
  OCR1AL = valueB & 0xFF;
  OCR1BH = ((valueB >> 8) & 0x03);
 1b2:	89 2f       	mov	r24, r25
 1b4:	99 27       	eor	r25, r25
 1b6:	83 70       	andi	r24, 0x03	; 3
 1b8:	80 93 8b 00 	sts	0x008B, r24
 1bc:	08 95       	ret

000001be <setCHB>:
 1be:	90 93 8b 00 	sts	0x008B, r25
 1c2:	80 93 8a 00 	sts	0x008A, r24
 1c6:	08 95       	ret

000001c8 <setCHA>:
 1c8:	90 93 89 00 	sts	0x0089, r25
 1cc:	80 93 88 00 	sts	0x0088, r24
 1d0:	08 95       	ret

000001d2 <initPWM>:
 1d2:	81 ea       	ldi	r24, 0xA1	; 161
 1d4:	80 93 80 00 	sts	0x0080, r24
 1d8:	89 e0       	ldi	r24, 0x09	; 9
 1da:	80 93 81 00 	sts	0x0081, r24
 1de:	08 95       	ret

000001e0 <__subsf3>:
 1e0:	50 58       	subi	r21, 0x80	; 128

000001e2 <__addsf3>:
 1e2:	19 2e       	mov	r1, r25
 1e4:	9a d0       	rcall	.+308    	; 0x31a <__fp_split3>
 1e6:	01 d0       	rcall	.+2      	; 0x1ea <__addsf3x>
 1e8:	80 c0       	rjmp	.+256    	; 0x2ea <__fp_merge>

000001ea <__addsf3x>:
 1ea:	ba 17       	cp	r27, r26
 1ec:	62 07       	cpc	r22, r18
 1ee:	73 07       	cpc	r23, r19
 1f0:	84 07       	cpc	r24, r20
 1f2:	95 07       	cpc	r25, r21
 1f4:	b1 f1       	breq	.+108    	; 0x262 <__addsf3x+0x78>
 1f6:	88 f4       	brcc	.+34     	; 0x21a <__addsf3x+0x30>
 1f8:	0e f4       	brtc	.+2      	; 0x1fc <__addsf3x+0x12>
 1fa:	10 94       	com	r1
 1fc:	0b 2e       	mov	r0, r27
 1fe:	ba 2f       	mov	r27, r26
 200:	a0 2d       	mov	r26, r0
 202:	06 2e       	mov	r0, r22
 204:	62 2f       	mov	r22, r18
 206:	20 2d       	mov	r18, r0
 208:	07 2e       	mov	r0, r23
 20a:	73 2f       	mov	r23, r19
 20c:	30 2d       	mov	r19, r0
 20e:	08 2e       	mov	r0, r24
 210:	84 2f       	mov	r24, r20
 212:	40 2d       	mov	r20, r0
 214:	09 2e       	mov	r0, r25
 216:	95 2f       	mov	r25, r21
 218:	50 2d       	mov	r21, r0
 21a:	ff 27       	eor	r31, r31
 21c:	55 23       	and	r21, r21
 21e:	b9 f0       	breq	.+46     	; 0x24e <__addsf3x+0x64>
 220:	59 1b       	sub	r21, r25
 222:	49 f0       	breq	.+18     	; 0x236 <__addsf3x+0x4c>
 224:	57 3e       	cpi	r21, 0xE7	; 231
 226:	98 f0       	brcs	.+38     	; 0x24e <__addsf3x+0x64>
 228:	46 95       	lsr	r20
 22a:	37 95       	ror	r19
 22c:	27 95       	ror	r18
 22e:	a7 95       	ror	r26
 230:	f0 40       	sbci	r31, 0x00	; 0
 232:	53 95       	inc	r21
 234:	c9 f7       	brne	.-14     	; 0x228 <__addsf3x+0x3e>
 236:	76 f0       	brts	.+28     	; 0x254 <__addsf3x+0x6a>
 238:	ba 0f       	add	r27, r26
 23a:	62 1f       	adc	r22, r18
 23c:	73 1f       	adc	r23, r19
 23e:	84 1f       	adc	r24, r20
 240:	30 f4       	brcc	.+12     	; 0x24e <__addsf3x+0x64>
 242:	87 95       	ror	r24
 244:	77 95       	ror	r23
 246:	67 95       	ror	r22
 248:	b7 95       	ror	r27
 24a:	f0 40       	sbci	r31, 0x00	; 0
 24c:	93 95       	inc	r25
 24e:	17 fa       	bst	r1, 7
 250:	0f 2e       	mov	r0, r31
 252:	08 95       	ret
 254:	bf 1b       	sub	r27, r31
 256:	bb 27       	eor	r27, r27
 258:	ba 0b       	sbc	r27, r26
 25a:	62 0b       	sbc	r22, r18
 25c:	73 0b       	sbc	r23, r19
 25e:	84 0b       	sbc	r24, r20
 260:	f6 cf       	rjmp	.-20     	; 0x24e <__addsf3x+0x64>
 262:	de f6       	brtc	.-74     	; 0x21a <__addsf3x+0x30>
 264:	86 c0       	rjmp	.+268    	; 0x372 <__fp_zerox>

00000266 <__fixsfsi>:
 266:	97 fb       	bst	r25, 7
 268:	64 d0       	rcall	.+200    	; 0x332 <__fp_split1>
 26a:	9f 37       	cpi	r25, 0x7F	; 127
 26c:	38 f0       	brcs	.+14     	; 0x27c <__fixsfsi+0x16>
 26e:	fe e9       	ldi	r31, 0x9E	; 158
 270:	f9 1b       	sub	r31, r25
 272:	98 2f       	mov	r25, r24
 274:	87 2f       	mov	r24, r23
 276:	76 2f       	mov	r23, r22
 278:	6b 2f       	mov	r22, r27
 27a:	05 c0       	rjmp	.+10     	; 0x286 <__fixsfsi+0x20>
 27c:	77 c0       	rjmp	.+238    	; 0x36c <__fp_zero>
 27e:	96 95       	lsr	r25
 280:	87 95       	ror	r24
 282:	77 95       	ror	r23
 284:	67 95       	ror	r22
 286:	f1 50       	subi	r31, 0x01	; 1
 288:	d0 f7       	brcc	.-12     	; 0x27e <__fixsfsi+0x18>
 28a:	3e f4       	brtc	.+14     	; 0x29a <__fp_lneg+0xe>

0000028c <__fp_lneg>:
 28c:	90 95       	com	r25
 28e:	80 95       	com	r24
 290:	70 95       	com	r23
 292:	61 95       	neg	r22
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	8f 4f       	sbci	r24, 0xFF	; 255
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	08 95       	ret

0000029c <__eqsf2>:
 29c:	0e d0       	rcall	.+28     	; 0x2ba <.fp_cmp>
 29e:	5e f0       	brts	.+22     	; 0x2b6 <__cmpsf2+0xe>
 2a0:	04 c0       	rjmp	.+8      	; 0x2aa <__cmpsf2+0x2>

000002a2 <__gesf2>:
 2a2:	0b d0       	rcall	.+22     	; 0x2ba <.fp_cmp>
 2a4:	26 f0       	brts	.+8      	; 0x2ae <__cmpsf2+0x6>
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <__cmpsf2+0x2>

000002a8 <__cmpsf2>:
 2a8:	08 d0       	rcall	.+16     	; 0x2ba <.fp_cmp>
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <__cmpsf2+0xa>
 2ac:	20 f4       	brcc	.+8      	; 0x2b6 <__cmpsf2+0xe>
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	08 95       	ret
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret

000002ba <.fp_cmp>:
 2ba:	97 fb       	bst	r25, 7
 2bc:	09 2e       	mov	r0, r25
 2be:	05 26       	eor	r0, r21
 2c0:	00 f8       	bld	r0, 0
 2c2:	68 94       	set
 2c4:	2d d0       	rcall	.+90     	; 0x320 <__fp_split2>
 2c6:	e8 94       	clt
 2c8:	07 fc       	sbrc	r0, 7
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <.fp_cmp+0x20>
 2cc:	62 17       	cp	r22, r18
 2ce:	73 07       	cpc	r23, r19
 2d0:	84 07       	cpc	r24, r20
 2d2:	95 07       	cpc	r25, r21
 2d4:	21 f0       	breq	.+8      	; 0x2de <.fp_cmp+0x24>
 2d6:	08 f4       	brcc	.+2      	; 0x2da <.fp_cmp+0x20>
 2d8:	00 94       	com	r0
 2da:	07 94       	ror	r0
 2dc:	98 94       	clz
 2de:	08 95       	ret
 2e0:	9a 95       	dec	r25
 2e2:	bb 0f       	add	r27, r27
 2e4:	66 1f       	adc	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24

000002ea <__fp_merge>:
 2ea:	11 24       	eor	r1, r1
 2ec:	99 23       	and	r25, r25
 2ee:	a1 f0       	breq	.+40     	; 0x318 <__stack+0x19>
 2f0:	88 23       	and	r24, r24
 2f2:	b2 f7       	brpl	.-20     	; 0x2e0 <.fp_cmp+0x26>
 2f4:	9f 3f       	cpi	r25, 0xFF	; 255
 2f6:	59 f0       	breq	.+22     	; 0x30e <__stack+0xf>
 2f8:	bb 0f       	add	r27, r27
 2fa:	48 f4       	brcc	.+18     	; 0x30e <__stack+0xf>
 2fc:	21 f4       	brne	.+8      	; 0x306 <__stack+0x7>
 2fe:	00 20       	and	r0, r0
 300:	11 f4       	brne	.+4      	; 0x306 <__stack+0x7>
 302:	60 ff       	sbrs	r22, 0
 304:	04 c0       	rjmp	.+8      	; 0x30e <__stack+0xf>
 306:	6f 5f       	subi	r22, 0xFF	; 255
 308:	7f 4f       	sbci	r23, 0xFF	; 255
 30a:	8f 4f       	sbci	r24, 0xFF	; 255
 30c:	9f 4f       	sbci	r25, 0xFF	; 255
 30e:	88 1f       	adc	r24, r24
 310:	97 95       	ror	r25
 312:	87 95       	ror	r24
 314:	97 f9       	bld	r25, 7
 316:	08 95       	ret
 318:	29 c0       	rjmp	.+82     	; 0x36c <__fp_zero>

0000031a <__fp_split3>:
 31a:	05 2e       	mov	r0, r21
 31c:	09 26       	eor	r0, r25
 31e:	07 fa       	bst	r0, 7

00000320 <__fp_split2>:
 320:	44 0f       	add	r20, r20
 322:	55 1f       	adc	r21, r21
 324:	5f 3f       	cpi	r21, 0xFF	; 255
 326:	79 f0       	breq	.+30     	; 0x346 <__fp_split1+0x14>
 328:	aa 27       	eor	r26, r26
 32a:	a5 17       	cp	r26, r21
 32c:	08 f0       	brcs	.+2      	; 0x330 <__fp_split2+0x10>
 32e:	51 e0       	ldi	r21, 0x01	; 1
 330:	47 95       	ror	r20

00000332 <__fp_split1>:
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	9f 3f       	cpi	r25, 0xFF	; 255
 338:	31 f0       	breq	.+12     	; 0x346 <__fp_split1+0x14>
 33a:	bb 27       	eor	r27, r27
 33c:	b9 17       	cp	r27, r25
 33e:	08 f0       	brcs	.+2      	; 0x342 <__fp_split1+0x10>
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	87 95       	ror	r24
 344:	08 95       	ret
 346:	9f 91       	pop	r25
 348:	9f 91       	pop	r25
 34a:	11 24       	eor	r1, r1
 34c:	14 c0       	rjmp	.+40     	; 0x376 <__fp_nan>

0000034e <__fp_split_a>:
 34e:	97 fb       	bst	r25, 7
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	9f 3f       	cpi	r25, 0xFF	; 255
 356:	31 f0       	breq	.+12     	; 0x364 <__fp_split_a+0x16>
 358:	bb 27       	eor	r27, r27
 35a:	b9 17       	cp	r27, r25
 35c:	08 f0       	brcs	.+2      	; 0x360 <__fp_split_a+0x12>
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	87 95       	ror	r24
 362:	08 95       	ret
 364:	9f 91       	pop	r25
 366:	9f 91       	pop	r25
 368:	11 24       	eor	r1, r1
 36a:	05 c0       	rjmp	.+10     	; 0x376 <__fp_nan>

0000036c <__fp_zero>:
 36c:	66 27       	eor	r22, r22
 36e:	77 27       	eor	r23, r23
 370:	88 27       	eor	r24, r24

00000372 <__fp_zerox>:
 372:	99 27       	eor	r25, r25
 374:	08 95       	ret

00000376 <__fp_nan>:
 376:	9f ef       	ldi	r25, 0xFF	; 255
 378:	80 ec       	ldi	r24, 0xC0	; 192
 37a:	08 95       	ret
