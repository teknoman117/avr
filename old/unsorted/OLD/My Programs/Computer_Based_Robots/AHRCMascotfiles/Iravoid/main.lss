
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000192  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         0000036c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000084  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000040  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c7  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000325  00000000  00000000  000006df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a2  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  00000ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012e  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e0  00000000  00000000  0000108e  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	32 c0       	rjmp	.+100    	; 0x68 <__bad_interrupt>
   4:	31 c0       	rjmp	.+98     	; 0x68 <__bad_interrupt>
   6:	30 c0       	rjmp	.+96     	; 0x68 <__bad_interrupt>
   8:	2f c0       	rjmp	.+94     	; 0x68 <__bad_interrupt>
   a:	2e c0       	rjmp	.+92     	; 0x68 <__bad_interrupt>
   c:	2d c0       	rjmp	.+90     	; 0x68 <__bad_interrupt>
   e:	2c c0       	rjmp	.+88     	; 0x68 <__bad_interrupt>
  10:	2b c0       	rjmp	.+86     	; 0x68 <__bad_interrupt>
  12:	2a c0       	rjmp	.+84     	; 0x68 <__bad_interrupt>
  14:	29 c0       	rjmp	.+82     	; 0x68 <__bad_interrupt>
  16:	28 c0       	rjmp	.+80     	; 0x68 <__bad_interrupt>
  18:	27 c0       	rjmp	.+78     	; 0x68 <__bad_interrupt>
  1a:	26 c0       	rjmp	.+76     	; 0x68 <__bad_interrupt>
  1c:	25 c0       	rjmp	.+74     	; 0x68 <__bad_interrupt>
  1e:	24 c0       	rjmp	.+72     	; 0x68 <__bad_interrupt>
  20:	23 c0       	rjmp	.+70     	; 0x68 <__bad_interrupt>
  22:	22 c0       	rjmp	.+68     	; 0x68 <__bad_interrupt>
  24:	21 c0       	rjmp	.+66     	; 0x68 <__bad_interrupt>
  26:	20 c0       	rjmp	.+64     	; 0x68 <__bad_interrupt>
  28:	1f c0       	rjmp	.+62     	; 0x68 <__bad_interrupt>
  2a:	1e c0       	rjmp	.+60     	; 0x68 <__bad_interrupt>
  2c:	1d c0       	rjmp	.+58     	; 0x68 <__bad_interrupt>
  2e:	1c c0       	rjmp	.+56     	; 0x68 <__bad_interrupt>
  30:	1b c0       	rjmp	.+54     	; 0x68 <__bad_interrupt>
  32:	1a c0       	rjmp	.+52     	; 0x68 <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d2 e0       	ldi	r29, 0x02	; 2
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e2 e9       	ldi	r30, 0x92	; 146
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a0 30       	cpi	r26, 0x00	; 0
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	01 c0       	rjmp	.+2      	; 0x6a <main>

00000068 <__bad_interrupt>:
  68:	cb cf       	rjmp	.-106    	; 0x0 <__vectors>

0000006a <main>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "timer1PWM.h"

int main () {
  6a:	8f ef       	ldi	r24, 0xFF	; 255
  6c:	84 b9       	out	0x04, r24	; 4
  DDRB=0xFF;
  DDRD=0x03;
  6e:	83 e0       	ldi	r24, 0x03	; 3
  70:	8a b9       	out	0x0a, r24	; 10
  PORTB+=1;
  72:	85 b1       	in	r24, 0x05	; 5
  74:	8f 5f       	subi	r24, 0xFF	; 255
  76:	85 b9       	out	0x05, r24	; 5
  initPWM();
  78:	85 d0       	rcall	.+266    	; 0x184 <initPWM>
  int x;
  while (1) {
    if((PIND >> 3) & 1) {
  7a:	89 b1       	in	r24, 0x09	; 9
  7c:	86 95       	lsr	r24
  7e:	86 95       	lsr	r24
  80:	86 95       	lsr	r24
  82:	80 ff       	sbrs	r24, 0
  84:	06 c0       	rjmp	.+12     	; 0x92 <main+0x28>
      setCHA(0);
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	77 d0       	rcall	.+238    	; 0x17a <setCHA>
      setCHB(32);
  8c:	80 e2       	ldi	r24, 0x20	; 32
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	1b c0       	rjmp	.+54     	; 0xc8 <main+0x5e>
    }
    else {
      if((PIND >> 2) & 1) {
  92:	89 b1       	in	r24, 0x09	; 9
  94:	86 95       	lsr	r24
  96:	86 95       	lsr	r24
  98:	80 ff       	sbrs	r24, 0
  9a:	06 c0       	rjmp	.+12     	; 0xa8 <main+0x3e>
        setCHA(0);
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	6c d0       	rcall	.+216    	; 0x17a <setCHA>
        setCHB(64);
  a2:	80 e4       	ldi	r24, 0x40	; 64
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	10 c0       	rjmp	.+32     	; 0xc8 <main+0x5e>
      }
      else {
        if((PIND >> 4) & 1) {
  a8:	89 b1       	in	r24, 0x09	; 9
  aa:	82 95       	swap	r24
  ac:	8f 70       	andi	r24, 0x0F	; 15
  ae:	80 ff       	sbrs	r24, 0
  b0:	06 c0       	rjmp	.+12     	; 0xbe <main+0x54>
          setCHA(64);
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	61 d0       	rcall	.+194    	; 0x17a <setCHA>
          setCHB(0);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <main+0x5e>
        }
		else {
		  setCHA(255);
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	5b d0       	rcall	.+182    	; 0x17a <setCHA>
		  setCHB(255);
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	53 d0       	rcall	.+166    	; 0x170 <setCHB>
		}
	  }
	}
	if((PORTB & 1)==1){PORTB-=1;}
  ca:	28 9b       	sbis	0x05, 0	; 5
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <main+0x6a>
  ce:	85 b1       	in	r24, 0x05	; 5
  d0:	81 50       	subi	r24, 0x01	; 1
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x6e>
	else{PORTB+=1;}
  d4:	85 b1       	in	r24, 0x05	; 5
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	85 b9       	out	0x05, r24	; 5
  da:	20 e0       	ldi	r18, 0x00	; 0
  dc:	30 e0       	ldi	r19, 0x00	; 0
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  de:	80 e3       	ldi	r24, 0x30	; 48
  e0:	95 e7       	ldi	r25, 0x75	; 117
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <main+0x78>
	for(x=0;x<10;x++){_delay_loop_2(30000);}
  e6:	2f 5f       	subi	r18, 0xFF	; 255
  e8:	3f 4f       	sbci	r19, 0xFF	; 255
  ea:	2a 30       	cpi	r18, 0x0A	; 10
  ec:	31 05       	cpc	r19, r1
  ee:	b9 f7       	brne	.-18     	; 0xde <main+0x74>
  f0:	c4 cf       	rjmp	.-120    	; 0x7a <main+0x10>

000000f2 <initPWM08>:

void initPWM( void ) {
  initPWM08();
}
void initPWM08( void ) {
  f2:	81 ea       	ldi	r24, 0xA1	; 161
  f4:	80 93 80 00 	sts	0x0080, r24
  TCCR1A = ( 1 << WGM10 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
  f8:	89 e0       	ldi	r24, 0x09	; 9
  fa:	80 93 81 00 	sts	0x0081, r24
  fe:	08 95       	ret

00000100 <initPWM09>:
}
void initPWM09( void ) {
 100:	82 ea       	ldi	r24, 0xA2	; 162
 102:	80 93 80 00 	sts	0x0080, r24
  TCCR1A = ( 1 << WGM11 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	80 93 81 00 	sts	0x0081, r24
 10c:	08 95       	ret

0000010e <initPWM10>:
}
void initPWM10( void ) {
 10e:	83 ea       	ldi	r24, 0xA3	; 163
 110:	80 93 80 00 	sts	0x0080, r24
  TCCR1A = ( 1 << WGM10 ) | ( 1 << WGM11 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
 114:	89 e0       	ldi	r24, 0x09	; 9
 116:	80 93 81 00 	sts	0x0081, r24
 11a:	08 95       	ret

0000011c <setCHA08>:
}
void setCHA( uint16_t valueA )
{
  setCHA08(valueA);
}

void setCHB( uint16_t valueB )
{
  setCHB08(valueB);
}
void setCHA08( uint16_t valueA ) {
 11c:	90 93 89 00 	sts	0x0089, r25
 120:	80 93 88 00 	sts	0x0088, r24
 124:	08 95       	ret

00000126 <setCHB08>:
  OCR1A = valueA;
}
void setCHB08( uint16_t valueB ) {
 126:	90 93 8b 00 	sts	0x008B, r25
 12a:	80 93 8a 00 	sts	0x008A, r24
 12e:	08 95       	ret

00000130 <setCHA09>:
  OCR1B = valueB;
}
void setCHA09( uint16_t valueA) {
 130:	80 93 88 00 	sts	0x0088, r24
  OCR1AL = valueA & 0xFF;
  OCR1AH = ((valueA >> 8) & 0x01);
 134:	89 2f       	mov	r24, r25
 136:	99 27       	eor	r25, r25
 138:	81 70       	andi	r24, 0x01	; 1
 13a:	80 93 89 00 	sts	0x0089, r24
 13e:	08 95       	ret

00000140 <setCHB09>:
}
void setCHB09( uint16_t valueB) {
 140:	80 93 8a 00 	sts	0x008A, r24
  OCR1BL = valueB & 0xFF;
  OCR1BH = ((valueB >> 8) & 0x01);
 144:	89 2f       	mov	r24, r25
 146:	99 27       	eor	r25, r25
 148:	81 70       	andi	r24, 0x01	; 1
 14a:	80 93 8b 00 	sts	0x008B, r24
 14e:	08 95       	ret

00000150 <setCHA10>:
}
void setCHA10( uint16_t valueA) {
 150:	80 93 88 00 	sts	0x0088, r24
  OCR1AL = valueA & 0xFF;
  OCR1AH = ((valueA >> 8) & 0x03);
 154:	89 2f       	mov	r24, r25
 156:	99 27       	eor	r25, r25
 158:	83 70       	andi	r24, 0x03	; 3
 15a:	80 93 89 00 	sts	0x0089, r24
 15e:	08 95       	ret

00000160 <setCHB10>:
}
void setCHB10( uint16_t valueB) {
 160:	80 93 88 00 	sts	0x0088, r24
  OCR1AL = valueB & 0xFF;
  OCR1BH = ((valueB >> 8) & 0x03);
 164:	89 2f       	mov	r24, r25
 166:	99 27       	eor	r25, r25
 168:	83 70       	andi	r24, 0x03	; 3
 16a:	80 93 8b 00 	sts	0x008B, r24
 16e:	08 95       	ret

00000170 <setCHB>:
 170:	90 93 8b 00 	sts	0x008B, r25
 174:	80 93 8a 00 	sts	0x008A, r24
 178:	08 95       	ret

0000017a <setCHA>:
 17a:	90 93 89 00 	sts	0x0089, r25
 17e:	80 93 88 00 	sts	0x0088, r24
 182:	08 95       	ret

00000184 <initPWM>:
 184:	81 ea       	ldi	r24, 0xA1	; 161
 186:	80 93 80 00 	sts	0x0080, r24
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	80 93 81 00 	sts	0x0081, r24
 190:	08 95       	ret
