
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  00001a04  00001a98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000aa  008000f6  008000f6  00001b2e  2**0
                  ALLOC
  3 .stab         0000036c  00000000  00000000  00001b30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000084  00000000  00000000  00001e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000004bb  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001093  00000000  00000000  000024fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000074f  00000000  00000000  0000358e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d7  00000000  00000000  00003cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000470  00000000  00000000  00004fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003ed  00000000  00000000  00005424  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000680  00000000  00000000  00005811  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dc 06 	jmp	0xdb8	; 0xdb8 <__vector_1>
       8:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__vector_2>
       c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      10:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      14:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      18:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      1c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      20:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      24:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      28:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      2c:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_11>
      30:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      34:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      38:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      3c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      40:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      44:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      48:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>
      50:	0c 94 45 00 	jmp	0x8a	; 0x8a <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3a       	cpi	r26, 0xA0	; 160
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0c 94 1a 02 	jmp	0x434	; 0x434 <main>

0000008a <__bad_interrupt>:
      8a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008e <enc>:
  uprintf(dumb);
  uprintf("\r");
}

void enc (void) {
      8e:	80 e6       	ldi	r24, 0x60	; 96
      90:	90 e0       	ldi	r25, 0x00	; 0
      92:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
  uprintf("Command Excepted\r");
  //switch (ExtractNum(3)) {
  //  case 0:dtostrf(getDisL(),12,1,dumb);break;
 //   case 1:dtostrf(getDisR(),12,1,dumb);break;
 // }
  uprintf(dumb);
      96:	8c e3       	ldi	r24, 0x3C	; 60
      98:	91 e0       	ldi	r25, 0x01	; 1
      9a:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
  uprintf("\r");
      9e:	82 e7       	ldi	r24, 0x72	; 114
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
      a6:	08 95       	ret

000000a8 <Stop>:
      a8:	80 e6       	ldi	r24, 0x60	; 96
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
      b0:	80 e0       	ldi	r24, 0x00	; 0
      b2:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
      b6:	80 e0       	ldi	r24, 0x00	; 0
      b8:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
      bc:	40 e0       	ldi	r20, 0x00	; 0
      be:	60 e0       	ldi	r22, 0x00	; 0
      c0:	82 e4       	ldi	r24, 0x42	; 66
      c2:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	61 e0       	ldi	r22, 0x01	; 1
      ca:	82 e4       	ldi	r24, 0x42	; 66
      cc:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
      d0:	40 e0       	ldi	r20, 0x00	; 0
      d2:	62 e0       	ldi	r22, 0x02	; 2
      d4:	82 e4       	ldi	r24, 0x42	; 66
      d6:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
      da:	40 e0       	ldi	r20, 0x00	; 0
      dc:	63 e0       	ldi	r22, 0x03	; 3
      de:	82 e4       	ldi	r24, 0x42	; 66
      e0:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
      ec:	80 e0       	ldi	r24, 0x00	; 0
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
      f4:	08 95       	ret

000000f6 <ExtractNum>:
      f6:	0f 93       	push	r16
      f8:	1f 93       	push	r17
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	e2 97       	sbiw	r28, 0x32	; 50
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	f8 94       	cli
     108:	de bf       	out	0x3e, r29	; 62
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	80 93 f6 00 	sts	0x00F6, r24
     112:	6f ef       	ldi	r22, 0xFF	; 255
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	8e 01       	movw	r16, r28
     118:	0f 5f       	subi	r16, 0xFF	; 255
     11a:	1f 4f       	sbci	r17, 0xFF	; 255
     11c:	c8 01       	movw	r24, r16
     11e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcpy>
     122:	30 91 f6 00 	lds	r19, 0x00F6
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	c8 01       	movw	r24, r16
     12a:	40 e2       	ldi	r20, 0x20	; 32
     12c:	05 c0       	rjmp	.+10     	; 0x138 <ExtractNum+0x42>
     12e:	fc 01       	movw	r30, r24
     130:	e2 0f       	add	r30, r18
     132:	f1 1d       	adc	r31, r1
     134:	40 83       	st	Z, r20
     136:	2f 5f       	subi	r18, 0xFF	; 255
     138:	23 17       	cp	r18, r19
     13a:	c9 f7       	brne	.-14     	; 0x12e <ExtractNum+0x38>
     13c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <atoi>
     140:	e2 96       	adiw	r28, 0x32	; 50
     142:	0f b6       	in	r0, 0x3f	; 63
     144:	f8 94       	cli
     146:	de bf       	out	0x3e, r29	; 62
     148:	0f be       	out	0x3f, r0	; 63
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	df 91       	pop	r29
     14e:	cf 91       	pop	r28
     150:	1f 91       	pop	r17
     152:	0f 91       	pop	r16
     154:	08 95       	ret

00000156 <bmp>:
     156:	80 e6       	ldi	r24, 0x60	; 96
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     15e:	83 e0       	ldi	r24, 0x03	; 3
     160:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     164:	00 97       	sbiw	r24, 0x00	; 0
     166:	19 f0       	breq	.+6      	; 0x16e <bmp+0x18>
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	71 f4       	brne	.+28     	; 0x188 <bmp+0x32>
     16c:	02 c0       	rjmp	.+4      	; 0x172 <bmp+0x1c>
     16e:	64 e0       	ldi	r22, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <bmp+0x1e>
     172:	65 e0       	ldi	r22, 0x05	; 5
     174:	82 e4       	ldi	r24, 0x42	; 66
     176:	0e 94 8e 0a 	call	0x151c	; 0x151c <GetPin>
     17a:	4a e0       	ldi	r20, 0x0A	; 10
     17c:	50 e0       	ldi	r21, 0x00	; 0
     17e:	6c e3       	ldi	r22, 0x3C	; 60
     180:	71 e0       	ldi	r23, 0x01	; 1
     182:	99 27       	eor	r25, r25
     184:	0e 94 b5 0c 	call	0x196a	; 0x196a <itoa>
     188:	8c e3       	ldi	r24, 0x3C	; 60
     18a:	91 e0       	ldi	r25, 0x01	; 1
     18c:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     190:	82 e7       	ldi	r24, 0x72	; 114
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     198:	08 95       	ret

0000019a <snr>:
     19a:	80 e6       	ldi	r24, 0x60	; 96
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     1a2:	83 e0       	ldi	r24, 0x03	; 3
     1a4:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     1a8:	81 30       	cpi	r24, 0x01	; 1
     1aa:	91 05       	cpc	r25, r1
     1ac:	41 f0       	breq	.+16     	; 0x1be <snr+0x24>
     1ae:	81 30       	cpi	r24, 0x01	; 1
     1b0:	91 05       	cpc	r25, r1
     1b2:	18 f0       	brcs	.+6      	; 0x1ba <snr+0x20>
     1b4:	02 97       	sbiw	r24, 0x02	; 2
     1b6:	71 f4       	brne	.+28     	; 0x1d4 <snr+0x3a>
     1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <snr+0x28>
     1ba:	82 ee       	ldi	r24, 0xE2	; 226
     1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <snr+0x2a>
     1be:	84 ee       	ldi	r24, 0xE4	; 228
     1c0:	01 c0       	rjmp	.+2      	; 0x1c4 <snr+0x2a>
     1c2:	86 ee       	ldi	r24, 0xE6	; 230
     1c4:	0e 94 3f 0c 	call	0x187e	; 0x187e <getCM>
     1c8:	4a e0       	ldi	r20, 0x0A	; 10
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	6c e3       	ldi	r22, 0x3C	; 60
     1ce:	71 e0       	ldi	r23, 0x01	; 1
     1d0:	0e 94 b5 0c 	call	0x196a	; 0x196a <itoa>
     1d4:	8c e3       	ldi	r24, 0x3C	; 60
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     1dc:	82 e7       	ldi	r24, 0x72	; 114
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     1e4:	08 95       	ret

000001e6 <lgh>:
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	80 e6       	ldi	r24, 0x60	; 96
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     1f2:	83 e0       	ldi	r24, 0x03	; 3
     1f4:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     1f8:	0e 94 ba 0b 	call	0x1774	; 0x1774 <ADC08bit>
     1fc:	0c e3       	ldi	r16, 0x3C	; 60
     1fe:	11 e0       	ldi	r17, 0x01	; 1
     200:	4a e0       	ldi	r20, 0x0A	; 10
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	b8 01       	movw	r22, r16
     206:	99 27       	eor	r25, r25
     208:	0e 94 b5 0c 	call	0x196a	; 0x196a <itoa>
     20c:	c8 01       	movw	r24, r16
     20e:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     212:	82 e7       	ldi	r24, 0x72	; 114
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	08 95       	ret

00000220 <pservop>:
     220:	80 e6       	ldi	r24, 0x60	; 96
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     228:	87 e0       	ldi	r24, 0x07	; 7
     22a:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     22e:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <setservo2>
     232:	08 95       	ret

00000234 <tservop>:
     234:	80 e6       	ldi	r24, 0x60	; 96
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     23c:	87 e0       	ldi	r24, 0x07	; 7
     23e:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     242:	0e 94 cc 0a 	call	0x1598	; 0x1598 <setservo1>
     246:	08 95       	ret

00000248 <TurnR>:
     248:	80 e6       	ldi	r24, 0x60	; 96
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
     256:	80 e0       	ldi	r24, 0x00	; 0
     258:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	82 e4       	ldi	r24, 0x42	; 66
     262:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     266:	40 e0       	ldi	r20, 0x00	; 0
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	82 e4       	ldi	r24, 0x42	; 66
     26c:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	62 e0       	ldi	r22, 0x02	; 2
     274:	82 e4       	ldi	r24, 0x42	; 66
     276:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     27a:	40 e0       	ldi	r20, 0x00	; 0
     27c:	63 e0       	ldi	r22, 0x03	; 3
     27e:	82 e4       	ldi	r24, 0x42	; 66
     280:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     284:	85 e0       	ldi	r24, 0x05	; 5
     286:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     28a:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
     28e:	85 e0       	ldi	r24, 0x05	; 5
     290:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     294:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
     298:	08 95       	ret

0000029a <TurnL>:
     29a:	80 e6       	ldi	r24, 0x60	; 96
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	82 e4       	ldi	r24, 0x42	; 66
     2b4:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	61 e0       	ldi	r22, 0x01	; 1
     2bc:	82 e4       	ldi	r24, 0x42	; 66
     2be:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	62 e0       	ldi	r22, 0x02	; 2
     2c6:	82 e4       	ldi	r24, 0x42	; 66
     2c8:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	63 e0       	ldi	r22, 0x03	; 3
     2d0:	82 e4       	ldi	r24, 0x42	; 66
     2d2:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     2d6:	85 e0       	ldi	r24, 0x05	; 5
     2d8:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     2dc:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     2e6:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
     2ea:	08 95       	ret

000002ec <SpinR>:
     2ec:	80 e6       	ldi	r24, 0x60	; 96
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
     300:	41 e0       	ldi	r20, 0x01	; 1
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	82 e4       	ldi	r24, 0x42	; 66
     306:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     30a:	40 e0       	ldi	r20, 0x00	; 0
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	82 e4       	ldi	r24, 0x42	; 66
     310:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     314:	40 e0       	ldi	r20, 0x00	; 0
     316:	62 e0       	ldi	r22, 0x02	; 2
     318:	82 e4       	ldi	r24, 0x42	; 66
     31a:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     31e:	41 e0       	ldi	r20, 0x01	; 1
     320:	63 e0       	ldi	r22, 0x03	; 3
     322:	82 e4       	ldi	r24, 0x42	; 66
     324:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     328:	85 e0       	ldi	r24, 0x05	; 5
     32a:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     32e:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
     332:	85 e0       	ldi	r24, 0x05	; 5
     334:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     338:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
     33c:	08 95       	ret

0000033e <SpinL>:
     33e:	80 e6       	ldi	r24, 0x60	; 96
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     346:	8f ef       	ldi	r24, 0xFF	; 255
     348:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
     352:	40 e0       	ldi	r20, 0x00	; 0
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	82 e4       	ldi	r24, 0x42	; 66
     358:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	82 e4       	ldi	r24, 0x42	; 66
     362:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     366:	41 e0       	ldi	r20, 0x01	; 1
     368:	62 e0       	ldi	r22, 0x02	; 2
     36a:	82 e4       	ldi	r24, 0x42	; 66
     36c:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	63 e0       	ldi	r22, 0x03	; 3
     374:	82 e4       	ldi	r24, 0x42	; 66
     376:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     37a:	85 e0       	ldi	r24, 0x05	; 5
     37c:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     380:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
     384:	85 e0       	ldi	r24, 0x05	; 5
     386:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     38a:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
     38e:	08 95       	ret

00000390 <Backward>:
     390:	80 e6       	ldi	r24, 0x60	; 96
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     398:	8f ef       	ldi	r24, 0xFF	; 255
     39a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
     39e:	8f ef       	ldi	r24, 0xFF	; 255
     3a0:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	82 e4       	ldi	r24, 0x42	; 66
     3aa:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	82 e4       	ldi	r24, 0x42	; 66
     3b4:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	82 e4       	ldi	r24, 0x42	; 66
     3be:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	63 e0       	ldi	r22, 0x03	; 3
     3c6:	82 e4       	ldi	r24, 0x42	; 66
     3c8:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     3cc:	88 e0       	ldi	r24, 0x08	; 8
     3ce:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     3d2:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
     3d6:	88 e0       	ldi	r24, 0x08	; 8
     3d8:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     3dc:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
     3e0:	08 95       	ret

000003e2 <Forward>:
     3e2:	80 e6       	ldi	r24, 0x60	; 96
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	0e 94 64 06 	call	0xcc8	; 0xcc8 <setDirL>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	0e 94 67 06 	call	0xcce	; 0xcce <setDirR>
     3f6:	41 e0       	ldi	r20, 0x01	; 1
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	82 e4       	ldi	r24, 0x42	; 66
     3fc:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     400:	40 e0       	ldi	r20, 0x00	; 0
     402:	61 e0       	ldi	r22, 0x01	; 1
     404:	82 e4       	ldi	r24, 0x42	; 66
     406:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     40a:	41 e0       	ldi	r20, 0x01	; 1
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	82 e4       	ldi	r24, 0x42	; 66
     410:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	63 e0       	ldi	r22, 0x03	; 3
     418:	82 e4       	ldi	r24, 0x42	; 66
     41a:	0e 94 be 09 	call	0x137c	; 0x137c <SetPin>
     41e:	87 e0       	ldi	r24, 0x07	; 7
     420:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     424:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <setCHA10>
     428:	87 e0       	ldi	r24, 0x07	; 7
     42a:	0e 94 7b 00 	call	0xf6	; 0xf6 <ExtractNum>
     42e:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <setCHB10>
     432:	08 95       	ret

00000434 <main>:
     434:	89 e1       	ldi	r24, 0x19	; 25
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 1d 03 	call	0x63a	; 0x63a <enable_uart>
     43c:	0e 94 36 06 	call	0xc6c	; 0xc6c <initENC>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	81 e7       	ldi	r24, 0x71	; 113
     44a:	92 e0       	ldi	r25, 0x02	; 2
     44c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <initservos>
     450:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <initPWM10>
     454:	0e 94 90 0b 	call	0x1720	; 0x1720 <initADC>
     458:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <initcommsunit>
     45c:	4f e4       	ldi	r20, 0x4F	; 79
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	82 e4       	ldi	r24, 0x42	; 66
     462:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SetDir>
     466:	4f e4       	ldi	r20, 0x4F	; 79
     468:	61 e0       	ldi	r22, 0x01	; 1
     46a:	82 e4       	ldi	r24, 0x42	; 66
     46c:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SetDir>
     470:	4f e4       	ldi	r20, 0x4F	; 79
     472:	62 e0       	ldi	r22, 0x02	; 2
     474:	82 e4       	ldi	r24, 0x42	; 66
     476:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SetDir>
     47a:	4f e4       	ldi	r20, 0x4F	; 79
     47c:	63 e0       	ldi	r22, 0x03	; 3
     47e:	82 e4       	ldi	r24, 0x42	; 66
     480:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SetDir>
     484:	49 e4       	ldi	r20, 0x49	; 73
     486:	64 e0       	ldi	r22, 0x04	; 4
     488:	82 e4       	ldi	r24, 0x42	; 66
     48a:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SetDir>
     48e:	49 e4       	ldi	r20, 0x49	; 73
     490:	65 e0       	ldi	r22, 0x05	; 5
     492:	82 e4       	ldi	r24, 0x42	; 66
     494:	0e 94 ee 08 	call	0x11dc	; 0x11dc <SetDir>
     498:	84 e7       	ldi	r24, 0x74	; 116
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     4a0:	06 c0       	rjmp	.+12     	; 0x4ae <main+0x7a>
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	6a e0       	ldi	r22, 0x0A	; 10
     4a6:	8c e3       	ldi	r24, 0x3C	; 60
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 31 03 	call	0x662	; 0x662 <uscanf>
     4ae:	44 e0       	ldi	r20, 0x04	; 4
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e9       	ldi	r22, 0x90	; 144
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	8c e3       	ldi	r24, 0x3C	; 60
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	81 f3       	breq	.-32     	; 0x4a2 <main+0x6e>
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 f4 00 	sts	0x00F4, r24
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	62 e3       	ldi	r22, 0x32	; 50
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 31 03 	call	0x662	; 0x662 <uscanf>
     4d4:	47 e0       	ldi	r20, 0x07	; 7
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	65 e9       	ldi	r22, 0x95	; 149
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	8f ef       	ldi	r24, 0xFF	; 255
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     4e4:	89 2b       	or	r24, r25
     4e6:	11 f4       	brne	.+4      	; 0x4ec <main+0xb8>
     4e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <Forward>
     4ec:	48 e0       	ldi	r20, 0x08	; 8
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	6d e9       	ldi	r22, 0x9D	; 157
     4f2:	70 e0       	ldi	r23, 0x00	; 0
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     4fc:	89 2b       	or	r24, r25
     4fe:	11 f4       	brne	.+4      	; 0x504 <main+0xd0>
     500:	0e 94 c8 01 	call	0x390	; 0x390 <Backward>
     504:	45 e0       	ldi	r20, 0x05	; 5
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	66 ea       	ldi	r22, 0xA6	; 166
     50a:	70 e0       	ldi	r23, 0x00	; 0
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     514:	89 2b       	or	r24, r25
     516:	11 f4       	brne	.+4      	; 0x51c <main+0xe8>
     518:	0e 94 9f 01 	call	0x33e	; 0x33e <SpinL>
     51c:	45 e0       	ldi	r20, 0x05	; 5
     51e:	50 e0       	ldi	r21, 0x00	; 0
     520:	6c ea       	ldi	r22, 0xAC	; 172
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     52c:	89 2b       	or	r24, r25
     52e:	11 f4       	brne	.+4      	; 0x534 <main+0x100>
     530:	0e 94 76 01 	call	0x2ec	; 0x2ec <SpinR>
     534:	45 e0       	ldi	r20, 0x05	; 5
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	62 eb       	ldi	r22, 0xB2	; 178
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     544:	89 2b       	or	r24, r25
     546:	11 f4       	brne	.+4      	; 0x54c <main+0x118>
     548:	0e 94 4d 01 	call	0x29a	; 0x29a <TurnL>
     54c:	45 e0       	ldi	r20, 0x05	; 5
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	68 eb       	ldi	r22, 0xB8	; 184
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	8f ef       	ldi	r24, 0xFF	; 255
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     55c:	89 2b       	or	r24, r25
     55e:	11 f4       	brne	.+4      	; 0x564 <main+0x130>
     560:	0e 94 24 01 	call	0x248	; 0x248 <TurnR>
     564:	44 e0       	ldi	r20, 0x04	; 4
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	6e eb       	ldi	r22, 0xBE	; 190
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	8f ef       	ldi	r24, 0xFF	; 255
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     574:	89 2b       	or	r24, r25
     576:	11 f4       	brne	.+4      	; 0x57c <main+0x148>
     578:	0e 94 54 00 	call	0xa8	; 0xa8 <Stop>
     57c:	47 e0       	ldi	r20, 0x07	; 7
     57e:	50 e0       	ldi	r21, 0x00	; 0
     580:	63 ec       	ldi	r22, 0xC3	; 195
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	8f ef       	ldi	r24, 0xFF	; 255
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     58c:	89 2b       	or	r24, r25
     58e:	11 f4       	brne	.+4      	; 0x594 <main+0x160>
     590:	0e 94 1a 01 	call	0x234	; 0x234 <tservop>
     594:	47 e0       	ldi	r20, 0x07	; 7
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	6b ec       	ldi	r22, 0xCB	; 203
     59a:	70 e0       	ldi	r23, 0x00	; 0
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     5a4:	89 2b       	or	r24, r25
     5a6:	11 f4       	brne	.+4      	; 0x5ac <main+0x178>
     5a8:	0e 94 10 01 	call	0x220	; 0x220 <pservop>
     5ac:	43 e0       	ldi	r20, 0x03	; 3
     5ae:	50 e0       	ldi	r21, 0x00	; 0
     5b0:	63 ed       	ldi	r22, 0xD3	; 211
     5b2:	70 e0       	ldi	r23, 0x00	; 0
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     5bc:	89 2b       	or	r24, r25
     5be:	11 f4       	brne	.+4      	; 0x5c4 <main+0x190>
     5c0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <lgh>
     5c4:	43 e0       	ldi	r20, 0x03	; 3
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	67 ed       	ldi	r22, 0xD7	; 215
     5ca:	70 e0       	ldi	r23, 0x00	; 0
     5cc:	8f ef       	ldi	r24, 0xFF	; 255
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     5d4:	89 2b       	or	r24, r25
     5d6:	11 f4       	brne	.+4      	; 0x5dc <main+0x1a8>
     5d8:	0e 94 cd 00 	call	0x19a	; 0x19a <snr>
     5dc:	43 e0       	ldi	r20, 0x03	; 3
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	6b ed       	ldi	r22, 0xDB	; 219
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     5ec:	89 2b       	or	r24, r25
     5ee:	11 f4       	brne	.+4      	; 0x5f4 <main+0x1c0>
     5f0:	0e 94 ab 00 	call	0x156	; 0x156 <bmp>
     5f4:	43 e0       	ldi	r20, 0x03	; 3
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	6f ed       	ldi	r22, 0xDF	; 223
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     604:	89 2b       	or	r24, r25
     606:	11 f4       	brne	.+4      	; 0x60c <main+0x1d8>
     608:	0e 94 47 00 	call	0x8e	; 0x8e <enc>
     60c:	47 e0       	ldi	r20, 0x07	; 7
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	63 ee       	ldi	r22, 0xE3	; 227
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 a7 0c 	call	0x194e	; 0x194e <strncmp>
     61c:	89 2b       	or	r24, r25
     61e:	19 f4       	brne	.+6      	; 0x626 <main+0x1f2>
     620:	10 92 f4 00 	sts	0x00F4, r1
     624:	05 c0       	rjmp	.+10     	; 0x630 <main+0x1fc>
     626:	80 91 f4 00 	lds	r24, 0x00F4
     62a:	81 30       	cpi	r24, 0x01	; 1
     62c:	09 f4       	brne	.+2      	; 0x630 <main+0x1fc>
     62e:	4c cf       	rjmp	.-360    	; 0x4c8 <main+0x94>
     630:	8b ee       	ldi	r24, 0xEB	; 235
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 36 05 	call	0xa6c	; 0xa6c <uprintf>
     638:	ff cf       	rjmp	.-2      	; 0x638 <main+0x204>

0000063a <enable_uart>:
#include <avr/io.h>
#include <string.h>
#include "avrstdio.h"

void enable_uart(uint16_t UBRRval) {
     63a:	29 2f       	mov	r18, r25
     63c:	33 27       	eor	r19, r19
     63e:	20 bd       	out	0x20, r18	; 32
  UBRRH = (UBRRval >> 8) & 0xFF;
  UBRRL = UBRRval & 0xFF;
     640:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXCIE)|(1<<RXEN)|(1<<TXEN);	
     642:	88 e9       	ldi	r24, 0x98	; 152
     644:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
     646:	86 e8       	ldi	r24, 0x86	; 134
     648:	80 bd       	out	0x20, r24	; 32
     64a:	08 95       	ret

0000064c <txb>:
}

void txb(char dat) {
     64c:	5d 9b       	sbis	0x0b, 5	; 11
     64e:	fe cf       	rjmp	.-4      	; 0x64c <txb>
	while ( !( UCSRA & (1<<UDRE)) );
	UDR = dat;
     650:	8c b9       	out	0x0c, r24	; 12
     652:	08 95       	ret

00000654 <rxb>:
}

void uprintf(char data[]) {
	for(x=0;x<strlen(data);x++) {
	  txb(data[x]);
	}
}

char rxb(void) {
     654:	5f 9b       	sbis	0x0b, 7	; 11
     656:	fe cf       	rjmp	.-4      	; 0x654 <rxb>
  while( !(UCSRA & (1<<RXC)));
  s = UDR;
     658:	8c b1       	in	r24, 0x0c	; 12
     65a:	80 93 5c 01 	sts	0x015C, r24
  return s;
}
     65e:	99 27       	eor	r25, r25
     660:	08 95       	ret

00000662 <uscanf>:

char *uscanf(char retstr[],uint8_t elements,uint8_t onoff) {
     662:	2f 92       	push	r2
     664:	3f 92       	push	r3
     666:	4f 92       	push	r4
     668:	5f 92       	push	r5
     66a:	6f 92       	push	r6
     66c:	7f 92       	push	r7
     66e:	8f 92       	push	r8
     670:	9f 92       	push	r9
     672:	af 92       	push	r10
     674:	bf 92       	push	r11
     676:	cf 92       	push	r12
     678:	df 92       	push	r13
     67a:	ef 92       	push	r14
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	63 97       	sbiw	r28, 0x13	; 19
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	9b 8b       	std	Y+19, r25	; 0x13
     698:	8a 8b       	std	Y+18, r24	; 0x12
     69a:	69 83       	std	Y+1, r22	; 0x01
     69c:	14 2f       	mov	r17, r20
  strcpy(str,"");
     69e:	65 ef       	ldi	r22, 0xF5	; 245
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	8d e5       	ldi	r24, 0x5D	; 93
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcpy>
  switch (onoff) {
     6aa:	11 23       	and	r17, r17
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <uscanf+0x54>
     6ae:	11 30       	cpi	r17, 0x01	; 1
     6b0:	09 f0       	breq	.+2      	; 0x6b4 <uscanf+0x52>
     6b2:	bb c1       	rjmp	.+886    	; 0xa2a <__stack+0x1cb>
     6b4:	d3 c0       	rjmp	.+422    	; 0x85c <uscanf+0x1fa>
   case ON:
    for(x=0;x<elements;x++) {
     6b6:	10 92 f7 00 	sts	0x00F7, r1
     6ba:	10 92 f8 00 	sts	0x00F8, r1
     6be:	10 92 f9 00 	sts	0x00F9, r1
     6c2:	10 92 fa 00 	sts	0x00FA, r1
     6c6:	10 92 fb 00 	sts	0x00FB, r1
     6ca:	10 92 fc 00 	sts	0x00FC, r1
     6ce:	10 92 fd 00 	sts	0x00FD, r1
     6d2:	10 92 fe 00 	sts	0x00FE, r1
     6d6:	80 91 5c 01 	lds	r24, 0x015C
     6da:	22 24       	eor	r2, r2
     6dc:	33 24       	eor	r3, r3
     6de:	44 24       	eor	r4, r4
     6e0:	55 24       	eor	r5, r5
     6e2:	66 24       	eor	r6, r6
     6e4:	77 24       	eor	r7, r7
     6e6:	88 24       	eor	r8, r8
     6e8:	99 24       	eor	r9, r9
     6ea:	82 c0       	rjmp	.+260    	; 0x7f0 <uscanf+0x18e>
     6ec:	5f 9b       	sbis	0x0b, 7	; 11
     6ee:	fe cf       	rjmp	.-4      	; 0x6ec <uscanf+0x8a>
     6f0:	ac b1       	in	r26, 0x0c	; 12
	  str[x] = rxb();
     6f2:	8a 2f       	mov	r24, r26
     6f4:	99 27       	eor	r25, r25
     6f6:	f1 01       	movw	r30, r2
     6f8:	e3 5a       	subi	r30, 0xA3	; 163
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	80 83       	st	Z, r24
	  if(str[x] == '\r'){str[x] = 0;x = elements;}
     6fe:	8d 30       	cpi	r24, 0x0D	; 13
     700:	49 f4       	brne	.+18     	; 0x714 <uscanf+0xb2>
     702:	10 82       	st	Z, r1
     704:	2a 2c       	mov	r2, r10
     706:	3b 2c       	mov	r3, r11
     708:	4c 2c       	mov	r4, r12
     70a:	5d 2c       	mov	r5, r13
     70c:	6e 2c       	mov	r6, r14
     70e:	7f 2c       	mov	r7, r15
     710:	80 2e       	mov	r8, r16
     712:	91 2e       	mov	r9, r17
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	8a 83       	std	Y+2, r24	; 0x02
     718:	1b 82       	std	Y+3, r1	; 0x03
     71a:	1c 82       	std	Y+4, r1	; 0x04
     71c:	1d 82       	std	Y+5, r1	; 0x05
     71e:	1e 82       	std	Y+6, r1	; 0x06
     720:	1f 82       	std	Y+7, r1	; 0x07
     722:	18 86       	std	Y+8, r1	; 0x08
     724:	19 86       	std	Y+9, r1	; 0x09
     726:	01 e0       	ldi	r16, 0x01	; 1
     728:	02 0d       	add	r16, r2
     72a:	02 15       	cp	r16, r2
     72c:	08 f0       	brcs	.+2      	; 0x730 <uscanf+0xce>
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	1b 81       	ldd	r17, Y+3	; 0x03
     732:	13 0d       	add	r17, r3
     734:	b1 e0       	ldi	r27, 0x01	; 1
     736:	13 15       	cp	r17, r3
     738:	08 f0       	brcs	.+2      	; 0x73c <uscanf+0xda>
     73a:	b0 e0       	ldi	r27, 0x00	; 0
     73c:	81 0f       	add	r24, r17
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	81 17       	cp	r24, r17
     742:	08 f0       	brcs	.+2      	; 0x746 <uscanf+0xe4>
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	b9 2b       	or	r27, r25
     748:	18 2f       	mov	r17, r24
     74a:	2c 81       	ldd	r18, Y+4	; 0x04
     74c:	24 0d       	add	r18, r4
     74e:	61 e0       	ldi	r22, 0x01	; 1
     750:	f6 2e       	mov	r15, r22
     752:	24 15       	cp	r18, r4
     754:	08 f0       	brcs	.+2      	; 0x758 <uscanf+0xf6>
     756:	ff 24       	eor	r15, r15
     758:	8b 2f       	mov	r24, r27
     75a:	82 0f       	add	r24, r18
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	82 17       	cp	r24, r18
     760:	08 f0       	brcs	.+2      	; 0x764 <uscanf+0x102>
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	f9 2a       	or	r15, r25
     766:	28 2f       	mov	r18, r24
     768:	3d 81       	ldd	r19, Y+5	; 0x05
     76a:	35 0d       	add	r19, r5
     76c:	b1 e0       	ldi	r27, 0x01	; 1
     76e:	35 15       	cp	r19, r5
     770:	08 f0       	brcs	.+2      	; 0x774 <uscanf+0x112>
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	8f 2d       	mov	r24, r15
     776:	83 0f       	add	r24, r19
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	83 17       	cp	r24, r19
     77c:	08 f0       	brcs	.+2      	; 0x780 <uscanf+0x11e>
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	b9 2b       	or	r27, r25
     782:	38 2f       	mov	r19, r24
     784:	4e 81       	ldd	r20, Y+6	; 0x06
     786:	46 0d       	add	r20, r6
     788:	51 e0       	ldi	r21, 0x01	; 1
     78a:	f5 2e       	mov	r15, r21
     78c:	46 15       	cp	r20, r6
     78e:	08 f0       	brcs	.+2      	; 0x792 <uscanf+0x130>
     790:	ff 24       	eor	r15, r15
     792:	8b 2f       	mov	r24, r27
     794:	84 0f       	add	r24, r20
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	84 17       	cp	r24, r20
     79a:	08 f0       	brcs	.+2      	; 0x79e <uscanf+0x13c>
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	f9 2a       	or	r15, r25
     7a0:	48 2f       	mov	r20, r24
     7a2:	5f 81       	ldd	r21, Y+7	; 0x07
     7a4:	57 0d       	add	r21, r7
     7a6:	b1 e0       	ldi	r27, 0x01	; 1
     7a8:	57 15       	cp	r21, r7
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <uscanf+0x14c>
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	8f 2d       	mov	r24, r15
     7b0:	85 0f       	add	r24, r21
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	85 17       	cp	r24, r21
     7b6:	08 f0       	brcs	.+2      	; 0x7ba <uscanf+0x158>
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	b9 2b       	or	r27, r25
     7bc:	58 2f       	mov	r21, r24
     7be:	68 85       	ldd	r22, Y+8	; 0x08
     7c0:	68 0d       	add	r22, r8
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	68 15       	cp	r22, r8
     7c6:	08 f0       	brcs	.+2      	; 0x7ca <uscanf+0x168>
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	9b 2f       	mov	r25, r27
     7cc:	96 0f       	add	r25, r22
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	96 17       	cp	r25, r22
     7d2:	08 f0       	brcs	.+2      	; 0x7d6 <uscanf+0x174>
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	8f 2b       	or	r24, r31
     7d8:	79 85       	ldd	r23, Y+9	; 0x09
     7da:	79 0d       	add	r23, r9
     7dc:	87 0f       	add	r24, r23
     7de:	20 2e       	mov	r2, r16
     7e0:	31 2e       	mov	r3, r17
     7e2:	42 2e       	mov	r4, r18
     7e4:	53 2e       	mov	r5, r19
     7e6:	64 2e       	mov	r6, r20
     7e8:	75 2e       	mov	r7, r21
     7ea:	89 2e       	mov	r8, r25
     7ec:	98 2e       	mov	r9, r24
     7ee:	8a 2f       	mov	r24, r26
     7f0:	a9 80       	ldd	r10, Y+1	; 0x01
     7f2:	bb 24       	eor	r11, r11
     7f4:	cc 24       	eor	r12, r12
     7f6:	dd 24       	eor	r13, r13
     7f8:	ee 24       	eor	r14, r14
     7fa:	ff 24       	eor	r15, r15
     7fc:	00 e0       	ldi	r16, 0x00	; 0
     7fe:	10 e0       	ldi	r17, 0x00	; 0
     800:	91 16       	cp	r9, r17
     802:	08 f4       	brcc	.+2      	; 0x806 <uscanf+0x1a4>
     804:	73 cf       	rjmp	.-282    	; 0x6ec <uscanf+0x8a>
     806:	19 15       	cp	r17, r9
     808:	09 f0       	breq	.+2      	; 0x80c <uscanf+0x1aa>
     80a:	fd c0       	rjmp	.+506    	; 0xa06 <__stack+0x1a7>
     80c:	80 16       	cp	r8, r16
     80e:	08 f4       	brcc	.+2      	; 0x812 <uscanf+0x1b0>
     810:	6d cf       	rjmp	.-294    	; 0x6ec <uscanf+0x8a>
     812:	08 15       	cp	r16, r8
     814:	09 f0       	breq	.+2      	; 0x818 <uscanf+0x1b6>
     816:	f7 c0       	rjmp	.+494    	; 0xa06 <__stack+0x1a7>
     818:	7f 14       	cp	r7, r15
     81a:	08 f4       	brcc	.+2      	; 0x81e <uscanf+0x1bc>
     81c:	67 cf       	rjmp	.-306    	; 0x6ec <uscanf+0x8a>
     81e:	f7 14       	cp	r15, r7
     820:	09 f0       	breq	.+2      	; 0x824 <uscanf+0x1c2>
     822:	f1 c0       	rjmp	.+482    	; 0xa06 <__stack+0x1a7>
     824:	6e 14       	cp	r6, r14
     826:	08 f4       	brcc	.+2      	; 0x82a <uscanf+0x1c8>
     828:	61 cf       	rjmp	.-318    	; 0x6ec <uscanf+0x8a>
     82a:	e6 14       	cp	r14, r6
     82c:	09 f0       	breq	.+2      	; 0x830 <uscanf+0x1ce>
     82e:	eb c0       	rjmp	.+470    	; 0xa06 <__stack+0x1a7>
     830:	5d 14       	cp	r5, r13
     832:	08 f4       	brcc	.+2      	; 0x836 <uscanf+0x1d4>
     834:	5b cf       	rjmp	.-330    	; 0x6ec <uscanf+0x8a>
     836:	d5 14       	cp	r13, r5
     838:	09 f0       	breq	.+2      	; 0x83c <uscanf+0x1da>
     83a:	e5 c0       	rjmp	.+458    	; 0xa06 <__stack+0x1a7>
     83c:	4c 14       	cp	r4, r12
     83e:	08 f4       	brcc	.+2      	; 0x842 <uscanf+0x1e0>
     840:	55 cf       	rjmp	.-342    	; 0x6ec <uscanf+0x8a>
     842:	c4 14       	cp	r12, r4
     844:	09 f0       	breq	.+2      	; 0x848 <uscanf+0x1e6>
     846:	df c0       	rjmp	.+446    	; 0xa06 <__stack+0x1a7>
     848:	3b 14       	cp	r3, r11
     84a:	08 f4       	brcc	.+2      	; 0x84e <uscanf+0x1ec>
     84c:	4f cf       	rjmp	.-354    	; 0x6ec <uscanf+0x8a>
     84e:	b3 14       	cp	r11, r3
     850:	09 f0       	breq	.+2      	; 0x854 <uscanf+0x1f2>
     852:	d9 c0       	rjmp	.+434    	; 0xa06 <__stack+0x1a7>
     854:	2a 14       	cp	r2, r10
     856:	08 f4       	brcc	.+2      	; 0x85a <uscanf+0x1f8>
     858:	49 cf       	rjmp	.-366    	; 0x6ec <uscanf+0x8a>
     85a:	d5 c0       	rjmp	.+426    	; 0xa06 <__stack+0x1a7>
	}
	break;
   case OFF:
    for(x=0;x<elements;x++) {
     85c:	10 92 f7 00 	sts	0x00F7, r1
     860:	10 92 f8 00 	sts	0x00F8, r1
     864:	10 92 f9 00 	sts	0x00F9, r1
     868:	10 92 fa 00 	sts	0x00FA, r1
     86c:	10 92 fb 00 	sts	0x00FB, r1
     870:	10 92 fc 00 	sts	0x00FC, r1
     874:	10 92 fd 00 	sts	0x00FD, r1
     878:	10 92 fe 00 	sts	0x00FE, r1
     87c:	10 91 5c 01 	lds	r17, 0x015C
     880:	88 24       	eor	r8, r8
     882:	99 24       	eor	r9, r9
     884:	aa 24       	eor	r10, r10
     886:	bb 24       	eor	r11, r11
     888:	cc 24       	eor	r12, r12
     88a:	dd 24       	eor	r13, r13
     88c:	ee 24       	eor	r14, r14
     88e:	ff 24       	eor	r15, r15
     890:	ad e5       	ldi	r26, 0x5D	; 93
     892:	b1 e0       	ldi	r27, 0x01	; 1
     894:	77 c0       	rjmp	.+238    	; 0x984 <__stack+0x125>
     896:	5f 9b       	sbis	0x0b, 7	; 11
     898:	fe cf       	rjmp	.-4      	; 0x896 <__stack+0x37>
     89a:	7c b0       	in	r7, 0x0c	; 12
	  str[x] = rxb();
     89c:	7c 92       	st	X, r7
     89e:	e1 e0       	ldi	r30, 0x01	; 1
     8a0:	ea 87       	std	Y+10, r30	; 0x0a
     8a2:	1b 86       	std	Y+11, r1	; 0x0b
     8a4:	1c 86       	std	Y+12, r1	; 0x0c
     8a6:	1d 86       	std	Y+13, r1	; 0x0d
     8a8:	1e 86       	std	Y+14, r1	; 0x0e
     8aa:	1f 86       	std	Y+15, r1	; 0x0f
     8ac:	18 8a       	std	Y+16, r1	; 0x10
     8ae:	19 8a       	std	Y+17, r1	; 0x11
     8b0:	01 e0       	ldi	r16, 0x01	; 1
     8b2:	08 0d       	add	r16, r8
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	08 15       	cp	r16, r8
     8b8:	08 f0       	brcs	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	80 e0       	ldi	r24, 0x00	; 0
     8bc:	1b 85       	ldd	r17, Y+11	; 0x0b
     8be:	19 0d       	add	r17, r9
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	69 2e       	mov	r6, r25
     8c4:	19 15       	cp	r17, r9
     8c6:	08 f0       	brcs	.+2      	; 0x8ca <__stack+0x6b>
     8c8:	66 24       	eor	r6, r6
     8ca:	81 0f       	add	r24, r17
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	81 17       	cp	r24, r17
     8d0:	08 f0       	brcs	.+2      	; 0x8d4 <__stack+0x75>
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	69 2a       	or	r6, r25
     8d6:	18 2f       	mov	r17, r24
     8d8:	2c 85       	ldd	r18, Y+12	; 0x0c
     8da:	2a 0d       	add	r18, r10
     8dc:	f1 e0       	ldi	r31, 0x01	; 1
     8de:	5f 2e       	mov	r5, r31
     8e0:	2a 15       	cp	r18, r10
     8e2:	08 f0       	brcs	.+2      	; 0x8e6 <__stack+0x87>
     8e4:	55 24       	eor	r5, r5
     8e6:	86 2d       	mov	r24, r6
     8e8:	82 0f       	add	r24, r18
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	82 17       	cp	r24, r18
     8ee:	08 f0       	brcs	.+2      	; 0x8f2 <__stack+0x93>
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	59 2a       	or	r5, r25
     8f4:	28 2f       	mov	r18, r24
     8f6:	3d 85       	ldd	r19, Y+13	; 0x0d
     8f8:	3b 0d       	add	r19, r11
     8fa:	e1 e0       	ldi	r30, 0x01	; 1
     8fc:	6e 2e       	mov	r6, r30
     8fe:	3b 15       	cp	r19, r11
     900:	08 f0       	brcs	.+2      	; 0x904 <__stack+0xa5>
     902:	66 24       	eor	r6, r6
     904:	85 2d       	mov	r24, r5
     906:	83 0f       	add	r24, r19
     908:	91 e0       	ldi	r25, 0x01	; 1
     90a:	83 17       	cp	r24, r19
     90c:	08 f0       	brcs	.+2      	; 0x910 <__stack+0xb1>
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	69 2a       	or	r6, r25
     912:	38 2f       	mov	r19, r24
     914:	4e 85       	ldd	r20, Y+14	; 0x0e
     916:	4c 0d       	add	r20, r12
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	57 2e       	mov	r5, r23
     91c:	4c 15       	cp	r20, r12
     91e:	08 f0       	brcs	.+2      	; 0x922 <__stack+0xc3>
     920:	55 24       	eor	r5, r5
     922:	86 2d       	mov	r24, r6
     924:	84 0f       	add	r24, r20
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	84 17       	cp	r24, r20
     92a:	08 f0       	brcs	.+2      	; 0x92e <__stack+0xcf>
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	59 2a       	or	r5, r25
     930:	48 2f       	mov	r20, r24
     932:	5f 85       	ldd	r21, Y+15	; 0x0f
     934:	5d 0d       	add	r21, r13
     936:	61 e0       	ldi	r22, 0x01	; 1
     938:	66 2e       	mov	r6, r22
     93a:	5d 15       	cp	r21, r13
     93c:	08 f0       	brcs	.+2      	; 0x940 <__stack+0xe1>
     93e:	66 24       	eor	r6, r6
     940:	85 2d       	mov	r24, r5
     942:	85 0f       	add	r24, r21
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	85 17       	cp	r24, r21
     948:	08 f0       	brcs	.+2      	; 0x94c <__stack+0xed>
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	69 2a       	or	r6, r25
     94e:	58 2f       	mov	r21, r24
     950:	68 89       	ldd	r22, Y+16	; 0x10
     952:	6e 0d       	add	r22, r14
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	6e 15       	cp	r22, r14
     958:	08 f0       	brcs	.+2      	; 0x95c <__stack+0xfd>
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	96 2d       	mov	r25, r6
     95e:	96 0f       	add	r25, r22
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	96 17       	cp	r25, r22
     964:	08 f0       	brcs	.+2      	; 0x968 <__stack+0x109>
     966:	80 e0       	ldi	r24, 0x00	; 0
     968:	8f 2b       	or	r24, r31
     96a:	79 89       	ldd	r23, Y+17	; 0x11
     96c:	7f 0d       	add	r23, r15
     96e:	87 0f       	add	r24, r23
     970:	80 2e       	mov	r8, r16
     972:	91 2e       	mov	r9, r17
     974:	a2 2e       	mov	r10, r18
     976:	b3 2e       	mov	r11, r19
     978:	c4 2e       	mov	r12, r20
     97a:	d5 2e       	mov	r13, r21
     97c:	e9 2e       	mov	r14, r25
     97e:	f8 2e       	mov	r15, r24
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	17 2d       	mov	r17, r7
     984:	29 81       	ldd	r18, Y+1	; 0x01
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e0       	ldi	r20, 0x00	; 0
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	f9 16       	cp	r15, r25
     996:	08 f4       	brcc	.+2      	; 0x99a <__stack+0x13b>
     998:	7e cf       	rjmp	.-260    	; 0x896 <__stack+0x37>
     99a:	9f 15       	cp	r25, r15
     99c:	09 f5       	brne	.+66     	; 0x9e0 <__stack+0x181>
     99e:	e8 16       	cp	r14, r24
     9a0:	08 f4       	brcc	.+2      	; 0x9a4 <__stack+0x145>
     9a2:	79 cf       	rjmp	.-270    	; 0x896 <__stack+0x37>
     9a4:	8e 15       	cp	r24, r14
     9a6:	e1 f4       	brne	.+56     	; 0x9e0 <__stack+0x181>
     9a8:	d7 16       	cp	r13, r23
     9aa:	08 f4       	brcc	.+2      	; 0x9ae <__stack+0x14f>
     9ac:	74 cf       	rjmp	.-280    	; 0x896 <__stack+0x37>
     9ae:	7d 15       	cp	r23, r13
     9b0:	b9 f4       	brne	.+46     	; 0x9e0 <__stack+0x181>
     9b2:	c6 16       	cp	r12, r22
     9b4:	08 f4       	brcc	.+2      	; 0x9b8 <__stack+0x159>
     9b6:	6f cf       	rjmp	.-290    	; 0x896 <__stack+0x37>
     9b8:	6c 15       	cp	r22, r12
     9ba:	91 f4       	brne	.+36     	; 0x9e0 <__stack+0x181>
     9bc:	b5 16       	cp	r11, r21
     9be:	08 f4       	brcc	.+2      	; 0x9c2 <__stack+0x163>
     9c0:	6a cf       	rjmp	.-300    	; 0x896 <__stack+0x37>
     9c2:	5b 15       	cp	r21, r11
     9c4:	69 f4       	brne	.+26     	; 0x9e0 <__stack+0x181>
     9c6:	a4 16       	cp	r10, r20
     9c8:	08 f4       	brcc	.+2      	; 0x9cc <__stack+0x16d>
     9ca:	65 cf       	rjmp	.-310    	; 0x896 <__stack+0x37>
     9cc:	4a 15       	cp	r20, r10
     9ce:	41 f4       	brne	.+16     	; 0x9e0 <__stack+0x181>
     9d0:	93 16       	cp	r9, r19
     9d2:	08 f4       	brcc	.+2      	; 0x9d6 <__stack+0x177>
     9d4:	60 cf       	rjmp	.-320    	; 0x896 <__stack+0x37>
     9d6:	39 15       	cp	r19, r9
     9d8:	19 f4       	brne	.+6      	; 0x9e0 <__stack+0x181>
     9da:	82 16       	cp	r8, r18
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <__stack+0x181>
     9de:	5b cf       	rjmp	.-330    	; 0x896 <__stack+0x37>
     9e0:	10 93 5c 01 	sts	0x015C, r17
     9e4:	80 92 f7 00 	sts	0x00F7, r8
     9e8:	90 92 f8 00 	sts	0x00F8, r9
     9ec:	a0 92 f9 00 	sts	0x00F9, r10
     9f0:	b0 92 fa 00 	sts	0x00FA, r11
     9f4:	c0 92 fb 00 	sts	0x00FB, r12
     9f8:	d0 92 fc 00 	sts	0x00FC, r13
     9fc:	e0 92 fd 00 	sts	0x00FD, r14
     a00:	f0 92 fe 00 	sts	0x00FE, r15
     a04:	12 c0       	rjmp	.+36     	; 0xa2a <__stack+0x1cb>
     a06:	80 93 5c 01 	sts	0x015C, r24
     a0a:	20 92 f7 00 	sts	0x00F7, r2
     a0e:	30 92 f8 00 	sts	0x00F8, r3
     a12:	40 92 f9 00 	sts	0x00F9, r4
     a16:	50 92 fa 00 	sts	0x00FA, r5
     a1a:	60 92 fb 00 	sts	0x00FB, r6
     a1e:	70 92 fc 00 	sts	0x00FC, r7
     a22:	80 92 fd 00 	sts	0x00FD, r8
     a26:	90 92 fe 00 	sts	0x00FE, r9
	}
	break;
  }
  strcpy(retstr,str);
     a2a:	6d e5       	ldi	r22, 0x5D	; 93
     a2c:	71 e0       	ldi	r23, 0x01	; 1
     a2e:	8a 89       	ldd	r24, Y+18	; 0x12
     a30:	9b 89       	ldd	r25, Y+19	; 0x13
     a32:	0e 94 a0 0c 	call	0x1940	; 0x1940 <strcpy>
  return str;
}     a36:	8d e5       	ldi	r24, 0x5D	; 93
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	63 96       	adiw	r28, 0x13	; 19
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
     a46:	df 91       	pop	r29
     a48:	cf 91       	pop	r28
     a4a:	1f 91       	pop	r17
     a4c:	0f 91       	pop	r16
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	7f 90       	pop	r7
     a60:	6f 90       	pop	r6
     a62:	5f 90       	pop	r5
     a64:	4f 90       	pop	r4
     a66:	3f 90       	pop	r3
     a68:	2f 90       	pop	r2
     a6a:	08 95       	ret

00000a6c <uprintf>:
     a6c:	6f 92       	push	r6
     a6e:	7f 92       	push	r7
     a70:	8f 92       	push	r8
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
     a8c:	28 97       	sbiw	r28, 0x08	; 8
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	dc 01       	movw	r26, r24
     a9a:	10 92 f7 00 	sts	0x00F7, r1
     a9e:	10 92 f8 00 	sts	0x00F8, r1
     aa2:	10 92 f9 00 	sts	0x00F9, r1
     aa6:	10 92 fa 00 	sts	0x00FA, r1
     aaa:	10 92 fb 00 	sts	0x00FB, r1
     aae:	10 92 fc 00 	sts	0x00FC, r1
     ab2:	10 92 fd 00 	sts	0x00FD, r1
     ab6:	10 92 fe 00 	sts	0x00FE, r1
     aba:	7f c0       	rjmp	.+254    	; 0xbba <uprintf+0x14e>
     abc:	fd 01       	movw	r30, r26
     abe:	e8 0d       	add	r30, r8
     ac0:	f9 1d       	adc	r31, r9
     ac2:	e0 81       	ld	r30, Z
     ac4:	5d 9b       	sbis	0x0b, 5	; 11
     ac6:	fe cf       	rjmp	.-4      	; 0xac4 <uprintf+0x58>
     ac8:	ec b9       	out	0x0c, r30	; 12
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	1b 82       	std	Y+3, r1	; 0x03
     ad2:	1c 82       	std	Y+4, r1	; 0x04
     ad4:	1d 82       	std	Y+5, r1	; 0x05
     ad6:	1e 82       	std	Y+6, r1	; 0x06
     ad8:	1f 82       	std	Y+7, r1	; 0x07
     ada:	18 86       	std	Y+8, r1	; 0x08
     adc:	01 e0       	ldi	r16, 0x01	; 1
     ade:	08 0d       	add	r16, r8
     ae0:	08 15       	cp	r16, r8
     ae2:	08 f0       	brcs	.+2      	; 0xae6 <uprintf+0x7a>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	1a 81       	ldd	r17, Y+2	; 0x02
     ae8:	19 0d       	add	r17, r9
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	79 2e       	mov	r7, r25
     aee:	19 15       	cp	r17, r9
     af0:	08 f0       	brcs	.+2      	; 0xaf4 <uprintf+0x88>
     af2:	77 24       	eor	r7, r7
     af4:	81 0f       	add	r24, r17
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	81 17       	cp	r24, r17
     afa:	08 f0       	brcs	.+2      	; 0xafe <uprintf+0x92>
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	79 2a       	or	r7, r25
     b00:	18 2f       	mov	r17, r24
     b02:	2b 81       	ldd	r18, Y+3	; 0x03
     b04:	2a 0d       	add	r18, r10
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	68 2e       	mov	r6, r24
     b0a:	2a 15       	cp	r18, r10
     b0c:	08 f0       	brcs	.+2      	; 0xb10 <uprintf+0xa4>
     b0e:	66 24       	eor	r6, r6
     b10:	87 2d       	mov	r24, r7
     b12:	82 0f       	add	r24, r18
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	82 17       	cp	r24, r18
     b18:	08 f0       	brcs	.+2      	; 0xb1c <uprintf+0xb0>
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	69 2a       	or	r6, r25
     b1e:	28 2f       	mov	r18, r24
     b20:	3c 81       	ldd	r19, Y+4	; 0x04
     b22:	3b 0d       	add	r19, r11
     b24:	f1 e0       	ldi	r31, 0x01	; 1
     b26:	7f 2e       	mov	r7, r31
     b28:	3b 15       	cp	r19, r11
     b2a:	08 f0       	brcs	.+2      	; 0xb2e <uprintf+0xc2>
     b2c:	77 24       	eor	r7, r7
     b2e:	86 2d       	mov	r24, r6
     b30:	83 0f       	add	r24, r19
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	83 17       	cp	r24, r19
     b36:	08 f0       	brcs	.+2      	; 0xb3a <uprintf+0xce>
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	79 2a       	or	r7, r25
     b3c:	38 2f       	mov	r19, r24
     b3e:	4d 81       	ldd	r20, Y+5	; 0x05
     b40:	4c 0d       	add	r20, r12
     b42:	e1 e0       	ldi	r30, 0x01	; 1
     b44:	6e 2e       	mov	r6, r30
     b46:	4c 15       	cp	r20, r12
     b48:	08 f0       	brcs	.+2      	; 0xb4c <uprintf+0xe0>
     b4a:	66 24       	eor	r6, r6
     b4c:	87 2d       	mov	r24, r7
     b4e:	84 0f       	add	r24, r20
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	84 17       	cp	r24, r20
     b54:	08 f0       	brcs	.+2      	; 0xb58 <uprintf+0xec>
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	69 2a       	or	r6, r25
     b5a:	48 2f       	mov	r20, r24
     b5c:	5e 81       	ldd	r21, Y+6	; 0x06
     b5e:	5d 0d       	add	r21, r13
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	77 2e       	mov	r7, r23
     b64:	5d 15       	cp	r21, r13
     b66:	08 f0       	brcs	.+2      	; 0xb6a <uprintf+0xfe>
     b68:	77 24       	eor	r7, r7
     b6a:	86 2d       	mov	r24, r6
     b6c:	85 0f       	add	r24, r21
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	85 17       	cp	r24, r21
     b72:	08 f0       	brcs	.+2      	; 0xb76 <uprintf+0x10a>
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	79 2a       	or	r7, r25
     b78:	58 2f       	mov	r21, r24
     b7a:	6f 81       	ldd	r22, Y+7	; 0x07
     b7c:	6e 0d       	add	r22, r14
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	6e 15       	cp	r22, r14
     b82:	08 f0       	brcs	.+2      	; 0xb86 <uprintf+0x11a>
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	97 2d       	mov	r25, r7
     b88:	96 0f       	add	r25, r22
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	96 17       	cp	r25, r22
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <uprintf+0x126>
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	8f 2b       	or	r24, r31
     b94:	78 85       	ldd	r23, Y+8	; 0x08
     b96:	7f 0d       	add	r23, r15
     b98:	87 0f       	add	r24, r23
     b9a:	00 93 f7 00 	sts	0x00F7, r16
     b9e:	10 93 f8 00 	sts	0x00F8, r17
     ba2:	20 93 f9 00 	sts	0x00F9, r18
     ba6:	30 93 fa 00 	sts	0x00FA, r19
     baa:	40 93 fb 00 	sts	0x00FB, r20
     bae:	50 93 fc 00 	sts	0x00FC, r21
     bb2:	90 93 fd 00 	sts	0x00FD, r25
     bb6:	80 93 fe 00 	sts	0x00FE, r24
     bba:	80 90 f7 00 	lds	r8, 0x00F7
     bbe:	90 90 f8 00 	lds	r9, 0x00F8
     bc2:	a0 90 f9 00 	lds	r10, 0x00F9
     bc6:	b0 90 fa 00 	lds	r11, 0x00FA
     bca:	c0 90 fb 00 	lds	r12, 0x00FB
     bce:	d0 90 fc 00 	lds	r13, 0x00FC
     bd2:	e0 90 fd 00 	lds	r14, 0x00FD
     bd6:	f0 90 fe 00 	lds	r15, 0x00FE
     bda:	fd 01       	movw	r30, r26
     bdc:	01 90       	ld	r0, Z+
     bde:	00 20       	and	r0, r0
     be0:	e9 f7       	brne	.-6      	; 0xbdc <uprintf+0x170>
     be2:	31 97       	sbiw	r30, 0x01	; 1
     be4:	ea 1b       	sub	r30, r26
     be6:	fb 0b       	sbc	r31, r27
     be8:	9f 01       	movw	r18, r30
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	f9 16       	cp	r15, r25
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <uprintf+0x190>
     bfa:	60 cf       	rjmp	.-320    	; 0xabc <uprintf+0x50>
     bfc:	9f 15       	cp	r25, r15
     bfe:	09 f5       	brne	.+66     	; 0xc42 <uprintf+0x1d6>
     c00:	e8 16       	cp	r14, r24
     c02:	08 f4       	brcc	.+2      	; 0xc06 <uprintf+0x19a>
     c04:	5b cf       	rjmp	.-330    	; 0xabc <uprintf+0x50>
     c06:	8e 15       	cp	r24, r14
     c08:	e1 f4       	brne	.+56     	; 0xc42 <uprintf+0x1d6>
     c0a:	d7 16       	cp	r13, r23
     c0c:	08 f4       	brcc	.+2      	; 0xc10 <uprintf+0x1a4>
     c0e:	56 cf       	rjmp	.-340    	; 0xabc <uprintf+0x50>
     c10:	7d 15       	cp	r23, r13
     c12:	b9 f4       	brne	.+46     	; 0xc42 <uprintf+0x1d6>
     c14:	c6 16       	cp	r12, r22
     c16:	08 f4       	brcc	.+2      	; 0xc1a <uprintf+0x1ae>
     c18:	51 cf       	rjmp	.-350    	; 0xabc <uprintf+0x50>
     c1a:	6c 15       	cp	r22, r12
     c1c:	91 f4       	brne	.+36     	; 0xc42 <uprintf+0x1d6>
     c1e:	b5 16       	cp	r11, r21
     c20:	08 f4       	brcc	.+2      	; 0xc24 <uprintf+0x1b8>
     c22:	4c cf       	rjmp	.-360    	; 0xabc <uprintf+0x50>
     c24:	5b 15       	cp	r21, r11
     c26:	69 f4       	brne	.+26     	; 0xc42 <uprintf+0x1d6>
     c28:	a4 16       	cp	r10, r20
     c2a:	08 f4       	brcc	.+2      	; 0xc2e <uprintf+0x1c2>
     c2c:	47 cf       	rjmp	.-370    	; 0xabc <uprintf+0x50>
     c2e:	4a 15       	cp	r20, r10
     c30:	41 f4       	brne	.+16     	; 0xc42 <uprintf+0x1d6>
     c32:	93 16       	cp	r9, r19
     c34:	08 f4       	brcc	.+2      	; 0xc38 <uprintf+0x1cc>
     c36:	42 cf       	rjmp	.-380    	; 0xabc <uprintf+0x50>
     c38:	39 15       	cp	r19, r9
     c3a:	19 f4       	brne	.+6      	; 0xc42 <uprintf+0x1d6>
     c3c:	8e 16       	cp	r8, r30
     c3e:	08 f4       	brcc	.+2      	; 0xc42 <uprintf+0x1d6>
     c40:	3d cf       	rjmp	.-390    	; 0xabc <uprintf+0x50>
     c42:	28 96       	adiw	r28, 0x08	; 8
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	1f 91       	pop	r17
     c54:	0f 91       	pop	r16
     c56:	ff 90       	pop	r15
     c58:	ef 90       	pop	r14
     c5a:	df 90       	pop	r13
     c5c:	cf 90       	pop	r12
     c5e:	bf 90       	pop	r11
     c60:	af 90       	pop	r10
     c62:	9f 90       	pop	r9
     c64:	8f 90       	pop	r8
     c66:	7f 90       	pop	r7
     c68:	6f 90       	pop	r6
     c6a:	08 95       	ret

00000c6c <initENC>:
#include <stdint.h>
#include <avr/io.h>
#include <avr/interrupt.h>

void initENC (void) {
     c6c:	10 92 3b 01 	sts	0x013B, r1
     c70:	10 92 8f 01 	sts	0x018F, r1
     c74:	10 92 31 01 	sts	0x0131, r1
     c78:	10 92 32 01 	sts	0x0132, r1
     c7c:	10 92 33 01 	sts	0x0133, r1
     c80:	10 92 34 01 	sts	0x0134, r1
     c84:	10 92 35 01 	sts	0x0135, r1
     c88:	10 92 36 01 	sts	0x0136, r1
     c8c:	10 92 37 01 	sts	0x0137, r1
     c90:	10 92 38 01 	sts	0x0138, r1
     c94:	10 92 50 01 	sts	0x0150, r1
     c98:	10 92 51 01 	sts	0x0151, r1
     c9c:	10 92 52 01 	sts	0x0152, r1
     ca0:	10 92 53 01 	sts	0x0153, r1
     ca4:	10 92 54 01 	sts	0x0154, r1
     ca8:	10 92 55 01 	sts	0x0155, r1
     cac:	10 92 56 01 	sts	0x0156, r1
     cb0:	10 92 57 01 	sts	0x0157, r1
  cntL = cntR = dirL = dirR = 0;
  MCUCR = MCUCR + (1 << ISC10) | (1 << ISC00);
     cb4:	85 b7       	in	r24, 0x35	; 53
     cb6:	8c 5f       	subi	r24, 0xFC	; 252
     cb8:	81 60       	ori	r24, 0x01	; 1
     cba:	85 bf       	out	0x35, r24	; 53
  GICR = GICR + (1 << INT0) | (1 << INT1);
     cbc:	8b b7       	in	r24, 0x3b	; 59
     cbe:	80 5c       	subi	r24, 0xC0	; 192
     cc0:	80 68       	ori	r24, 0x80	; 128
     cc2:	8b bf       	out	0x3b, r24	; 59
  sei();
     cc4:	78 94       	sei
     cc6:	08 95       	ret

00000cc8 <setDirL>:
}

void setDirL (int8_t mode) {
     cc8:	80 93 8f 01 	sts	0x018F, r24
     ccc:	08 95       	ret

00000cce <setDirR>:
  dirL = mode;
}

void setDirR (int8_t mode) {
     cce:	80 93 3b 01 	sts	0x013B, r24
     cd2:	08 95       	ret

00000cd4 <getDisL>:
  dirR = mode;
}

int64_t getDisL (void) {
     cd4:	2f 92       	push	r2
     cd6:	3f 92       	push	r3
     cd8:	4f 92       	push	r4
     cda:	5f 92       	push	r5
     cdc:	6f 92       	push	r6
     cde:	7f 92       	push	r7
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	20 90 50 01 	lds	r2, 0x0150
     cf8:	30 90 51 01 	lds	r3, 0x0151
     cfc:	40 90 52 01 	lds	r4, 0x0152
     d00:	50 90 53 01 	lds	r5, 0x0153
     d04:	60 90 54 01 	lds	r6, 0x0154
     d08:	70 90 55 01 	lds	r7, 0x0155
     d0c:	80 90 56 01 	lds	r8, 0x0156
     d10:	90 90 57 01 	lds	r9, 0x0157
  return cntL;
}
     d14:	22 2d       	mov	r18, r2
     d16:	33 2d       	mov	r19, r3
     d18:	44 2d       	mov	r20, r4
     d1a:	55 2d       	mov	r21, r5
     d1c:	66 2d       	mov	r22, r6
     d1e:	77 2d       	mov	r23, r7
     d20:	88 2d       	mov	r24, r8
     d22:	99 2d       	mov	r25, r9
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	df 90       	pop	r13
     d2e:	cf 90       	pop	r12
     d30:	bf 90       	pop	r11
     d32:	af 90       	pop	r10
     d34:	9f 90       	pop	r9
     d36:	8f 90       	pop	r8
     d38:	7f 90       	pop	r7
     d3a:	6f 90       	pop	r6
     d3c:	5f 90       	pop	r5
     d3e:	4f 90       	pop	r4
     d40:	3f 90       	pop	r3
     d42:	2f 90       	pop	r2
     d44:	08 95       	ret

00000d46 <getDisR>:

int64_t getDisR (void) {
     d46:	2f 92       	push	r2
     d48:	3f 92       	push	r3
     d4a:	4f 92       	push	r4
     d4c:	5f 92       	push	r5
     d4e:	6f 92       	push	r6
     d50:	7f 92       	push	r7
     d52:	8f 92       	push	r8
     d54:	9f 92       	push	r9
     d56:	af 92       	push	r10
     d58:	bf 92       	push	r11
     d5a:	cf 92       	push	r12
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	20 90 31 01 	lds	r2, 0x0131
     d6a:	30 90 32 01 	lds	r3, 0x0132
     d6e:	40 90 33 01 	lds	r4, 0x0133
     d72:	50 90 34 01 	lds	r5, 0x0134
     d76:	60 90 35 01 	lds	r6, 0x0135
     d7a:	70 90 36 01 	lds	r7, 0x0136
     d7e:	80 90 37 01 	lds	r8, 0x0137
     d82:	90 90 38 01 	lds	r9, 0x0138
  return cntR;
}
     d86:	22 2d       	mov	r18, r2
     d88:	33 2d       	mov	r19, r3
     d8a:	44 2d       	mov	r20, r4
     d8c:	55 2d       	mov	r21, r5
     d8e:	66 2d       	mov	r22, r6
     d90:	77 2d       	mov	r23, r7
     d92:	88 2d       	mov	r24, r8
     d94:	99 2d       	mov	r25, r9
     d96:	1f 91       	pop	r17
     d98:	0f 91       	pop	r16
     d9a:	ff 90       	pop	r15
     d9c:	ef 90       	pop	r14
     d9e:	df 90       	pop	r13
     da0:	cf 90       	pop	r12
     da2:	bf 90       	pop	r11
     da4:	af 90       	pop	r10
     da6:	9f 90       	pop	r9
     da8:	8f 90       	pop	r8
     daa:	7f 90       	pop	r7
     dac:	6f 90       	pop	r6
     dae:	5f 90       	pop	r5
     db0:	4f 90       	pop	r4
     db2:	3f 90       	pop	r3
     db4:	2f 90       	pop	r2
     db6:	08 95       	ret

00000db8 <__vector_1>:

SIGNAL (SIG_INTERRUPT0) {
     db8:	1f 92       	push	r1
     dba:	0f 92       	push	r0
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	0f 92       	push	r0
     dc0:	11 24       	eor	r1, r1
     dc2:	8f 92       	push	r8
     dc4:	9f 92       	push	r9
     dc6:	af 92       	push	r10
     dc8:	bf 92       	push	r11
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	28 97       	sbiw	r28, 0x08	; 8
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	cd bf       	out	0x3d, r28	; 61
  cntL = cntL + dirL;
     dfc:	90 91 8f 01 	lds	r25, 0x018F
     e00:	89 2f       	mov	r24, r25
     e02:	88 0f       	add	r24, r24
     e04:	88 0b       	sbc	r24, r24
     e06:	99 83       	std	Y+1, r25	; 0x01
     e08:	8a 83       	std	Y+2, r24	; 0x02
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	8c 83       	std	Y+4, r24	; 0x04
     e0e:	8d 83       	std	Y+5, r24	; 0x05
     e10:	8e 83       	std	Y+6, r24	; 0x06
     e12:	8f 83       	std	Y+7, r24	; 0x07
     e14:	88 87       	std	Y+8, r24	; 0x08
     e16:	80 90 50 01 	lds	r8, 0x0150
     e1a:	90 90 51 01 	lds	r9, 0x0151
     e1e:	a0 90 52 01 	lds	r10, 0x0152
     e22:	b0 90 53 01 	lds	r11, 0x0153
     e26:	c0 90 54 01 	lds	r12, 0x0154
     e2a:	d0 90 55 01 	lds	r13, 0x0155
     e2e:	e0 90 56 01 	lds	r14, 0x0156
     e32:	f0 90 57 01 	lds	r15, 0x0157
     e36:	09 2f       	mov	r16, r25
     e38:	08 0d       	add	r16, r8
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	08 15       	cp	r16, r8
     e3e:	08 f0       	brcs	.+2      	; 0xe42 <__vector_1+0x8a>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	1a 81       	ldd	r17, Y+2	; 0x02
     e44:	19 0d       	add	r17, r9
     e46:	a1 e0       	ldi	r26, 0x01	; 1
     e48:	19 15       	cp	r17, r9
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <__vector_1+0x96>
     e4c:	a0 e0       	ldi	r26, 0x00	; 0
     e4e:	81 0f       	add	r24, r17
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	81 17       	cp	r24, r17
     e54:	08 f0       	brcs	.+2      	; 0xe58 <__vector_1+0xa0>
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a9 2b       	or	r26, r25
     e5a:	18 2f       	mov	r17, r24
     e5c:	2b 81       	ldd	r18, Y+3	; 0x03
     e5e:	2a 0d       	add	r18, r10
     e60:	b1 e0       	ldi	r27, 0x01	; 1
     e62:	2a 15       	cp	r18, r10
     e64:	08 f0       	brcs	.+2      	; 0xe68 <__vector_1+0xb0>
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	8a 2f       	mov	r24, r26
     e6a:	82 0f       	add	r24, r18
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	82 17       	cp	r24, r18
     e70:	08 f0       	brcs	.+2      	; 0xe74 <__vector_1+0xbc>
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	b9 2b       	or	r27, r25
     e76:	28 2f       	mov	r18, r24
     e78:	3c 81       	ldd	r19, Y+4	; 0x04
     e7a:	3b 0d       	add	r19, r11
     e7c:	a1 e0       	ldi	r26, 0x01	; 1
     e7e:	3b 15       	cp	r19, r11
     e80:	08 f0       	brcs	.+2      	; 0xe84 <__vector_1+0xcc>
     e82:	a0 e0       	ldi	r26, 0x00	; 0
     e84:	8b 2f       	mov	r24, r27
     e86:	83 0f       	add	r24, r19
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	83 17       	cp	r24, r19
     e8c:	08 f0       	brcs	.+2      	; 0xe90 <__vector_1+0xd8>
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a9 2b       	or	r26, r25
     e92:	38 2f       	mov	r19, r24
     e94:	4d 81       	ldd	r20, Y+5	; 0x05
     e96:	4c 0d       	add	r20, r12
     e98:	b1 e0       	ldi	r27, 0x01	; 1
     e9a:	4c 15       	cp	r20, r12
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <__vector_1+0xe8>
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	8a 2f       	mov	r24, r26
     ea2:	84 0f       	add	r24, r20
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	84 17       	cp	r24, r20
     ea8:	08 f0       	brcs	.+2      	; 0xeac <__vector_1+0xf4>
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	b9 2b       	or	r27, r25
     eae:	48 2f       	mov	r20, r24
     eb0:	5e 81       	ldd	r21, Y+6	; 0x06
     eb2:	5d 0d       	add	r21, r13
     eb4:	a1 e0       	ldi	r26, 0x01	; 1
     eb6:	5d 15       	cp	r21, r13
     eb8:	08 f0       	brcs	.+2      	; 0xebc <__vector_1+0x104>
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	8b 2f       	mov	r24, r27
     ebe:	85 0f       	add	r24, r21
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	85 17       	cp	r24, r21
     ec4:	08 f0       	brcs	.+2      	; 0xec8 <__vector_1+0x110>
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	a9 2b       	or	r26, r25
     eca:	58 2f       	mov	r21, r24
     ecc:	6f 81       	ldd	r22, Y+7	; 0x07
     ece:	6e 0d       	add	r22, r14
     ed0:	f1 e0       	ldi	r31, 0x01	; 1
     ed2:	6e 15       	cp	r22, r14
     ed4:	08 f0       	brcs	.+2      	; 0xed8 <__vector_1+0x120>
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	9a 2f       	mov	r25, r26
     eda:	96 0f       	add	r25, r22
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	96 17       	cp	r25, r22
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <__vector_1+0x12c>
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	8f 2b       	or	r24, r31
     ee6:	78 85       	ldd	r23, Y+8	; 0x08
     ee8:	7f 0d       	add	r23, r15
     eea:	87 0f       	add	r24, r23
     eec:	00 93 50 01 	sts	0x0150, r16
     ef0:	10 93 51 01 	sts	0x0151, r17
     ef4:	20 93 52 01 	sts	0x0152, r18
     ef8:	30 93 53 01 	sts	0x0153, r19
     efc:	40 93 54 01 	sts	0x0154, r20
     f00:	50 93 55 01 	sts	0x0155, r21
     f04:	90 93 56 01 	sts	0x0156, r25
     f08:	80 93 57 01 	sts	0x0157, r24
     f0c:	28 96       	adiw	r28, 0x08	; 8
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	cd bf       	out	0x3d, r28	; 61
     f14:	df 91       	pop	r29
     f16:	cf 91       	pop	r28
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	0f 90       	pop	r0
     f46:	0f be       	out	0x3f, r0	; 63
     f48:	0f 90       	pop	r0
     f4a:	1f 90       	pop	r1
     f4c:	18 95       	reti

00000f4e <__vector_2>:
}

SIGNAL (SIG_INTERRUPT1) {
     f4e:	1f 92       	push	r1
     f50:	0f 92       	push	r0
     f52:	0f b6       	in	r0, 0x3f	; 63
     f54:	0f 92       	push	r0
     f56:	11 24       	eor	r1, r1
     f58:	8f 92       	push	r8
     f5a:	9f 92       	push	r9
     f5c:	af 92       	push	r10
     f5e:	bf 92       	push	r11
     f60:	cf 92       	push	r12
     f62:	df 92       	push	r13
     f64:	ef 92       	push	r14
     f66:	ff 92       	push	r15
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	2f 93       	push	r18
     f6e:	3f 93       	push	r19
     f70:	4f 93       	push	r20
     f72:	5f 93       	push	r21
     f74:	6f 93       	push	r22
     f76:	7f 93       	push	r23
     f78:	8f 93       	push	r24
     f7a:	9f 93       	push	r25
     f7c:	af 93       	push	r26
     f7e:	bf 93       	push	r27
     f80:	ef 93       	push	r30
     f82:	ff 93       	push	r31
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	28 97       	sbiw	r28, 0x08	; 8
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	cd bf       	out	0x3d, r28	; 61
  cntR = cntR + dirR;
     f92:	90 91 3b 01 	lds	r25, 0x013B
     f96:	89 2f       	mov	r24, r25
     f98:	88 0f       	add	r24, r24
     f9a:	88 0b       	sbc	r24, r24
     f9c:	99 83       	std	Y+1, r25	; 0x01
     f9e:	8a 83       	std	Y+2, r24	; 0x02
     fa0:	8b 83       	std	Y+3, r24	; 0x03
     fa2:	8c 83       	std	Y+4, r24	; 0x04
     fa4:	8d 83       	std	Y+5, r24	; 0x05
     fa6:	8e 83       	std	Y+6, r24	; 0x06
     fa8:	8f 83       	std	Y+7, r24	; 0x07
     faa:	88 87       	std	Y+8, r24	; 0x08
     fac:	80 90 31 01 	lds	r8, 0x0131
     fb0:	90 90 32 01 	lds	r9, 0x0132
     fb4:	a0 90 33 01 	lds	r10, 0x0133
     fb8:	b0 90 34 01 	lds	r11, 0x0134
     fbc:	c0 90 35 01 	lds	r12, 0x0135
     fc0:	d0 90 36 01 	lds	r13, 0x0136
     fc4:	e0 90 37 01 	lds	r14, 0x0137
     fc8:	f0 90 38 01 	lds	r15, 0x0138
     fcc:	09 2f       	mov	r16, r25
     fce:	08 0d       	add	r16, r8
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	08 15       	cp	r16, r8
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <__vector_2+0x8a>
     fd6:	80 e0       	ldi	r24, 0x00	; 0
     fd8:	1a 81       	ldd	r17, Y+2	; 0x02
     fda:	19 0d       	add	r17, r9
     fdc:	a1 e0       	ldi	r26, 0x01	; 1
     fde:	19 15       	cp	r17, r9
     fe0:	08 f0       	brcs	.+2      	; 0xfe4 <__vector_2+0x96>
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	81 0f       	add	r24, r17
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	81 17       	cp	r24, r17
     fea:	08 f0       	brcs	.+2      	; 0xfee <__vector_2+0xa0>
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a9 2b       	or	r26, r25
     ff0:	18 2f       	mov	r17, r24
     ff2:	2b 81       	ldd	r18, Y+3	; 0x03
     ff4:	2a 0d       	add	r18, r10
     ff6:	b1 e0       	ldi	r27, 0x01	; 1
     ff8:	2a 15       	cp	r18, r10
     ffa:	08 f0       	brcs	.+2      	; 0xffe <__vector_2+0xb0>
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	8a 2f       	mov	r24, r26
    1000:	82 0f       	add	r24, r18
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	82 17       	cp	r24, r18
    1006:	08 f0       	brcs	.+2      	; 0x100a <__vector_2+0xbc>
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	b9 2b       	or	r27, r25
    100c:	28 2f       	mov	r18, r24
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	3b 0d       	add	r19, r11
    1012:	a1 e0       	ldi	r26, 0x01	; 1
    1014:	3b 15       	cp	r19, r11
    1016:	08 f0       	brcs	.+2      	; 0x101a <__vector_2+0xcc>
    1018:	a0 e0       	ldi	r26, 0x00	; 0
    101a:	8b 2f       	mov	r24, r27
    101c:	83 0f       	add	r24, r19
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	83 17       	cp	r24, r19
    1022:	08 f0       	brcs	.+2      	; 0x1026 <__vector_2+0xd8>
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	a9 2b       	or	r26, r25
    1028:	38 2f       	mov	r19, r24
    102a:	4d 81       	ldd	r20, Y+5	; 0x05
    102c:	4c 0d       	add	r20, r12
    102e:	b1 e0       	ldi	r27, 0x01	; 1
    1030:	4c 15       	cp	r20, r12
    1032:	08 f0       	brcs	.+2      	; 0x1036 <__vector_2+0xe8>
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	8a 2f       	mov	r24, r26
    1038:	84 0f       	add	r24, r20
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	84 17       	cp	r24, r20
    103e:	08 f0       	brcs	.+2      	; 0x1042 <__vector_2+0xf4>
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	b9 2b       	or	r27, r25
    1044:	48 2f       	mov	r20, r24
    1046:	5e 81       	ldd	r21, Y+6	; 0x06
    1048:	5d 0d       	add	r21, r13
    104a:	a1 e0       	ldi	r26, 0x01	; 1
    104c:	5d 15       	cp	r21, r13
    104e:	08 f0       	brcs	.+2      	; 0x1052 <__vector_2+0x104>
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	8b 2f       	mov	r24, r27
    1054:	85 0f       	add	r24, r21
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	85 17       	cp	r24, r21
    105a:	08 f0       	brcs	.+2      	; 0x105e <__vector_2+0x110>
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	a9 2b       	or	r26, r25
    1060:	58 2f       	mov	r21, r24
    1062:	6f 81       	ldd	r22, Y+7	; 0x07
    1064:	6e 0d       	add	r22, r14
    1066:	f1 e0       	ldi	r31, 0x01	; 1
    1068:	6e 15       	cp	r22, r14
    106a:	08 f0       	brcs	.+2      	; 0x106e <__vector_2+0x120>
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	9a 2f       	mov	r25, r26
    1070:	96 0f       	add	r25, r22
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	96 17       	cp	r25, r22
    1076:	08 f0       	brcs	.+2      	; 0x107a <__vector_2+0x12c>
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	8f 2b       	or	r24, r31
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	7f 0d       	add	r23, r15
    1080:	87 0f       	add	r24, r23
    1082:	00 93 31 01 	sts	0x0131, r16
    1086:	10 93 32 01 	sts	0x0132, r17
    108a:	20 93 33 01 	sts	0x0133, r18
    108e:	30 93 34 01 	sts	0x0134, r19
    1092:	40 93 35 01 	sts	0x0135, r20
    1096:	50 93 36 01 	sts	0x0136, r21
    109a:	90 93 37 01 	sts	0x0137, r25
    109e:	80 93 38 01 	sts	0x0138, r24
    10a2:	28 96       	adiw	r28, 0x08	; 8
    10a4:	f8 94       	cli
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	0f 90       	pop	r0
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	0f 90       	pop	r0
    10e0:	1f 90       	pop	r1
    10e2:	18 95       	reti

000010e4 <i2cinit>:
#include <util/delay.h>
#include <stdint.h>
#include "i2c.h"

void i2cinit(uint8_t speed,uint8_t prescaler) {
    10e4:	80 b9       	out	0x00, r24	; 0
  TWBR = speed;
  TWSR &= 0xF8;
    10e6:	81 b1       	in	r24, 0x01	; 1
    10e8:	88 7f       	andi	r24, 0xF8	; 248
    10ea:	81 b9       	out	0x01, r24	; 1
  TWSR += prescaler;
    10ec:	81 b1       	in	r24, 0x01	; 1
    10ee:	86 0f       	add	r24, r22
    10f0:	81 b9       	out	0x01, r24	; 1
    10f2:	08 95       	ret

000010f4 <i2cstart>:
}

void i2cstart(void) {
    10f4:	84 ea       	ldi	r24, 0xA4	; 164
    10f6:	86 bf       	out	0x36, r24	; 54
  TWCR= (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
  while (!(TWCR & (1<<TWINT)));
    10f8:	06 b6       	in	r0, 0x36	; 54
    10fa:	07 fe       	sbrs	r0, 7
    10fc:	fd cf       	rjmp	.-6      	; 0x10f8 <i2cstart+0x4>
    10fe:	08 95       	ret

00001100 <i2cstop>:
}

void i2cstop(void) {
    1100:	84 e9       	ldi	r24, 0x94	; 148
    1102:	86 bf       	out	0x36, r24	; 54
  TWCR= (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
  while (!(TWCR & (1<<TWINT)));
    1104:	06 b6       	in	r0, 0x36	; 54
    1106:	07 fe       	sbrs	r0, 7
    1108:	fd cf       	rjmp	.-6      	; 0x1104 <i2cstop+0x4>
    110a:	08 95       	ret

0000110c <i2ctransmit>:
}

uint8_t i2ctransmit(uint8_t data) {
    110c:	83 b9       	out	0x03, r24	; 3
  uint8_t ret;
  TWDR = data;
  TWCR = (1 << TWINT) | (1 << TWEN);
    110e:	84 e8       	ldi	r24, 0x84	; 132
    1110:	86 bf       	out	0x36, r24	; 54
  while (!(TWCR & (1<<TWINT)));
    1112:	06 b6       	in	r0, 0x36	; 54
    1114:	07 fe       	sbrs	r0, 7
    1116:	fd cf       	rjmp	.-6      	; 0x1112 <i2ctransmit+0x6>
  if((TWSR & 0xF8) == 0x18 || (TWSR & 0xF8) == 0x28) {ret = 1;}
    1118:	81 b1       	in	r24, 0x01	; 1
    111a:	88 7f       	andi	r24, 0xF8	; 248
    111c:	88 31       	cpi	r24, 0x18	; 24
    111e:	09 f0       	breq	.+2      	; 0x1122 <i2ctransmit+0x16>
    1120:	81 b1       	in	r24, 0x01	; 1
  if((TWSR & 0xF8) == 0x20 || (TWSR & 0xF8) == 0x30) {ret = 0;}
    1122:	81 b1       	in	r24, 0x01	; 1
    1124:	88 7f       	andi	r24, 0xF8	; 248
    1126:	80 32       	cpi	r24, 0x20	; 32
    1128:	11 f4       	brne	.+4      	; 0x112e <i2ctransmit+0x22>
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	08 c0       	rjmp	.+16     	; 0x113e <i2ctransmit+0x32>
    112e:	81 b1       	in	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	88 7f       	andi	r24, 0xF8	; 248
    1134:	80 33       	cpi	r24, 0x30	; 48
    1136:	09 f4       	brne	.+2      	; 0x113a <i2ctransmit+0x2e>
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	98 27       	eor	r25, r24
  return ret;
}
    113e:	89 2f       	mov	r24, r25
    1140:	99 27       	eor	r25, r25
    1142:	08 95       	ret

00001144 <i2creceive>:

uint8_t i2creceive(uint8_t ack) {
    1144:	82 95       	swap	r24
    1146:	88 0f       	add	r24, r24
    1148:	88 0f       	add	r24, r24
    114a:	80 7c       	andi	r24, 0xC0	; 192
    114c:	84 68       	ori	r24, 0x84	; 132
    114e:	86 bf       	out	0x36, r24	; 54
  TWCR = (1 << TWINT) | (ack << TWEA) | (1 << TWEN);
  while (!(TWCR & (1<<TWINT)));
    1150:	06 b6       	in	r0, 0x36	; 54
    1152:	07 fe       	sbrs	r0, 7
    1154:	fd cf       	rjmp	.-6      	; 0x1150 <i2creceive+0xc>
  return TWDR;
    1156:	83 b1       	in	r24, 0x03	; 3
}
    1158:	99 27       	eor	r25, r25
    115a:	08 95       	ret

0000115c <i2creadreg>:
    
void i2cwritereg(uint8_t address, uint8_t reg, uint8_t value) {
  i2cstart();
  i2ctransmit(address);
  i2ctransmit(reg);
  i2ctransmit(value);
  i2cstop();
}

uint8_t i2creadreg(uint8_t address, uint8_t reg) {
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	08 2f       	mov	r16, r24
    1162:	16 2f       	mov	r17, r22
    1164:	84 ea       	ldi	r24, 0xA4	; 164
    1166:	86 bf       	out	0x36, r24	; 54
    1168:	06 b6       	in	r0, 0x36	; 54
    116a:	07 fe       	sbrs	r0, 7
    116c:	fd cf       	rjmp	.-6      	; 0x1168 <i2creadreg+0xc>
  uint8_t retval;
  i2cstart();
  i2ctransmit(address);
    116e:	80 2f       	mov	r24, r16
    1170:	0e 94 86 08 	call	0x110c	; 0x110c <i2ctransmit>
  i2ctransmit(reg);
    1174:	81 2f       	mov	r24, r17
    1176:	0e 94 86 08 	call	0x110c	; 0x110c <i2ctransmit>
    117a:	84 ea       	ldi	r24, 0xA4	; 164
    117c:	86 bf       	out	0x36, r24	; 54
    117e:	06 b6       	in	r0, 0x36	; 54
    1180:	07 fe       	sbrs	r0, 7
    1182:	fd cf       	rjmp	.-6      	; 0x117e <i2creadreg+0x22>
  i2cstart();
  i2ctransmit(address + 1);
    1184:	80 2f       	mov	r24, r16
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	0e 94 86 08 	call	0x110c	; 0x110c <i2ctransmit>
  i2creceive(retval);
    118c:	81 2f       	mov	r24, r17
    118e:	0e 94 a2 08 	call	0x1144	; 0x1144 <i2creceive>
    1192:	84 e9       	ldi	r24, 0x94	; 148
    1194:	86 bf       	out	0x36, r24	; 54
    1196:	06 b6       	in	r0, 0x36	; 54
    1198:	07 fe       	sbrs	r0, 7
    119a:	fd cf       	rjmp	.-6      	; 0x1196 <i2creadreg+0x3a>
  i2cstop();
  return retval;
}    119c:	81 2f       	mov	r24, r17
    119e:	99 27       	eor	r25, r25
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <i2cwritereg>:
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	98 2f       	mov	r25, r24
    11ac:	16 2f       	mov	r17, r22
    11ae:	04 2f       	mov	r16, r20
    11b0:	84 ea       	ldi	r24, 0xA4	; 164
    11b2:	86 bf       	out	0x36, r24	; 54
    11b4:	06 b6       	in	r0, 0x36	; 54
    11b6:	07 fe       	sbrs	r0, 7
    11b8:	fd cf       	rjmp	.-6      	; 0x11b4 <i2cwritereg+0xe>
    11ba:	89 2f       	mov	r24, r25
    11bc:	0e 94 86 08 	call	0x110c	; 0x110c <i2ctransmit>
    11c0:	81 2f       	mov	r24, r17
    11c2:	0e 94 86 08 	call	0x110c	; 0x110c <i2ctransmit>
    11c6:	80 2f       	mov	r24, r16
    11c8:	0e 94 86 08 	call	0x110c	; 0x110c <i2ctransmit>
    11cc:	84 e9       	ldi	r24, 0x94	; 148
    11ce:	86 bf       	out	0x36, r24	; 54
    11d0:	06 b6       	in	r0, 0x36	; 54
    11d2:	07 fe       	sbrs	r0, 7
    11d4:	fd cf       	rjmp	.-6      	; 0x11d0 <i2cwritereg+0x2a>
    11d6:	1f 91       	pop	r17
    11d8:	0f 91       	pop	r16
    11da:	08 95       	ret

000011dc <SetDir>:
#include <avr/io.h>
#include <stdint.h>
#include "M32io2.h"

void SetDir(char port,uint8_t pin,char dir) {
    11dc:	82 34       	cpi	r24, 0x42	; 66
    11de:	09 f4       	brne	.+2      	; 0x11e2 <SetDir+0x6>
    11e0:	3d c0       	rjmp	.+122    	; 0x125c <SetDir+0x80>
  switch (port) {
    11e2:	83 34       	cpi	r24, 0x43	; 67
    11e4:	20 f4       	brcc	.+8      	; 0x11ee <SetDir+0x12>
    11e6:	81 34       	cpi	r24, 0x41	; 65
    11e8:	09 f0       	breq	.+2      	; 0x11ec <SetDir+0x10>
    11ea:	c7 c0       	rjmp	.+398    	; 0x137a <SetDir+0x19e>
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <SetDir+0x20>
    11ee:	83 34       	cpi	r24, 0x43	; 67
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <SetDir+0x18>
    11f2:	64 c0       	rjmp	.+200    	; 0x12bc <SetDir+0xe0>
    11f4:	84 34       	cpi	r24, 0x44	; 68
    11f6:	09 f0       	breq	.+2      	; 0x11fa <SetDir+0x1e>
    11f8:	c0 c0       	rjmp	.+384    	; 0x137a <SetDir+0x19e>
    11fa:	90 c0       	rjmp	.+288    	; 0x131c <SetDir+0x140>
   case 'A': 
    if(dir == 'I') {
    11fc:	49 34       	cpi	r20, 0x49	; 73
    11fe:	a9 f4       	brne	.+42     	; 0x122a <SetDir+0x4e>
	  if(((DDRA >> pin) & 1) == 1){DDRA -= (1 << pin);}
    1200:	8a b3       	in	r24, 0x1a	; 26
    1202:	77 27       	eor	r23, r23
    1204:	99 27       	eor	r25, r25
    1206:	06 2e       	mov	r0, r22
    1208:	02 c0       	rjmp	.+4      	; 0x120e <SetDir+0x32>
    120a:	95 95       	asr	r25
    120c:	87 95       	ror	r24
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <SetDir+0x2e>
    1212:	80 ff       	sbrs	r24, 0
    1214:	b2 c0       	rjmp	.+356    	; 0x137a <SetDir+0x19e>
    1216:	2a b3       	in	r18, 0x1a	; 26
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <SetDir+0x46>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	6a 95       	dec	r22
    1224:	e2 f7       	brpl	.-8      	; 0x121e <SetDir+0x42>
    1226:	28 1b       	sub	r18, r24
    1228:	17 c0       	rjmp	.+46     	; 0x1258 <SetDir+0x7c>
	}
	if(dir == 'O') {
    122a:	4f 34       	cpi	r20, 0x4F	; 79
    122c:	09 f0       	breq	.+2      	; 0x1230 <SetDir+0x54>
    122e:	a5 c0       	rjmp	.+330    	; 0x137a <SetDir+0x19e>
	  if(((DDRA >> pin) & 1) == 0){DDRA += (1 << pin);}
    1230:	8a b3       	in	r24, 0x1a	; 26
    1232:	77 27       	eor	r23, r23
    1234:	99 27       	eor	r25, r25
    1236:	06 2e       	mov	r0, r22
    1238:	02 c0       	rjmp	.+4      	; 0x123e <SetDir+0x62>
    123a:	95 95       	asr	r25
    123c:	87 95       	ror	r24
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <SetDir+0x5e>
    1242:	80 fd       	sbrc	r24, 0
    1244:	9a c0       	rjmp	.+308    	; 0x137a <SetDir+0x19e>
    1246:	2a b3       	in	r18, 0x1a	; 26
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <SetDir+0x76>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	6a 95       	dec	r22
    1254:	e2 f7       	brpl	.-8      	; 0x124e <SetDir+0x72>
    1256:	28 0f       	add	r18, r24
    1258:	2a bb       	out	0x1a, r18	; 26
    125a:	08 95       	ret
	}
   break;
   case 'B':    
    if(dir == 'I') {
    125c:	49 34       	cpi	r20, 0x49	; 73
    125e:	a9 f4       	brne	.+42     	; 0x128a <SetDir+0xae>
	  if(((DDRB >> pin) & 1) == 1){DDRB -= (1 << pin);}
    1260:	87 b3       	in	r24, 0x17	; 23
    1262:	77 27       	eor	r23, r23
    1264:	99 27       	eor	r25, r25
    1266:	06 2e       	mov	r0, r22
    1268:	02 c0       	rjmp	.+4      	; 0x126e <SetDir+0x92>
    126a:	95 95       	asr	r25
    126c:	87 95       	ror	r24
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <SetDir+0x8e>
    1272:	80 ff       	sbrs	r24, 0
    1274:	82 c0       	rjmp	.+260    	; 0x137a <SetDir+0x19e>
    1276:	27 b3       	in	r18, 0x17	; 23
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <SetDir+0xa6>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	6a 95       	dec	r22
    1284:	e2 f7       	brpl	.-8      	; 0x127e <SetDir+0xa2>
    1286:	28 1b       	sub	r18, r24
    1288:	17 c0       	rjmp	.+46     	; 0x12b8 <SetDir+0xdc>
	}
	if(dir == 'O') {
    128a:	4f 34       	cpi	r20, 0x4F	; 79
    128c:	09 f0       	breq	.+2      	; 0x1290 <SetDir+0xb4>
    128e:	75 c0       	rjmp	.+234    	; 0x137a <SetDir+0x19e>
	  if(((DDRB >> pin) & 1) == 0){DDRB += (1 << pin);}
    1290:	87 b3       	in	r24, 0x17	; 23
    1292:	77 27       	eor	r23, r23
    1294:	99 27       	eor	r25, r25
    1296:	06 2e       	mov	r0, r22
    1298:	02 c0       	rjmp	.+4      	; 0x129e <SetDir+0xc2>
    129a:	95 95       	asr	r25
    129c:	87 95       	ror	r24
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <SetDir+0xbe>
    12a2:	80 fd       	sbrc	r24, 0
    12a4:	6a c0       	rjmp	.+212    	; 0x137a <SetDir+0x19e>
    12a6:	27 b3       	in	r18, 0x17	; 23
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <SetDir+0xd6>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	6a 95       	dec	r22
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <SetDir+0xd2>
    12b6:	28 0f       	add	r18, r24
    12b8:	27 bb       	out	0x17, r18	; 23
    12ba:	08 95       	ret
	}
   break;
   case 'C':    
    if(dir == 'I') {
    12bc:	49 34       	cpi	r20, 0x49	; 73
    12be:	a9 f4       	brne	.+42     	; 0x12ea <SetDir+0x10e>
	  if(((DDRC >> pin) & 1) == 1){DDRC -= (1 << pin);}
    12c0:	84 b3       	in	r24, 0x14	; 20
    12c2:	77 27       	eor	r23, r23
    12c4:	99 27       	eor	r25, r25
    12c6:	06 2e       	mov	r0, r22
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <SetDir+0xf2>
    12ca:	95 95       	asr	r25
    12cc:	87 95       	ror	r24
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <SetDir+0xee>
    12d2:	80 ff       	sbrs	r24, 0
    12d4:	52 c0       	rjmp	.+164    	; 0x137a <SetDir+0x19e>
    12d6:	24 b3       	in	r18, 0x14	; 20
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <SetDir+0x106>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	6a 95       	dec	r22
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <SetDir+0x102>
    12e6:	28 1b       	sub	r18, r24
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <SetDir+0x13c>
	}
	if(dir == 'O') {
    12ea:	4f 34       	cpi	r20, 0x4F	; 79
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <SetDir+0x114>
    12ee:	45 c0       	rjmp	.+138    	; 0x137a <SetDir+0x19e>
	  if(((DDRC >> pin) & 1) == 0){DDRC += (1 << pin);}
    12f0:	84 b3       	in	r24, 0x14	; 20
    12f2:	77 27       	eor	r23, r23
    12f4:	99 27       	eor	r25, r25
    12f6:	06 2e       	mov	r0, r22
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <SetDir+0x122>
    12fa:	95 95       	asr	r25
    12fc:	87 95       	ror	r24
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <SetDir+0x11e>
    1302:	80 fd       	sbrc	r24, 0
    1304:	3a c0       	rjmp	.+116    	; 0x137a <SetDir+0x19e>
    1306:	24 b3       	in	r18, 0x14	; 20
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <SetDir+0x136>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	6a 95       	dec	r22
    1314:	e2 f7       	brpl	.-8      	; 0x130e <SetDir+0x132>
    1316:	28 0f       	add	r18, r24
    1318:	24 bb       	out	0x14, r18	; 20
    131a:	08 95       	ret
	}
   break;
   case 'D':    
    if(dir == 'I') {
    131c:	49 34       	cpi	r20, 0x49	; 73
    131e:	b1 f4       	brne	.+44     	; 0x134c <SetDir+0x170>
	  if(((DDRD >> pin) & 1) == 1){DDRD -= (1 << pin);}
    1320:	81 b3       	in	r24, 0x11	; 17
    1322:	77 27       	eor	r23, r23
    1324:	99 27       	eor	r25, r25
    1326:	06 2e       	mov	r0, r22
    1328:	02 c0       	rjmp	.+4      	; 0x132e <SetDir+0x152>
    132a:	95 95       	asr	r25
    132c:	87 95       	ror	r24
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <SetDir+0x14e>
    1332:	80 ff       	sbrs	r24, 0
    1334:	22 c0       	rjmp	.+68     	; 0x137a <SetDir+0x19e>
    1336:	21 b3       	in	r18, 0x11	; 17
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <SetDir+0x166>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	6a 95       	dec	r22
    1344:	e2 f7       	brpl	.-8      	; 0x133e <SetDir+0x162>
    1346:	28 1b       	sub	r18, r24
    1348:	21 bb       	out	0x11, r18	; 17
    134a:	08 95       	ret
	}
	if(dir == 'O') {
    134c:	4f 34       	cpi	r20, 0x4F	; 79
    134e:	a9 f4       	brne	.+42     	; 0x137a <SetDir+0x19e>
	  if(((DDRD >> pin) & 1) == 0){DDRD += (1 << pin);}
    1350:	81 b3       	in	r24, 0x11	; 17
    1352:	77 27       	eor	r23, r23
    1354:	99 27       	eor	r25, r25
    1356:	06 2e       	mov	r0, r22
    1358:	02 c0       	rjmp	.+4      	; 0x135e <SetDir+0x182>
    135a:	95 95       	asr	r25
    135c:	87 95       	ror	r24
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <SetDir+0x17e>
    1362:	80 fd       	sbrc	r24, 0
    1364:	0a c0       	rjmp	.+20     	; 0x137a <SetDir+0x19e>
    1366:	21 b3       	in	r18, 0x11	; 17
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <SetDir+0x196>
    136e:	88 0f       	add	r24, r24
    1370:	99 1f       	adc	r25, r25
    1372:	6a 95       	dec	r22
    1374:	e2 f7       	brpl	.-8      	; 0x136e <SetDir+0x192>
    1376:	28 0f       	add	r18, r24
    1378:	21 bb       	out	0x11, r18	; 17
    137a:	08 95       	ret

0000137c <SetPin>:
	}
   break;
  }
} 
 
void SetPin(char port,uint8_t pin,uint8_t state) {
    137c:	82 34       	cpi	r24, 0x42	; 66
    137e:	09 f4       	brne	.+2      	; 0x1382 <SetPin+0x6>
    1380:	3d c0       	rjmp	.+122    	; 0x13fc <SetPin+0x80>
  switch (port) {
    1382:	83 34       	cpi	r24, 0x43	; 67
    1384:	20 f4       	brcc	.+8      	; 0x138e <SetPin+0x12>
    1386:	81 34       	cpi	r24, 0x41	; 65
    1388:	09 f0       	breq	.+2      	; 0x138c <SetPin+0x10>
    138a:	c7 c0       	rjmp	.+398    	; 0x151a <SetPin+0x19e>
    138c:	07 c0       	rjmp	.+14     	; 0x139c <SetPin+0x20>
    138e:	83 34       	cpi	r24, 0x43	; 67
    1390:	09 f4       	brne	.+2      	; 0x1394 <SetPin+0x18>
    1392:	64 c0       	rjmp	.+200    	; 0x145c <SetPin+0xe0>
    1394:	84 34       	cpi	r24, 0x44	; 68
    1396:	09 f0       	breq	.+2      	; 0x139a <SetPin+0x1e>
    1398:	c0 c0       	rjmp	.+384    	; 0x151a <SetPin+0x19e>
    139a:	90 c0       	rjmp	.+288    	; 0x14bc <SetPin+0x140>
   case 'A': 
    if(state == 0) {
    139c:	44 23       	and	r20, r20
    139e:	a9 f4       	brne	.+42     	; 0x13ca <SetPin+0x4e>
	  if(((PORTA >> pin) & 1) == 1){PORTA -= (1 << pin);}
    13a0:	8b b3       	in	r24, 0x1b	; 27
    13a2:	77 27       	eor	r23, r23
    13a4:	99 27       	eor	r25, r25
    13a6:	06 2e       	mov	r0, r22
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <SetPin+0x32>
    13aa:	95 95       	asr	r25
    13ac:	87 95       	ror	r24
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <SetPin+0x2e>
    13b2:	80 ff       	sbrs	r24, 0
    13b4:	b2 c0       	rjmp	.+356    	; 0x151a <SetPin+0x19e>
    13b6:	2b b3       	in	r18, 0x1b	; 27
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <SetPin+0x46>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	6a 95       	dec	r22
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <SetPin+0x42>
    13c6:	28 1b       	sub	r18, r24
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <SetPin+0x7c>
	}
	if(state == 1) {
    13ca:	41 30       	cpi	r20, 0x01	; 1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <SetPin+0x54>
    13ce:	a5 c0       	rjmp	.+330    	; 0x151a <SetPin+0x19e>
	  if(((PORTA >> pin) & 1) == 0){PORTA += (1 << pin);}
    13d0:	8b b3       	in	r24, 0x1b	; 27
    13d2:	77 27       	eor	r23, r23
    13d4:	99 27       	eor	r25, r25
    13d6:	06 2e       	mov	r0, r22
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <SetPin+0x62>
    13da:	95 95       	asr	r25
    13dc:	87 95       	ror	r24
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <SetPin+0x5e>
    13e2:	80 fd       	sbrc	r24, 0
    13e4:	9a c0       	rjmp	.+308    	; 0x151a <SetPin+0x19e>
    13e6:	2b b3       	in	r18, 0x1b	; 27
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <SetPin+0x76>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	6a 95       	dec	r22
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <SetPin+0x72>
    13f6:	28 0f       	add	r18, r24
    13f8:	2b bb       	out	0x1b, r18	; 27
    13fa:	08 95       	ret
	}
   break;
   case 'B':    
    if(state == 1) {
    13fc:	41 30       	cpi	r20, 0x01	; 1
    13fe:	a9 f4       	brne	.+42     	; 0x142a <SetPin+0xae>
	  if(((PORTB >> pin) & 1) == 1){PORTB -= (1 << pin);}
    1400:	88 b3       	in	r24, 0x18	; 24
    1402:	77 27       	eor	r23, r23
    1404:	99 27       	eor	r25, r25
    1406:	06 2e       	mov	r0, r22
    1408:	02 c0       	rjmp	.+4      	; 0x140e <SetPin+0x92>
    140a:	95 95       	asr	r25
    140c:	87 95       	ror	r24
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <SetPin+0x8e>
    1412:	80 ff       	sbrs	r24, 0
    1414:	82 c0       	rjmp	.+260    	; 0x151a <SetPin+0x19e>
    1416:	28 b3       	in	r18, 0x18	; 24
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 c0       	rjmp	.+4      	; 0x1422 <SetPin+0xa6>
    141e:	88 0f       	add	r24, r24
    1420:	99 1f       	adc	r25, r25
    1422:	6a 95       	dec	r22
    1424:	e2 f7       	brpl	.-8      	; 0x141e <SetPin+0xa2>
    1426:	28 1b       	sub	r18, r24
    1428:	17 c0       	rjmp	.+46     	; 0x1458 <SetPin+0xdc>
	}
	if(state == 0) {
    142a:	44 23       	and	r20, r20
    142c:	09 f0       	breq	.+2      	; 0x1430 <SetPin+0xb4>
    142e:	75 c0       	rjmp	.+234    	; 0x151a <SetPin+0x19e>
	  if(((PORTB >> pin) & 1) == 0){PORTB += (1 << pin);}
    1430:	88 b3       	in	r24, 0x18	; 24
    1432:	77 27       	eor	r23, r23
    1434:	99 27       	eor	r25, r25
    1436:	06 2e       	mov	r0, r22
    1438:	02 c0       	rjmp	.+4      	; 0x143e <SetPin+0xc2>
    143a:	95 95       	asr	r25
    143c:	87 95       	ror	r24
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <SetPin+0xbe>
    1442:	80 fd       	sbrc	r24, 0
    1444:	6a c0       	rjmp	.+212    	; 0x151a <SetPin+0x19e>
    1446:	28 b3       	in	r18, 0x18	; 24
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <SetPin+0xd6>
    144e:	88 0f       	add	r24, r24
    1450:	99 1f       	adc	r25, r25
    1452:	6a 95       	dec	r22
    1454:	e2 f7       	brpl	.-8      	; 0x144e <SetPin+0xd2>
    1456:	28 0f       	add	r18, r24
    1458:	28 bb       	out	0x18, r18	; 24
    145a:	08 95       	ret
	}
   break;
   case 'C':    
    if(state == 1) {
    145c:	41 30       	cpi	r20, 0x01	; 1
    145e:	a9 f4       	brne	.+42     	; 0x148a <SetPin+0x10e>
	  if(((PORTC >> pin) & 1) == 1){PORTC -= (1 << pin);}
    1460:	85 b3       	in	r24, 0x15	; 21
    1462:	77 27       	eor	r23, r23
    1464:	99 27       	eor	r25, r25
    1466:	06 2e       	mov	r0, r22
    1468:	02 c0       	rjmp	.+4      	; 0x146e <SetPin+0xf2>
    146a:	95 95       	asr	r25
    146c:	87 95       	ror	r24
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <SetPin+0xee>
    1472:	80 ff       	sbrs	r24, 0
    1474:	52 c0       	rjmp	.+164    	; 0x151a <SetPin+0x19e>
    1476:	25 b3       	in	r18, 0x15	; 21
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <SetPin+0x106>
    147e:	88 0f       	add	r24, r24
    1480:	99 1f       	adc	r25, r25
    1482:	6a 95       	dec	r22
    1484:	e2 f7       	brpl	.-8      	; 0x147e <SetPin+0x102>
    1486:	28 1b       	sub	r18, r24
    1488:	17 c0       	rjmp	.+46     	; 0x14b8 <SetPin+0x13c>
	}
	if(state == 0) {
    148a:	44 23       	and	r20, r20
    148c:	09 f0       	breq	.+2      	; 0x1490 <SetPin+0x114>
    148e:	45 c0       	rjmp	.+138    	; 0x151a <SetPin+0x19e>
	  if(((PORTC >> pin) & 1) == 0){PORTC += (1 << pin);}
    1490:	85 b3       	in	r24, 0x15	; 21
    1492:	77 27       	eor	r23, r23
    1494:	99 27       	eor	r25, r25
    1496:	06 2e       	mov	r0, r22
    1498:	02 c0       	rjmp	.+4      	; 0x149e <SetPin+0x122>
    149a:	95 95       	asr	r25
    149c:	87 95       	ror	r24
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <SetPin+0x11e>
    14a2:	80 fd       	sbrc	r24, 0
    14a4:	3a c0       	rjmp	.+116    	; 0x151a <SetPin+0x19e>
    14a6:	25 b3       	in	r18, 0x15	; 21
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <SetPin+0x136>
    14ae:	88 0f       	add	r24, r24
    14b0:	99 1f       	adc	r25, r25
    14b2:	6a 95       	dec	r22
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <SetPin+0x132>
    14b6:	28 0f       	add	r18, r24
    14b8:	25 bb       	out	0x15, r18	; 21
    14ba:	08 95       	ret
	}
   break;
   case 'D':    
    if(state == 1) {
    14bc:	41 30       	cpi	r20, 0x01	; 1
    14be:	b1 f4       	brne	.+44     	; 0x14ec <SetPin+0x170>
	  if(((PORTD >> pin) & 1) == 1){PORTD -= (1 << pin);}
    14c0:	82 b3       	in	r24, 0x12	; 18
    14c2:	77 27       	eor	r23, r23
    14c4:	99 27       	eor	r25, r25
    14c6:	06 2e       	mov	r0, r22
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <SetPin+0x152>
    14ca:	95 95       	asr	r25
    14cc:	87 95       	ror	r24
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <SetPin+0x14e>
    14d2:	80 ff       	sbrs	r24, 0
    14d4:	22 c0       	rjmp	.+68     	; 0x151a <SetPin+0x19e>
    14d6:	22 b3       	in	r18, 0x12	; 18
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <SetPin+0x166>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	6a 95       	dec	r22
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <SetPin+0x162>
    14e6:	28 1b       	sub	r18, r24
    14e8:	22 bb       	out	0x12, r18	; 18
    14ea:	08 95       	ret
	}
	if(state == 0) {
    14ec:	44 23       	and	r20, r20
    14ee:	a9 f4       	brne	.+42     	; 0x151a <SetPin+0x19e>
	  if(((PORTD >> pin) & 1) == 0){PORTD += (1 << pin);}
    14f0:	82 b3       	in	r24, 0x12	; 18
    14f2:	77 27       	eor	r23, r23
    14f4:	99 27       	eor	r25, r25
    14f6:	06 2e       	mov	r0, r22
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <SetPin+0x182>
    14fa:	95 95       	asr	r25
    14fc:	87 95       	ror	r24
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <SetPin+0x17e>
    1502:	80 fd       	sbrc	r24, 0
    1504:	0a c0       	rjmp	.+20     	; 0x151a <SetPin+0x19e>
    1506:	22 b3       	in	r18, 0x12	; 18
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <SetPin+0x196>
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	6a 95       	dec	r22
    1514:	e2 f7       	brpl	.-8      	; 0x150e <SetPin+0x192>
    1516:	28 0f       	add	r18, r24
    1518:	22 bb       	out	0x12, r18	; 18
    151a:	08 95       	ret

0000151c <GetPin>:
	}
   break;
  }
}

uint8_t GetPin (char port,uint8_t pin) {
    151c:	82 34       	cpi	r24, 0x42	; 66
    151e:	61 f0       	breq	.+24     	; 0x1538 <GetPin+0x1c>
  switch (port) {
    1520:	83 34       	cpi	r24, 0x43	; 67
    1522:	18 f4       	brcc	.+6      	; 0x152a <GetPin+0xe>
    1524:	81 34       	cpi	r24, 0x41	; 65
    1526:	b1 f4       	brne	.+44     	; 0x1554 <GetPin+0x38>
    1528:	05 c0       	rjmp	.+10     	; 0x1534 <GetPin+0x18>
    152a:	83 34       	cpi	r24, 0x43	; 67
    152c:	39 f0       	breq	.+14     	; 0x153c <GetPin+0x20>
    152e:	84 34       	cpi	r24, 0x44	; 68
    1530:	89 f4       	brne	.+34     	; 0x1554 <GetPin+0x38>
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <GetPin+0x24>
    case 'A':return ((PINA >> pin) & 1);break;
    1534:	89 b3       	in	r24, 0x19	; 25
    1536:	05 c0       	rjmp	.+10     	; 0x1542 <GetPin+0x26>
	case 'B':return ((PINB >> pin) & 1);break;
    1538:	86 b3       	in	r24, 0x16	; 22
    153a:	03 c0       	rjmp	.+6      	; 0x1542 <GetPin+0x26>
	case 'C':return ((PINC >> pin) & 1);break;
    153c:	83 b3       	in	r24, 0x13	; 19
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <GetPin+0x26>
	case 'D':return ((PIND >> pin) & 1);break;
    1540:	80 b3       	in	r24, 0x10	; 16
    1542:	99 27       	eor	r25, r25
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GetPin+0x2e>
    1546:	95 95       	asr	r25
    1548:	87 95       	ror	r24
    154a:	6a 95       	dec	r22
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GetPin+0x2a>
    154e:	81 70       	andi	r24, 0x01	; 1
    1550:	90 70       	andi	r25, 0x00	; 0
    1552:	08 95       	ret
  }
} 
    1554:	08 95       	ret

00001556 <initservos>:
#include <avr/signal.h>
#include "servo.h"

void initservos( uint16_t reloadtime, uint8_t servo1en, uint8_t servo2en )
{
    1556:	90 93 99 01 	sts	0x0199, r25
    155a:	80 93 98 01 	sts	0x0198, r24
  reload = reloadtime;
  if(servo1en == ON){DDRD = DDRD + 64;plsref[0] = ON;}
    155e:	66 23       	and	r22, r22
    1560:	31 f4       	brne	.+12     	; 0x156e <initservos+0x18>
    1562:	81 b3       	in	r24, 0x11	; 17
    1564:	80 5c       	subi	r24, 0xC0	; 192
    1566:	81 bb       	out	0x11, r24	; 17
    1568:	10 92 9e 01 	sts	0x019E, r1
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <initservos+0x1e>
  else{plsref[0] = NULL;}
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	80 93 9e 01 	sts	0x019E, r24
  if(servo2en == ON){DDRD = DDRD + 128;plsref[1] = ON;}
    1574:	44 23       	and	r20, r20
    1576:	31 f4       	brne	.+12     	; 0x1584 <initservos+0x2e>
    1578:	81 b3       	in	r24, 0x11	; 17
    157a:	80 58       	subi	r24, 0x80	; 128
    157c:	81 bb       	out	0x11, r24	; 17
    157e:	10 92 9f 01 	sts	0x019F, r1
    1582:	03 c0       	rjmp	.+6      	; 0x158a <initservos+0x34>
  else{plsref[1] = NULL;}
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	80 93 9f 01 	sts	0x019F, r24
  TCCR0 = 1;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	83 bf       	out	0x33, r24	; 51
  TIMSK = TIMSK + 1;
    158e:	89 b7       	in	r24, 0x39	; 57
    1590:	8f 5f       	subi	r24, 0xFF	; 255
    1592:	89 bf       	out	0x39, r24	; 57
  sei();
    1594:	78 94       	sei
    1596:	08 95       	ret

00001598 <setservo1>:
}

void setservo1( uint16_t cycles1 )
{
    1598:	90 93 95 01 	sts	0x0195, r25
    159c:	80 93 94 01 	sts	0x0194, r24
  counttopulse[0] = cycles1;
  counter[0] = 0;
    15a0:	10 92 9b 01 	sts	0x019B, r1
    15a4:	10 92 9a 01 	sts	0x019A, r1
    15a8:	08 95       	ret

000015aa <setservo2>:
}

void setservo2( uint16_t cycles2 )
{
    15aa:	90 93 97 01 	sts	0x0197, r25
    15ae:	80 93 96 01 	sts	0x0196, r24
  counttopulse[1] = cycles2;
  counter[1] = 0;
    15b2:	10 92 9d 01 	sts	0x019D, r1
    15b6:	10 92 9c 01 	sts	0x019C, r1
    15ba:	08 95       	ret

000015bc <__vector_11>:
}

SIGNAL (SIG_OVERFLOW0)
{
    15bc:	1f 92       	push	r1
    15be:	0f 92       	push	r0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	0f 92       	push	r0
    15c4:	11 24       	eor	r1, r1
    15c6:	2f 93       	push	r18
    15c8:	3f 93       	push	r19
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
  switch (plsref[0])
    15ce:	80 91 9e 01 	lds	r24, 0x019E
    15d2:	88 23       	and	r24, r24
    15d4:	19 f0       	breq	.+6      	; 0x15dc <__vector_11+0x20>
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	31 f5       	brne	.+76     	; 0x1626 <__vector_11+0x6a>
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <__vector_11+0x42>
  {
    case ON:
	  if(counter[0] == reload)
    15dc:	20 91 9a 01 	lds	r18, 0x019A
    15e0:	30 91 9b 01 	lds	r19, 0x019B
    15e4:	80 91 98 01 	lds	r24, 0x0198
    15e8:	90 91 99 01 	lds	r25, 0x0199
    15ec:	28 17       	cp	r18, r24
    15ee:	39 07       	cpc	r19, r25
    15f0:	d1 f4       	brne	.+52     	; 0x1626 <__vector_11+0x6a>
	  {
	    plsref[0] = OFF;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	80 93 9e 01 	sts	0x019E, r24
		PORTD = PORTD + 64;
    15f8:	82 b3       	in	r24, 0x12	; 18
    15fa:	80 5c       	subi	r24, 0xC0	; 192
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <__vector_11+0x60>
		counter[0] = 0;
	  }
	  break;
	
	case OFF:
	  if(counter[0] == counttopulse[0])
    15fe:	20 91 9a 01 	lds	r18, 0x019A
    1602:	30 91 9b 01 	lds	r19, 0x019B
    1606:	80 91 94 01 	lds	r24, 0x0194
    160a:	90 91 95 01 	lds	r25, 0x0195
    160e:	28 17       	cp	r18, r24
    1610:	39 07       	cpc	r19, r25
    1612:	49 f4       	brne	.+18     	; 0x1626 <__vector_11+0x6a>
	  {
	    plsref[0] = ON;
    1614:	10 92 9e 01 	sts	0x019E, r1
		PORTD = PORTD - 64;
    1618:	82 b3       	in	r24, 0x12	; 18
    161a:	80 54       	subi	r24, 0x40	; 64
    161c:	82 bb       	out	0x12, r24	; 18
		counter[0] = 0;
    161e:	10 92 9b 01 	sts	0x019B, r1
    1622:	10 92 9a 01 	sts	0x019A, r1
	  }
	  break;
	  
	case NULL:
	  break;
  }
  switch (plsref[1])
    1626:	80 91 9f 01 	lds	r24, 0x019F
    162a:	88 23       	and	r24, r24
    162c:	19 f0       	breq	.+6      	; 0x1634 <__vector_11+0x78>
    162e:	81 30       	cpi	r24, 0x01	; 1
    1630:	21 f5       	brne	.+72     	; 0x167a <__vector_11+0xbe>
    1632:	0f c0       	rjmp	.+30     	; 0x1652 <__vector_11+0x96>
  {
    case ON:
	  if(counter[1] == reload)
    1634:	20 91 9c 01 	lds	r18, 0x019C
    1638:	30 91 9d 01 	lds	r19, 0x019D
    163c:	80 91 98 01 	lds	r24, 0x0198
    1640:	90 91 99 01 	lds	r25, 0x0199
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	c1 f4       	brne	.+48     	; 0x167a <__vector_11+0xbe>
	  {
	    plsref[1] = OFF;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	80 93 9f 01 	sts	0x019F, r24
    1650:	0d c0       	rjmp	.+26     	; 0x166c <__vector_11+0xb0>
		PORTD = PORTD + 128;
		counter[1] = 0;
	  }
	  break;
	
	case OFF:
	  if(counter[1] == counttopulse[1])
    1652:	20 91 9c 01 	lds	r18, 0x019C
    1656:	30 91 9d 01 	lds	r19, 0x019D
    165a:	80 91 96 01 	lds	r24, 0x0196
    165e:	90 91 97 01 	lds	r25, 0x0197
    1662:	28 17       	cp	r18, r24
    1664:	39 07       	cpc	r19, r25
    1666:	49 f4       	brne	.+18     	; 0x167a <__vector_11+0xbe>
	  {
	    plsref[1] = ON;
    1668:	10 92 9f 01 	sts	0x019F, r1
		PORTD = PORTD - 128;
    166c:	82 b3       	in	r24, 0x12	; 18
    166e:	80 58       	subi	r24, 0x80	; 128
    1670:	82 bb       	out	0x12, r24	; 18
		counter[1] = 0;
    1672:	10 92 9d 01 	sts	0x019D, r1
    1676:	10 92 9c 01 	sts	0x019C, r1
	  }
	  break;
	  
	case NULL:
	  break;
  }
  counter[0]++;
    167a:	80 91 9a 01 	lds	r24, 0x019A
    167e:	90 91 9b 01 	lds	r25, 0x019B
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	90 93 9b 01 	sts	0x019B, r25
    1688:	80 93 9a 01 	sts	0x019A, r24
  counter[1]++;
    168c:	80 91 9c 01 	lds	r24, 0x019C
    1690:	90 91 9d 01 	lds	r25, 0x019D
    1694:	01 96       	adiw	r24, 0x01	; 1
    1696:	90 93 9d 01 	sts	0x019D, r25
    169a:	80 93 9c 01 	sts	0x019C, r24
    169e:	9f 91       	pop	r25
    16a0:	8f 91       	pop	r24
    16a2:	3f 91       	pop	r19
    16a4:	2f 91       	pop	r18
    16a6:	0f 90       	pop	r0
    16a8:	0f be       	out	0x3f, r0	; 63
    16aa:	0f 90       	pop	r0
    16ac:	1f 90       	pop	r1
    16ae:	18 95       	reti

000016b0 <initPWM08>:

void initPWM( void ) {
  initPWM08();
}
void initPWM08( void ) {
    16b0:	81 ea       	ldi	r24, 0xA1	; 161
    16b2:	8f bd       	out	0x2f, r24	; 47
  TCCR1A = ( 1 << WGM10 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
    16b4:	89 e0       	ldi	r24, 0x09	; 9
    16b6:	8e bd       	out	0x2e, r24	; 46
    16b8:	08 95       	ret

000016ba <initPWM09>:
}
void initPWM09( void ) {
    16ba:	82 ea       	ldi	r24, 0xA2	; 162
    16bc:	8f bd       	out	0x2f, r24	; 47
  TCCR1A = ( 1 << WGM11 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
    16be:	89 e0       	ldi	r24, 0x09	; 9
    16c0:	8e bd       	out	0x2e, r24	; 46
    16c2:	08 95       	ret

000016c4 <initPWM10>:
}
void initPWM10( void ) {
    16c4:	83 ea       	ldi	r24, 0xA3	; 163
    16c6:	8f bd       	out	0x2f, r24	; 47
  TCCR1A = ( 1 << WGM10 ) | ( 1 << WGM11 ) | ( 1 << COM1A1 ) | ( 1 << COM1B1 );
  TCCR1B = ( 1 << CS10  ) | ( 1 << WGM12  );
    16c8:	89 e0       	ldi	r24, 0x09	; 9
    16ca:	8e bd       	out	0x2e, r24	; 46
    16cc:	08 95       	ret

000016ce <setCHA08>:
}
void setCHA( uint16_t valueA )
{
  setCHA08(valueA);
}

void setCHB( uint16_t valueB )
{
  setCHB08(valueB);
}
void setCHA08( uint16_t valueA ) {
    16ce:	9b bd       	out	0x2b, r25	; 43
    16d0:	8a bd       	out	0x2a, r24	; 42
    16d2:	08 95       	ret

000016d4 <setCHB08>:
  OCR1A = valueA;
}
void setCHB08( uint16_t valueB ) {
    16d4:	99 bd       	out	0x29, r25	; 41
    16d6:	88 bd       	out	0x28, r24	; 40
    16d8:	08 95       	ret

000016da <setCHA09>:
  OCR1B = valueB;
}
void setCHA09( uint16_t valueA) {
    16da:	8a bd       	out	0x2a, r24	; 42
  OCR1AL = valueA & 0xFF;
  OCR1AH = ((valueA >> 8) & 0x01);
    16dc:	89 2f       	mov	r24, r25
    16de:	99 27       	eor	r25, r25
    16e0:	81 70       	andi	r24, 0x01	; 1
    16e2:	8b bd       	out	0x2b, r24	; 43
    16e4:	08 95       	ret

000016e6 <setCHB09>:
}
void setCHB09( uint16_t valueB) {
    16e6:	88 bd       	out	0x28, r24	; 40
  OCR1BL = valueB & 0xFF;
  OCR1BH = ((valueB >> 8) & 0x01);
    16e8:	89 2f       	mov	r24, r25
    16ea:	99 27       	eor	r25, r25
    16ec:	81 70       	andi	r24, 0x01	; 1
    16ee:	89 bd       	out	0x29, r24	; 41
    16f0:	08 95       	ret

000016f2 <setCHA10>:
}
void setCHA10( uint16_t valueA) {
    16f2:	8a bd       	out	0x2a, r24	; 42
  OCR1AL = valueA & 0xFF;
  OCR1AH = ((valueA >> 8) & 0x03);
    16f4:	89 2f       	mov	r24, r25
    16f6:	99 27       	eor	r25, r25
    16f8:	83 70       	andi	r24, 0x03	; 3
    16fa:	8b bd       	out	0x2b, r24	; 43
    16fc:	08 95       	ret

000016fe <setCHB10>:
}
void setCHB10( uint16_t valueB) {
    16fe:	8a bd       	out	0x2a, r24	; 42
  OCR1AL = valueB & 0xFF;
  OCR1BH = ((valueB >> 8) & 0x03);
    1700:	89 2f       	mov	r24, r25
    1702:	99 27       	eor	r25, r25
    1704:	83 70       	andi	r24, 0x03	; 3
    1706:	89 bd       	out	0x29, r24	; 41
    1708:	08 95       	ret

0000170a <setCHB>:
    170a:	99 bd       	out	0x29, r25	; 41
    170c:	88 bd       	out	0x28, r24	; 40
    170e:	08 95       	ret

00001710 <setCHA>:
    1710:	9b bd       	out	0x2b, r25	; 43
    1712:	8a bd       	out	0x2a, r24	; 42
    1714:	08 95       	ret

00001716 <initPWM>:
    1716:	81 ea       	ldi	r24, 0xA1	; 161
    1718:	8f bd       	out	0x2f, r24	; 47
    171a:	89 e0       	ldi	r24, 0x09	; 9
    171c:	8e bd       	out	0x2e, r24	; 46
    171e:	08 95       	ret

00001720 <initADC>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "adc.h"
void initADC( void )
{
    1720:	86 ec       	ldi	r24, 0xC6	; 198
    1722:	86 b9       	out	0x06, r24	; 6
  ADCSRA = ( 1 << ADEN  ) | ( 1 << ADSC  )
        | ( 1 << ADPS2 ) | ( 1 << ADPS1 );
  while ( ADCSRA & ( 1 << ADSC ) );
    1724:	36 99       	sbic	0x06, 6	; 6
    1726:	fe cf       	rjmp	.-4      	; 0x1724 <initADC+0x4>
    1728:	08 95       	ret

0000172a <DELAY_US>:
}

uint16_t ADC08bit( uint8_t channel )
{
    /* set for 8-bit results for the desired channel number then start the
       conversion; pause for the hardware to catch up */
    
    ADMUX  = ( 1 << ADLAR ) | ( 1 << REFS0 ) | channel;
    ADCSRA = ( 1 << ADEN  ) | ( 1 << ADSC  );
    DELAY_US( 64 );

    /* wait for complete conversion and return the result */

    while ( ADCSRA & ( 1 << ADSC ) );
    
    return ADCH;
}

uint16_t ADC10bit( uint8_t channel )
{
    ADMUX  = ( 1 << REFS0 ) | channel;
    ADCSRA = ( 1 << ADEN  ) | ( 1 << ADSC  );
    DELAY_US( 64 );
    while ( ADCSRA & ( 1 << ADSC ) );
	convert = ADCH;
	convert <<= 8;
	convert += ADCL;
	return convert;
}

void DELAY_US( uint16_t microseconds )
{
    172a:	96 95       	lsr	r25
    172c:	87 95       	ror	r24
    172e:	96 95       	lsr	r25
    1730:	87 95       	ror	r24
    1732:	90 93 3a 01 	sts	0x013A, r25
    1736:	80 93 39 01 	sts	0x0139, r24

#if MCU_FREQ == 8000000UL

    /* 8mhz clock, 4 instructions per loop_count  */
    loop_count = microseconds * 2;

#elif MCU_FREQ == 1000000UL

    /* 1mhz clock, 4 instructions per loop_count */
    loop_count = microseconds / 4;

#elif MCU_FREQ == 16000000UL

    /* 1mhz clock, 4 instructions per loop_count */
    loop_count = microseconds / 4;

#else
#error MCU_FREQ undefined or set to an unknown value!
    loop_count = 0; /* don't really know what to do */
#endif

    __asm__ volatile (
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	f1 f7       	brne	.-4      	; 0x173a <DELAY_US+0x10>
    173e:	90 93 3a 01 	sts	0x013A, r25
    1742:	80 93 39 01 	sts	0x0139, r24
    1746:	08 95       	ret

00001748 <ADC10bit>:
    1748:	80 64       	ori	r24, 0x40	; 64
    174a:	87 b9       	out	0x07, r24	; 7
    174c:	80 ec       	ldi	r24, 0xC0	; 192
    174e:	86 b9       	out	0x06, r24	; 6
    1750:	80 e4       	ldi	r24, 0x40	; 64
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	0e 94 95 0b 	call	0x172a	; 0x172a <DELAY_US>
    1758:	36 99       	sbic	0x06, 6	; 6
    175a:	fe cf       	rjmp	.-4      	; 0x1758 <ADC10bit+0x10>
    175c:	85 b1       	in	r24, 0x05	; 5
    175e:	24 b1       	in	r18, 0x04	; 4
    1760:	99 27       	eor	r25, r25
    1762:	98 2f       	mov	r25, r24
    1764:	88 27       	eor	r24, r24
    1766:	82 0f       	add	r24, r18
    1768:	91 1d       	adc	r25, r1
    176a:	90 93 93 01 	sts	0x0193, r25
    176e:	80 93 92 01 	sts	0x0192, r24
    1772:	08 95       	ret

00001774 <ADC08bit>:
    1774:	80 66       	ori	r24, 0x60	; 96
    1776:	87 b9       	out	0x07, r24	; 7
    1778:	80 ec       	ldi	r24, 0xC0	; 192
    177a:	86 b9       	out	0x06, r24	; 6
    177c:	80 e4       	ldi	r24, 0x40	; 64
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 95 0b 	call	0x172a	; 0x172a <DELAY_US>
    1784:	36 99       	sbic	0x06, 6	; 6
    1786:	fe cf       	rjmp	.-4      	; 0x1784 <ADC08bit+0x10>
    1788:	85 b1       	in	r24, 0x05	; 5
    178a:	99 27       	eor	r25, r25
    178c:	08 95       	ret

0000178e <changeAddress>:
void initcommsunit() {
  i2cinit(8,0);
}

void changeAddress(uint8_t address,uint8_t newadd) {
    178e:	0f 93       	push	r16
    1790:	1f 93       	push	r17
    1792:	18 2f       	mov	r17, r24
    1794:	06 2f       	mov	r16, r22
  i2cwritereg(address,0x00,0xA0);
    1796:	40 ea       	ldi	r20, 0xA0	; 160
    1798:	60 e0       	ldi	r22, 0x00	; 0
    179a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
  i2cwritereg(address,0x00,0xA5);
    179e:	45 ea       	ldi	r20, 0xA5	; 165
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	81 2f       	mov	r24, r17
    17a4:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
  i2cwritereg(address,0x00,0xAA);
    17a8:	4a ea       	ldi	r20, 0xAA	; 170
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	81 2f       	mov	r24, r17
    17ae:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
  i2cwritereg(address,0x00,newadd);
    17b2:	40 2f       	mov	r20, r16
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	81 2f       	mov	r24, r17
    17b8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
    17bc:	1f 91       	pop	r17
    17be:	0f 91       	pop	r16
    17c0:	08 95       	ret

000017c2 <getUS>:
}

uint16_t getCM(uint8_t address) {
  i2cwritereg(address,0x00,0x51);
  for(wit=0;wit<1000;wit++);
  dis = i2creadreg(address,0x02);
  dis <<= 8;
  dis += i2creadreg(address,0x03);
  return dis; 
}

uint16_t getIN(uint8_t address) {  
  i2cwritereg(address,0x00,0x50);
  for(wit=0;wit<1000;wit++);
  dis = i2creadreg(address,0x02);
  dis <<= 8;
  dis += i2creadreg(address,0x03);
  return dis; 
}

uint16_t getUS(uint8_t address) {
    17c2:	ef 92       	push	r14
    17c4:	ff 92       	push	r15
    17c6:	1f 93       	push	r17
    17c8:	18 2f       	mov	r17, r24
  i2cwritereg(address,0x00,0x52);
    17ca:	42 e5       	ldi	r20, 0x52	; 82
    17cc:	60 e0       	ldi	r22, 0x00	; 0
    17ce:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
    17d2:	88 ee       	ldi	r24, 0xE8	; 232
    17d4:	93 e0       	ldi	r25, 0x03	; 3
    17d6:	a0 e0       	ldi	r26, 0x00	; 0
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	80 93 58 01 	sts	0x0158, r24
    17de:	90 93 59 01 	sts	0x0159, r25
    17e2:	a0 93 5a 01 	sts	0x015A, r26
    17e6:	b0 93 5b 01 	sts	0x015B, r27
  for(wit=0;wit<1000;wit++);
  dis = i2creadreg(address,0x02);
    17ea:	62 e0       	ldi	r22, 0x02	; 2
    17ec:	81 2f       	mov	r24, r17
    17ee:	0e 94 ae 08 	call	0x115c	; 0x115c <i2creadreg>
  dis <<= 8;
    17f2:	e8 2e       	mov	r14, r24
    17f4:	ff 24       	eor	r15, r15
    17f6:	fe 2c       	mov	r15, r14
    17f8:	ee 24       	eor	r14, r14
    17fa:	f0 92 91 01 	sts	0x0191, r15
    17fe:	e0 92 90 01 	sts	0x0190, r14
  dis += i2creadreg(address,0x03);
    1802:	63 e0       	ldi	r22, 0x03	; 3
    1804:	81 2f       	mov	r24, r17
    1806:	0e 94 ae 08 	call	0x115c	; 0x115c <i2creadreg>
    180a:	e8 0e       	add	r14, r24
    180c:	f1 1c       	adc	r15, r1
    180e:	f0 92 91 01 	sts	0x0191, r15
    1812:	e0 92 90 01 	sts	0x0190, r14
  return dis; 
}
    1816:	c7 01       	movw	r24, r14
    1818:	1f 91       	pop	r17
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	08 95       	ret

00001820 <getIN>:
    1820:	ef 92       	push	r14
    1822:	ff 92       	push	r15
    1824:	1f 93       	push	r17
    1826:	18 2f       	mov	r17, r24
    1828:	40 e5       	ldi	r20, 0x50	; 80
    182a:	60 e0       	ldi	r22, 0x00	; 0
    182c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
    1830:	88 ee       	ldi	r24, 0xE8	; 232
    1832:	93 e0       	ldi	r25, 0x03	; 3
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	80 93 58 01 	sts	0x0158, r24
    183c:	90 93 59 01 	sts	0x0159, r25
    1840:	a0 93 5a 01 	sts	0x015A, r26
    1844:	b0 93 5b 01 	sts	0x015B, r27
    1848:	62 e0       	ldi	r22, 0x02	; 2
    184a:	81 2f       	mov	r24, r17
    184c:	0e 94 ae 08 	call	0x115c	; 0x115c <i2creadreg>
    1850:	e8 2e       	mov	r14, r24
    1852:	ff 24       	eor	r15, r15
    1854:	fe 2c       	mov	r15, r14
    1856:	ee 24       	eor	r14, r14
    1858:	f0 92 91 01 	sts	0x0191, r15
    185c:	e0 92 90 01 	sts	0x0190, r14
    1860:	63 e0       	ldi	r22, 0x03	; 3
    1862:	81 2f       	mov	r24, r17
    1864:	0e 94 ae 08 	call	0x115c	; 0x115c <i2creadreg>
    1868:	e8 0e       	add	r14, r24
    186a:	f1 1c       	adc	r15, r1
    186c:	f0 92 91 01 	sts	0x0191, r15
    1870:	e0 92 90 01 	sts	0x0190, r14
    1874:	c7 01       	movw	r24, r14
    1876:	1f 91       	pop	r17
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	08 95       	ret

0000187e <getCM>:
    187e:	ef 92       	push	r14
    1880:	ff 92       	push	r15
    1882:	1f 93       	push	r17
    1884:	18 2f       	mov	r17, r24
    1886:	41 e5       	ldi	r20, 0x51	; 81
    1888:	60 e0       	ldi	r22, 0x00	; 0
    188a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <i2cwritereg>
    188e:	88 ee       	ldi	r24, 0xE8	; 232
    1890:	93 e0       	ldi	r25, 0x03	; 3
    1892:	a0 e0       	ldi	r26, 0x00	; 0
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	80 93 58 01 	sts	0x0158, r24
    189a:	90 93 59 01 	sts	0x0159, r25
    189e:	a0 93 5a 01 	sts	0x015A, r26
    18a2:	b0 93 5b 01 	sts	0x015B, r27
    18a6:	62 e0       	ldi	r22, 0x02	; 2
    18a8:	81 2f       	mov	r24, r17
    18aa:	0e 94 ae 08 	call	0x115c	; 0x115c <i2creadreg>
    18ae:	e8 2e       	mov	r14, r24
    18b0:	ff 24       	eor	r15, r15
    18b2:	fe 2c       	mov	r15, r14
    18b4:	ee 24       	eor	r14, r14
    18b6:	f0 92 91 01 	sts	0x0191, r15
    18ba:	e0 92 90 01 	sts	0x0190, r14
    18be:	63 e0       	ldi	r22, 0x03	; 3
    18c0:	81 2f       	mov	r24, r17
    18c2:	0e 94 ae 08 	call	0x115c	; 0x115c <i2creadreg>
    18c6:	e8 0e       	add	r14, r24
    18c8:	f1 1c       	adc	r15, r1
    18ca:	f0 92 91 01 	sts	0x0191, r15
    18ce:	e0 92 90 01 	sts	0x0190, r14
    18d2:	c7 01       	movw	r24, r14
    18d4:	1f 91       	pop	r17
    18d6:	ff 90       	pop	r15
    18d8:	ef 90       	pop	r14
    18da:	08 95       	ret

000018dc <initcommsunit>:
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	88 e0       	ldi	r24, 0x08	; 8
    18e0:	0e 94 72 08 	call	0x10e4	; 0x10e4 <i2cinit>
    18e4:	08 95       	ret

000018e6 <atoi>:
    18e6:	fc 01       	movw	r30, r24
    18e8:	88 27       	eor	r24, r24
    18ea:	99 27       	eor	r25, r25
    18ec:	e8 94       	clt
    18ee:	21 91       	ld	r18, Z+
    18f0:	22 23       	and	r18, r18
    18f2:	f1 f0       	breq	.+60     	; 0x1930 <atoi+0x4a>
    18f4:	20 32       	cpi	r18, 0x20	; 32
    18f6:	d9 f3       	breq	.-10     	; 0x18ee <atoi+0x8>
    18f8:	29 30       	cpi	r18, 0x09	; 9
    18fa:	c9 f3       	breq	.-14     	; 0x18ee <atoi+0x8>
    18fc:	2a 30       	cpi	r18, 0x0A	; 10
    18fe:	b9 f3       	breq	.-18     	; 0x18ee <atoi+0x8>
    1900:	2c 30       	cpi	r18, 0x0C	; 12
    1902:	a9 f3       	breq	.-22     	; 0x18ee <atoi+0x8>
    1904:	2d 30       	cpi	r18, 0x0D	; 13
    1906:	99 f3       	breq	.-26     	; 0x18ee <atoi+0x8>
    1908:	26 37       	cpi	r18, 0x76	; 118
    190a:	89 f3       	breq	.-30     	; 0x18ee <atoi+0x8>
    190c:	2b 32       	cpi	r18, 0x2B	; 43
    190e:	19 f0       	breq	.+6      	; 0x1916 <atoi+0x30>
    1910:	2d 32       	cpi	r18, 0x2D	; 45
    1912:	21 f4       	brne	.+8      	; 0x191c <atoi+0x36>
    1914:	68 94       	set
    1916:	21 91       	ld	r18, Z+
    1918:	22 23       	and	r18, r18
    191a:	51 f0       	breq	.+20     	; 0x1930 <atoi+0x4a>
    191c:	20 33       	cpi	r18, 0x30	; 48
    191e:	44 f0       	brlt	.+16     	; 0x1930 <atoi+0x4a>
    1920:	2a 33       	cpi	r18, 0x3A	; 58
    1922:	34 f4       	brge	.+12     	; 0x1930 <atoi+0x4a>
    1924:	20 53       	subi	r18, 0x30	; 48
    1926:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__mulhi_const_10>
    192a:	82 0f       	add	r24, r18
    192c:	91 1d       	adc	r25, r1
    192e:	f3 cf       	rjmp	.-26     	; 0x1916 <atoi+0x30>
    1930:	81 15       	cp	r24, r1
    1932:	91 05       	cpc	r25, r1
    1934:	21 f0       	breq	.+8      	; 0x193e <atoi+0x58>
    1936:	1e f4       	brtc	.+6      	; 0x193e <atoi+0x58>
    1938:	80 95       	com	r24
    193a:	90 95       	com	r25
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	08 95       	ret

00001940 <strcpy>:
    1940:	fb 01       	movw	r30, r22
    1942:	dc 01       	movw	r26, r24
    1944:	01 90       	ld	r0, Z+
    1946:	0d 92       	st	X+, r0
    1948:	00 20       	and	r0, r0
    194a:	e1 f7       	brne	.-8      	; 0x1944 <strcpy+0x4>
    194c:	08 95       	ret

0000194e <strncmp>:
    194e:	fb 01       	movw	r30, r22
    1950:	dc 01       	movw	r26, r24
    1952:	41 50       	subi	r20, 0x01	; 1
    1954:	50 40       	sbci	r21, 0x00	; 0
    1956:	30 f0       	brcs	.+12     	; 0x1964 <strncmp+0x16>
    1958:	8d 91       	ld	r24, X+
    195a:	01 90       	ld	r0, Z+
    195c:	80 19       	sub	r24, r0
    195e:	19 f4       	brne	.+6      	; 0x1966 <strncmp+0x18>
    1960:	00 20       	and	r0, r0
    1962:	b9 f7       	brne	.-18     	; 0x1952 <strncmp+0x4>
    1964:	88 1b       	sub	r24, r24
    1966:	99 0b       	sbc	r25, r25
    1968:	08 95       	ret

0000196a <itoa>:
    196a:	fb 01       	movw	r30, r22
    196c:	9f 01       	movw	r18, r30
    196e:	e8 94       	clt
    1970:	42 30       	cpi	r20, 0x02	; 2
    1972:	c4 f0       	brlt	.+48     	; 0x19a4 <itoa+0x3a>
    1974:	45 32       	cpi	r20, 0x25	; 37
    1976:	b4 f4       	brge	.+44     	; 0x19a4 <itoa+0x3a>
    1978:	4a 30       	cpi	r20, 0x0A	; 10
    197a:	29 f4       	brne	.+10     	; 0x1986 <itoa+0x1c>
    197c:	97 fb       	bst	r25, 7
    197e:	1e f4       	brtc	.+6      	; 0x1986 <itoa+0x1c>
    1980:	90 95       	com	r25
    1982:	81 95       	neg	r24
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	64 2f       	mov	r22, r20
    1988:	77 27       	eor	r23, r23
    198a:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__udivmodhi4>
    198e:	80 5d       	subi	r24, 0xD0	; 208
    1990:	8a 33       	cpi	r24, 0x3A	; 58
    1992:	0c f0       	brlt	.+2      	; 0x1996 <itoa+0x2c>
    1994:	89 5d       	subi	r24, 0xD9	; 217
    1996:	81 93       	st	Z+, r24
    1998:	cb 01       	movw	r24, r22
    199a:	00 97       	sbiw	r24, 0x00	; 0
    199c:	a1 f7       	brne	.-24     	; 0x1986 <itoa+0x1c>
    199e:	16 f4       	brtc	.+4      	; 0x19a4 <itoa+0x3a>
    19a0:	5d e2       	ldi	r21, 0x2D	; 45
    19a2:	51 93       	st	Z+, r21
    19a4:	10 82       	st	Z, r1
    19a6:	c9 01       	movw	r24, r18
    19a8:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <strrev>

000019ac <__mulhi_const_10>:
    19ac:	7a e0       	ldi	r23, 0x0A	; 10
    19ae:	97 9f       	mul	r25, r23
    19b0:	90 2d       	mov	r25, r0
    19b2:	87 9f       	mul	r24, r23
    19b4:	80 2d       	mov	r24, r0
    19b6:	91 0d       	add	r25, r1
    19b8:	11 24       	eor	r1, r1
    19ba:	08 95       	ret

000019bc <strrev>:
    19bc:	dc 01       	movw	r26, r24
    19be:	fc 01       	movw	r30, r24
    19c0:	01 90       	ld	r0, Z+
    19c2:	00 20       	and	r0, r0
    19c4:	e9 f7       	brne	.-6      	; 0x19c0 <strrev+0x4>
    19c6:	32 97       	sbiw	r30, 0x02	; 2
    19c8:	ae 17       	cp	r26, r30
    19ca:	bf 07       	cpc	r27, r31
    19cc:	30 f4       	brcc	.+12     	; 0x19da <strrev+0x1e>
    19ce:	7c 91       	ld	r23, X
    19d0:	60 81       	ld	r22, Z
    19d2:	70 83       	st	Z, r23
    19d4:	31 97       	sbiw	r30, 0x01	; 1
    19d6:	6d 93       	st	X+, r22
    19d8:	f7 cf       	rjmp	.-18     	; 0x19c8 <strrev+0xc>
    19da:	08 95       	ret

000019dc <__udivmodhi4>:
    19dc:	aa 1b       	sub	r26, r26
    19de:	bb 1b       	sub	r27, r27
    19e0:	51 e1       	ldi	r21, 0x11	; 17
    19e2:	07 c0       	rjmp	.+14     	; 0x19f2 <__udivmodhi4_ep>

000019e4 <__udivmodhi4_loop>:
    19e4:	aa 1f       	adc	r26, r26
    19e6:	bb 1f       	adc	r27, r27
    19e8:	a6 17       	cp	r26, r22
    19ea:	b7 07       	cpc	r27, r23
    19ec:	10 f0       	brcs	.+4      	; 0x19f2 <__udivmodhi4_ep>
    19ee:	a6 1b       	sub	r26, r22
    19f0:	b7 0b       	sbc	r27, r23

000019f2 <__udivmodhi4_ep>:
    19f2:	88 1f       	adc	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	5a 95       	dec	r21
    19f8:	a9 f7       	brne	.-22     	; 0x19e4 <__udivmodhi4_loop>
    19fa:	80 95       	com	r24
    19fc:	90 95       	com	r25
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	08 95       	ret
