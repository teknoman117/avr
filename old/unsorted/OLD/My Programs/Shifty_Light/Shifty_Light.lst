
Shifty_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c6  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00800060  000000c6  0000015a  2**0
                  ALLOC
  3 .noinit       00000000  00800060  00800060  0000015a  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  0000015a  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000057  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000017a  00000000  00000000  000001c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000000a9  00000000  00000000  0000033f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000118  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000cf  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54
   4:	0c 94 45 00 	jmp	0x8a
   8:	0c 94 45 00 	jmp	0x8a
   c:	0c 94 45 00 	jmp	0x8a
  10:	0c 94 45 00 	jmp	0x8a
  14:	0c 94 45 00 	jmp	0x8a
  18:	0c 94 45 00 	jmp	0x8a
  1c:	0c 94 45 00 	jmp	0x8a
  20:	0c 94 45 00 	jmp	0x8a
  24:	0c 94 45 00 	jmp	0x8a
  28:	0c 94 45 00 	jmp	0x8a
  2c:	0c 94 45 00 	jmp	0x8a
  30:	0c 94 45 00 	jmp	0x8a
  34:	0c 94 45 00 	jmp	0x8a
  38:	0c 94 45 00 	jmp	0x8a
  3c:	0c 94 45 00 	jmp	0x8a
  40:	0c 94 45 00 	jmp	0x8a
  44:	0c 94 45 00 	jmp	0x8a
  48:	0c 94 45 00 	jmp	0x8a
  4c:	0c 94 45 00 	jmp	0x8a
  50:	0c 94 45 00 	jmp	0x8a

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e
  86:	0c 94 4f 00 	jmp	0x9e

0000008a <__bad_interrupt>:
  8a:	0c 94 00 00 	jmp	0x0

0000008e <set_port_a>:
#include <avr/io.h>

void set_port_a(int value)
{
  PORTA = value;
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	08 95       	ret

00000092 <set_port_b>:
}
void set_port_b(int value)
{
  PORTB = value;
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <set_port_c>:
}
void set_port_c(int value)
{
  PORTC = value;
  96:	85 bb       	out	0x15, r24	; 21
  98:	08 95       	ret

0000009a <set_port_d>:
}
void set_port_d(int value)
{
  PORTD = value;
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret

0000009e <main>:
#include <avr/led_blink.h>
#include <avr/delay.h>

void main(void)
{
  9e:	cf e5       	ldi	r28, 0x5F	; 95
  a0:	d8 e0       	ldi	r29, 0x08	; 8
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61
  int x;
  int counter;
  x = 1;
  while (1)
  {
    set_port_c(x);
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 4b 00 	call	0x96
	x << 1;
	counter = 0;
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
    milliseconds can be achieved.
 */
static __inline__ void
_delay_loop_2(uint16_t __count)
{
  b2:	80 e3       	ldi	r24, 0x30	; 48
  b4:	95 e7       	ldi	r25, 0x75	; 117
	__asm__ volatile (
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6
	while (counter != 5)
	{
	  _delay_loop_2(30000);
	  counter ++;
  ba:	2f 5f       	subi	r18, 0xFF	; 255
  bc:	3f 4f       	sbci	r19, 0xFF	; 255
  be:	25 30       	cpi	r18, 0x05	; 5
  c0:	31 05       	cpc	r19, r1
  c2:	b9 f7       	brne	.-18     	; 0xb2
  c4:	f0 cf       	rjmp	.-32     	; 0xa6
