Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_divmodhi4.o)
                              flashfs.o (__divmodhi4)
/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o (exit)
/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
                              flashfs.o (__do_copy_data)
/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
                              flashfs.o (__do_clear_bss)
/usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_udivmodhi4.o)
                              /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_divmodhi4.o) (__udivmodhi4)
/usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o)
                              stdusart0.o (fdevopen)
/usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)
                              /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o) (__iob)
/usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o)
                              /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o) (calloc)
/usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
                              /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o) (malloc)
/usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(memset.o)
                              /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o) (memset)

Allocating common symbols
Common symbol       size              file

__brkval            0x2               /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
__flp               0x2               /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
window              0x200             flashfs.o
__iob               0x6               /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
LOAD /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libm.a
LOAD flashfs.o
LOAD mmc.o
LOAD spi.o
LOAD stdusart0.o
LOAD /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x8ac
 *(.vectors)
 .vectors       0x0000000000000000       0x70 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x0000000000000070                . = ALIGN (0x2)
                0x0000000000000070                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x0000000000000070        0x0 linker stubs
 *(.trampolines*)
                0x0000000000000070                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x0000000000000070                __ctors_start = .
 *(.ctors)
                0x0000000000000070                __ctors_end = .
                0x0000000000000070                __dtors_start = .
 *(.dtors)
                0x0000000000000070                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x0000000000000070        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
                0x0000000000000070                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x0000000000000070        0xc /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x000000000000007c       0x16 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
                0x000000000000007c                __do_copy_data
 .init4         0x0000000000000092       0x10 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
                0x0000000000000092                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000a2        0x8 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
 *(.init9)
 *(.text)
 .text          0x00000000000000aa        0x4 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
                0x00000000000000aa                __vector_22
                0x00000000000000aa                __vector_1
                0x00000000000000aa                __vector_24
                0x00000000000000aa                __vector_12
                0x00000000000000aa                __bad_interrupt
                0x00000000000000aa                __vector_6
                0x00000000000000aa                __vector_3
                0x00000000000000aa                __vector_23
                0x00000000000000aa                __vector_25
                0x00000000000000aa                __vector_11
                0x00000000000000aa                __vector_13
                0x00000000000000aa                __vector_17
                0x00000000000000aa                __vector_19
                0x00000000000000aa                __vector_7
                0x00000000000000aa                __vector_27
                0x00000000000000aa                __vector_5
                0x00000000000000aa                __vector_4
                0x00000000000000aa                __vector_9
                0x00000000000000aa                __vector_2
                0x00000000000000aa                __vector_21
                0x00000000000000aa                __vector_15
                0x00000000000000aa                __vector_8
                0x00000000000000aa                __vector_26
                0x00000000000000aa                __vector_14
                0x00000000000000aa                __vector_10
                0x00000000000000aa                __vector_16
                0x00000000000000aa                __vector_18
                0x00000000000000aa                __vector_20
 .text          0x00000000000000ae      0x1d2 flashfs.o
                0x00000000000000ae                close_flashfile
                0x00000000000000b6                open_flashfile
                0x0000000000000146                get_flashfile
                0x00000000000001d2                put_flashfile
                0x00000000000000b0                main
 .text          0x0000000000000280      0x28a mmc.o
                0x00000000000004c4                init_mmc
                0x0000000000000280                mmc_command
                0x0000000000000436                mmc_readblock
                0x00000000000002dc                mmc_writeblock
                0x000000000000038a                mmc_readpartialblock
 .text          0x000000000000050a       0x2a spi.o
                0x0000000000000528                spi_transfer
                0x000000000000050a                init_spi
 .text          0x0000000000000534       0x44 stdusart0.o
                0x0000000000000558                init_stdusart0
                0x0000000000000548                rxb0
                0x0000000000000534                txb0
 .text          0x0000000000000578        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_divmodhi4.o)
 .text          0x0000000000000578        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000578        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000578        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .text          0x0000000000000578        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_udivmodhi4.o)
 .text          0x0000000000000578       0x98 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o)
                0x0000000000000578                fdevopen
 .text          0x0000000000000610        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)
 .text          0x0000000000000610       0x38 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o)
                0x0000000000000610                calloc
 .text          0x0000000000000648      0x204 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
                0x0000000000000648                malloc
                0x000000000000079c                free
 .text          0x000000000000084c        0xe /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(memset.o)
                0x000000000000084c                memset
                0x000000000000085a                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc   0x000000000000085a       0x26 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_divmodhi4.o)
                0x000000000000085a                __divmodhi4
                0x000000000000085a                _div
 .text.libgcc   0x0000000000000880        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000880        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000880        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000880       0x28 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_udivmodhi4.o)
                0x0000000000000880                __udivmodhi4
                0x00000000000008a8                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000008a8        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
                0x00000000000008a8                exit
                0x00000000000008a8                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000008a8        0x4 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000008ac                _etext = .

.data           0x0000000000800100        0x6 load address 0x00000000000008ac
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
 .data          0x0000000000800100        0x0 flashfs.o
 .data          0x0000000000800100        0x0 mmc.o
 .data          0x0000000000800100        0x0 spi.o
 .data          0x0000000000800100        0x0 stdusart0.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_divmodhi4.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_udivmodhi4.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o)
 .data          0x0000000000800100        0x6 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
                0x0000000000800102                __malloc_heap_start
                0x0000000000800104                __malloc_heap_end
                0x0000000000800100                __malloc_margin
 .data          0x0000000000800106        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(memset.o)
 *(.data*)
 *(.rodata)
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800106                . = ALIGN (0x2)
                0x0000000000800106                _edata = .
                0x0000000000800106                PROVIDE (__data_end, .)

.bss            0x0000000000800106      0x20e load address 0x00000000000008b2
                0x0000000000800106                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800106        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
 .bss           0x0000000000800106        0x4 flashfs.o
                0x0000000000800106                cpointer
 .bss           0x000000000080010a        0x0 mmc.o
 .bss           0x000000000080010a        0x0 spi.o
 .bss           0x000000000080010a        0x0 stdusart0.o
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_divmodhi4.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_exit.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_copy_data.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_clear_bss.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/avr5/libgcc.a(_udivmodhi4.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
 .bss           0x000000000080010a        0x0 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(memset.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x000000000080010a      0x200 flashfs.o
                0x000000000080010a                window
 COMMON         0x000000000080030a        0x6 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)
                0x000000000080030a                __iob
 COMMON         0x0000000000800310        0x4 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
                0x0000000000800310                __brkval
                0x0000000000800312                __flp
                0x0000000000800314                PROVIDE (__bss_end, .)
                0x00000000000008ac                __data_load_start = LOADADDR (.data)
                0x00000000000008b2                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x0000000000800314        0x0
                0x0000000000800314                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x0000000000800314                PROVIDE (__noinit_end, .)
                0x0000000000800314                _end = .
                0x0000000000800314                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x2514
 *(.stab)
 .stab          0x0000000000000000      0x6b4 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o
 .stab          0x00000000000006b4      0x6cc flashfs.o
                                        0x6d8 (size before relaxing)
 .stab          0x0000000000000d80      0x5d0 mmc.o
                                        0x780 (size before relaxing)
 .stab          0x0000000000001350      0x240 spi.o
                                        0x408 (size before relaxing)
 .stab          0x0000000000001590      0x2b8 stdusart0.o
                                        0x4c8 (size before relaxing)
 .stab          0x0000000000001848      0x48c /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(fdevopen.o)
                                        0x498 (size before relaxing)
 .stab          0x0000000000001cd4      0x12c /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(iob.o)
                                        0x30c (size before relaxing)
 .stab          0x0000000000001e00      0x198 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(calloc.o)
                                        0x1d4 (size before relaxing)
 .stab          0x0000000000001f98      0x510 /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(malloc.o)
                                        0x6f0 (size before relaxing)
 .stab          0x00000000000024a8       0x6c /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/libc.a(memset.o)
                                         0x78 (size before relaxing)

.stabstr        0x0000000000000000     0x145b
 *(.stabstr)
 .stabstr       0x0000000000000000     0x145b /usr/lib/gcc/avr/4.3.3/../../../avr/lib/avr5/crtm644.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment
 *(.comment)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(FlashFS.out elf32-avr)
LOAD linker stubs
