GAS LISTING /tmp/ccgIwf4b.s 			page 1


   1               		.file	"a2d.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.global __do_copy_data
   9               		.global __do_clear_bss
  10               		.stabs	"/home/robotdude/Projects/AVR_Projects/templight_logger/",100,0,2,.Ltext0
  11               		.stabs	"a2d.c",100,0,2,.Ltext0
  12               		.text
  13               	.Ltext0:
  14               		.stabs	"gcc2_compiled.",60,0,0,0
  15               		.stabs	"int:t(0,1)=r(0,1);-32768;32767;",128,0,1,0
  16               		.stabs	"char:t(0,2)=@s8;r(0,2);0;255;",128,0,1,0
  17               		.stabs	"long int:t(0,3)=@s32;r(0,3);020000000000;017777777777;",128,0,1,0
  18               		.stabs	"unsigned int:t(0,4)=r(0,4);0;0177777;",128,0,1,0
  19               		.stabs	"long unsigned int:t(0,5)=@s32;r(0,5);0;037777777777;",128,0,1,0
  20               		.stabs	"long long int:t(0,6)=@s64;r(0,6);01000000000000000000000;0777777777777777777777;",128,0,1,
  21               		.stabs	"long long unsigned int:t(0,7)=@s64;r(0,7);0;01777777777777777777777;",128,0,1,0
  22               		.stabs	"short int:t(0,8)=r(0,8);-32768;32767;",128,0,1,0
  23               		.stabs	"short unsigned int:t(0,9)=r(0,9);0;0177777;",128,0,1,0
  24               		.stabs	"signed char:t(0,10)=@s8;r(0,10);-128;127;",128,0,1,0
  25               		.stabs	"unsigned char:t(0,11)=@s8;r(0,11);0;255;",128,0,1,0
  26               		.stabs	"float:t(0,12)=r(0,1);4;0;",128,0,1,0
  27               		.stabs	"double:t(0,13)=r(0,1);4;0;",128,0,1,0
  28               		.stabs	"long double:t(0,14)=r(0,1);4;0;",128,0,1,0
  29               		.stabs	"void:t(0,15)=(0,15)",128,0,1,0
  30               		.stabs	"a2d.h",130,0,0,0
  31               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/avr/io.h",130,0,0,0
  32               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/avr/sfr_defs.h",130,0,0,0
  33               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/inttypes.h",130,0,0,0
  34               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/stdint.h",130,0,0,0
  35               		.stabs	"int8_t:t(5,1)=(0,10)",128,0,121,0
  36               		.stabs	"uint8_t:t(5,2)=(0,11)",128,0,122,0
  37               		.stabs	"int16_t:t(5,3)=(0,1)",128,0,123,0
  38               		.stabs	"uint16_t:t(5,4)=(0,4)",128,0,124,0
  39               		.stabs	"int32_t:t(5,5)=(0,3)",128,0,125,0
  40               		.stabs	"uint32_t:t(5,6)=(0,5)",128,0,126,0
  41               		.stabs	"int64_t:t(5,7)=(0,6)",128,0,128,0
  42               		.stabs	"uint64_t:t(5,8)=(0,7)",128,0,129,0
  43               		.stabs	"intptr_t:t(5,9)=(5,3)",128,0,142,0
  44               		.stabs	"uintptr_t:t(5,10)=(5,4)",128,0,147,0
  45               		.stabs	"int_least8_t:t(5,11)=(5,1)",128,0,159,0
  46               		.stabs	"uint_least8_t:t(5,12)=(5,2)",128,0,164,0
  47               		.stabs	"int_least16_t:t(5,13)=(5,3)",128,0,169,0
  48               		.stabs	"uint_least16_t:t(5,14)=(5,4)",128,0,174,0
  49               		.stabs	"int_least32_t:t(5,15)=(5,5)",128,0,179,0
  50               		.stabs	"uint_least32_t:t(5,16)=(5,6)",128,0,184,0
  51               		.stabs	"int_least64_t:t(5,17)=(5,7)",128,0,192,0
  52               		.stabs	"uint_least64_t:t(5,18)=(5,8)",128,0,199,0
  53               		.stabs	"int_fast8_t:t(5,19)=(5,1)",128,0,213,0
  54               		.stabs	"uint_fast8_t:t(5,20)=(5,2)",128,0,218,0
  55               		.stabs	"int_fast16_t:t(5,21)=(5,3)",128,0,223,0
  56               		.stabs	"uint_fast16_t:t(5,22)=(5,4)",128,0,228,0
  57               		.stabs	"int_fast32_t:t(5,23)=(5,5)",128,0,233,0
GAS LISTING /tmp/ccgIwf4b.s 			page 2


  58               		.stabs	"uint_fast32_t:t(5,24)=(5,6)",128,0,238,0
  59               		.stabs	"int_fast64_t:t(5,25)=(5,7)",128,0,246,0
  60               		.stabs	"uint_fast64_t:t(5,26)=(5,8)",128,0,253,0
  61               		.stabs	"intmax_t:t(5,27)=(5,7)",128,0,273,0
  62               		.stabs	"uintmax_t:t(5,28)=(5,8)",128,0,278,0
  63               		.stabn	162,0,0,0
  64               		.stabs	"int_farptr_t:t(4,1)=(5,5)",128,0,77,0
  65               		.stabs	"uint_farptr_t:t(4,2)=(5,6)",128,0,81,0
  66               		.stabn	162,0,0,0
  67               		.stabn	162,0,0,0
  68               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/avr/fuse.h",130,0,0,0
  69               		.stabs	"__fuse_t:t(6,1)=(6,2)=s3low:(0,11),0,8;high:(0,11),8,8;extended:(0,11),16,8;;",128,0,219,0
  70               		.stabn	162,0,0,0
  71               		.stabn	162,0,0,0
  72               		.stabn	162,0,0,0
  73               		.stabs	"initADC:F(0,15)",36,0,30,initADC
  74               	.global	initADC
  75               		.type	initADC, @function
  76               	initADC:
  77               		.stabd	46,0,0
   1:a2d.c         **** /*
   2:a2d.c         ****  *      a2d.c
   3:a2d.c         ****  *      
   4:a2d.c         ****  *      Copyright 2009 Nathaniel Robert Lewis <linux.robotdude@gmail.com>
   5:a2d.c         ****  *      
   6:a2d.c         ****  *      This program is free software; you can redistribute it and/or modify
   7:a2d.c         ****  *      it under the terms of the GNU General Public License as published by
   8:a2d.c         ****  *      the Free Software Foundation; either version 2 of the License, or
   9:a2d.c         ****  *      (at your option) any later version.
  10:a2d.c         ****  *      
  11:a2d.c         ****  *      This program is distributed in the hope that it will be useful,
  12:a2d.c         ****  *      but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:a2d.c         ****  *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:a2d.c         ****  *      GNU General Public License for more details.
  15:a2d.c         ****  *      
  16:a2d.c         ****  *      You should have received a copy of the GNU General Public License
  17:a2d.c         ****  *      along with this program; if not, write to the Free Software
  18:a2d.c         ****  *      Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
  19:a2d.c         ****  *      MA 02110-1301, USA.
  20:a2d.c         ****  *
  21:a2d.c         ****  *      This header controls the analog comparator on the atmega chips  
  22:a2d.c         ****  *      Example:
  23:a2d.c         ****  *          initADC();               //init the adc
  24:a2d.c         ****  *          uint16_t val = getADC(2);  //get the 10 bit output of adc channel 2 and put it in val
  25:a2d.c         ****  */
  26:a2d.c         **** 
  27:a2d.c         **** #include "a2d.h"
  28:a2d.c         **** #include <util/delay.h>
  29:a2d.c         **** 
  30:a2d.c         **** void initADC(void) {
  78               		.stabn	68,0,30,.LM0-.LFBB1
  79               	.LM0:
  80               	.LFBB1:
  81               	/* prologue: function */
  82               	/* frame size = 0 */
  31:a2d.c         ****     DIDR0 = 0xFF;             //shut down all digital input on that port
  83               		.stabn	68,0,31,.LM1-.LFBB1
GAS LISTING /tmp/ccgIwf4b.s 			page 3


  84               	.LM1:
  85 0000 8FEF      		ldi r24,lo8(-1)
  86 0002 8093 7E00 		sts 126,r24
  32:a2d.c         ****     ADCSRA = ( 1 << ADEN  ) | ( 1 << ADSC  ) | ADC_PRESCALE; //enable the a2d converter
  87               		.stabn	68,0,32,.LM2-.LFBB1
  88               	.LM2:
  89 0006 86EC      		ldi r24,lo8(-58)
  90 0008 8093 7A00 		sts 122,r24
  91               	.L2:
  33:a2d.c         ****     while ( ADCSRA & ( 1 << ADSC ) );                        //do a dummy conversion
  92               		.stabn	68,0,33,.LM3-.LFBB1
  93               	.LM3:
  94 000c 8091 7A00 		lds r24,122
  95 0010 86FD      		sbrc r24,6
  96 0012 00C0      		rjmp .L2
  97               	/* epilogue start */
  34:a2d.c         **** }
  98               		.stabn	68,0,34,.LM4-.LFBB1
  99               	.LM4:
 100 0014 0895      		ret
 101               		.size	initADC, .-initADC
 102               	.Lscope1:
 103               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 104               		.stabd	78,0,0
 105               		.stabs	"getADC:F(5,4)",36,0,36,getADC
 106               		.stabs	"channel:P(5,2)",64,0,36,24
 107               	.global	getADC
 108               		.type	getADC, @function
 109               	getADC:
 110               		.stabd	46,0,0
  35:a2d.c         **** 
  36:a2d.c         **** uint16_t getADC(uint8_t channel) {
 111               		.stabn	68,0,36,.LM5-.LFBB2
 112               	.LM5:
 113               	.LFBB2:
 114               	/* prologue: function */
 115               	/* frame size = 0 */
  37:a2d.c         ****     ADMUX  = ( 1 << REFS0 ) | channel;      //set up the multiplexer to select desired a2d pin  
 116               		.stabn	68,0,37,.LM6-.LFBB2
 117               	.LM6:
 118 0016 8064      		ori r24,lo8(64)
 119 0018 8093 7C00 		sts 124,r24
  38:a2d.c         ****     ADCSRA |=  ( 1 << ADSC  );              //start the conversion
 120               		.stabn	68,0,38,.LM7-.LFBB2
 121               	.LM7:
 122 001c 8091 7A00 		lds r24,122
 123 0020 8064      		ori r24,lo8(64)
 124 0022 8093 7A00 		sts 122,r24
 125               	.LBB34:
 126               	.LBB35:
 127               	.LBB36:
 128               	.LBB37:
 129               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext1
 130               	.Ltext1:
   1:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    All rights reserved.
GAS LISTING /tmp/ccgIwf4b.s 			page 4


   4:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
   5:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h,v 1.1 2007/05/13 21:23:20 joerg_wunsch Exp $ */
  33:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** /** \file */
  40:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  41:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     \code
  42:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  43:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     \endcode
  44:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  45:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  46:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  47:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  48:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  49:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  50:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  51:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  52:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  53:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  54:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  55:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  56:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  57:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  58:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  59:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  60:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
GAS LISTING /tmp/ccgIwf4b.s 			page 5


  61:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  62:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** */
  63:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  64:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  65:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  66:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  67:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** #endif
  68:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 131               		.stabn	68,0,83,.LM8-.LFBB2
 132               	.LM8:
 133 0026 8BEE      		ldi r24,lo8(-21)
 134               	/* #APP */
 135               	 ;  83 "/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h" 1
 136 0028 8A95      		1: dec r24
 137 002a 01F4      		brne 1b
 138               	 ;  0 "" 2
 139               	/* #NOAPP */
 140               	.L6:
 141               	.LBE37:
 142               	.LBE36:
 143               	.LBE35:
 144               	.LBE34:
 145               		.stabs	"a2d.c",132,0,0,.Ltext2
 146               	.Ltext2:
  39:a2d.c         ****     _delay_us(64);                          //wait 64 microseconds for the flag to register that it
  40:a2d.c         ****     while ( ADCSRA & ( 1 << ADSC ) );       //wait until done
 147               		.stabn	68,0,40,.LM9-.LFBB2
 148               	.LM9:
 149 002c 8091 7A00 		lds r24,122
 150 0030 86FD      		sbrc r24,6
 151 0032 00C0      		rjmp .L6
  41:a2d.c         ****     return ADC;                             //return the 10 bit a2d value
 152               		.stabn	68,0,41,.LM10-.LFBB2
 153               	.LM10:
 154 0034 2091 7800 		lds r18,120
 155 0038 3091 7900 		lds r19,(120)+1
  42:a2d.c         **** }
 156               		.stabn	68,0,42,.LM11-.LFBB2
 157               	.LM11:
 158 003c C901      		movw r24,r18
 159               	/* epilogue start */
 160 003e 0895      		ret
GAS LISTING /tmp/ccgIwf4b.s 			page 6


 161               		.size	getADC, .-getADC
 162               	.Lscope2:
 163               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 164               		.stabd	78,0,0
 165               		.stabs	"getADC8:F(5,2)",36,0,44,getADC8
 166               		.stabs	"channel:P(5,2)",64,0,44,24
 167               	.global	getADC8
 168               		.type	getADC8, @function
 169               	getADC8:
 170               		.stabd	46,0,0
  43:a2d.c         **** 
  44:a2d.c         **** uint8_t getADC8 ( uint8_t channel ) {
 171               		.stabn	68,0,44,.LM12-.LFBB3
 172               	.LM12:
 173               	.LFBB3:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	.LBB38:
 177               	.LBB39:
 178               		.stabn	68,0,37,.LM13-.LFBB3
 179               	.LM13:
 180 0040 8064      		ori r24,lo8(64)
 181 0042 8093 7C00 		sts 124,r24
 182               		.stabn	68,0,38,.LM14-.LFBB3
 183               	.LM14:
 184 0046 8091 7A00 		lds r24,122
 185 004a 8064      		ori r24,lo8(64)
 186 004c 8093 7A00 		sts 122,r24
 187               	.LBB40:
 188               	.LBB41:
 189               	.LBB42:
 190               	.LBB43:
 191               		.stabs	"/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h",132,0,0,.Ltext3
 192               	.Ltext3:
 193               		.stabn	68,0,83,.LM15-.LFBB3
 194               	.LM15:
 195 0050 8BEE      		ldi r24,lo8(-21)
 196               	/* #APP */
 197               	 ;  83 "/usr/lib/gcc/avr/4.3.3/../../../avr/include/util/delay_basic.h" 1
 198 0052 8A95      		1: dec r24
 199 0054 01F4      		brne 1b
 200               	 ;  0 "" 2
 201               	/* #NOAPP */
 202               	.L10:
 203               	.LBE43:
 204               	.LBE42:
 205               	.LBE41:
 206               	.LBE40:
 207               		.stabs	"a2d.c",132,0,0,.Ltext4
 208               	.Ltext4:
 209               		.stabn	68,0,40,.LM16-.LFBB3
 210               	.LM16:
 211 0056 8091 7A00 		lds r24,122
 212 005a 86FD      		sbrc r24,6
 213 005c 00C0      		rjmp .L10
 214               		.stabn	68,0,41,.LM17-.LFBB3
 215               	.LM17:
GAS LISTING /tmp/ccgIwf4b.s 			page 7


 216 005e 8091 7800 		lds r24,120
 217 0062 9091 7900 		lds r25,(120)+1
 218 0066 9695      		lsr r25
 219 0068 8795      		ror r24
 220 006a 9695      		lsr r25
 221 006c 8795      		ror r24
 222               	/* epilogue start */
 223               	.LBE39:
 224               	.LBE38:
  45:a2d.c         **** 	uint16_t o = getADC(channel);
  46:a2d.c         **** 	o >>= 2;
  47:a2d.c         **** 	return (o & 0xFF);
  48:a2d.c         **** }
 225               		.stabn	68,0,48,.LM18-.LFBB3
 226               	.LM18:
 227 006e 0895      		ret
 228               		.size	getADC8, .-getADC8
 229               	.Lscope3:
 230               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 231               		.stabd	78,0,0
 232               		.stabs	"",100,0,0,.Letext0
 233               	.Letext0:
GAS LISTING /tmp/ccgIwf4b.s 			page 8


DEFINED SYMBOLS
                            *ABS*:0000000000000000 a2d.c
     /tmp/ccgIwf4b.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccgIwf4b.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccgIwf4b.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccgIwf4b.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccgIwf4b.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccgIwf4b.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccgIwf4b.s:76     .text:0000000000000000 initADC
     /tmp/ccgIwf4b.s:109    .text:0000000000000016 getADC
     /tmp/ccgIwf4b.s:169    .text:0000000000000040 getADC8

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
