
qenc_simulator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000061c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000061c  00000690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e54  00000000  00000000  00000690  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e59  00000000  00000000  000024e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000333d  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00003350  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000008f  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000014  00000000  00000000  000033ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000065  00000000  00000000  00003413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	f5 c2       	rjmp	.+1514   	; 0x618 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <util/delay.h>
#include <avr/iotnx5.h>

// Simulate a quadrature encoder pulse chain
int main ()
{
  30:	cf 93       	push	r28
  32:	df 93       	push	r29
  34:	cd b7       	in	r28, 0x3d	; 61
  36:	de b7       	in	r29, 0x3e	; 62
  38:	e8 97       	sbiw	r28, 0x38	; 56
  3a:	0f b6       	in	r0, 0x3f	; 63
  3c:	f8 94       	cli
  3e:	de bf       	out	0x3e, r29	; 62
  40:	0f be       	out	0x3f, r0	; 63
  42:	cd bf       	out	0x3d, r28	; 61
    // Set DDRs for sonar
	DDRB |=  (1 << PORTB0);  // qenc.cha
  44:	87 e3       	ldi	r24, 0x37	; 55
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	27 e3       	ldi	r18, 0x37	; 55
  4a:	30 e0       	ldi	r19, 0x00	; 0
  4c:	f9 01       	movw	r30, r18
  4e:	20 81       	ld	r18, Z
  50:	21 60       	ori	r18, 0x01	; 1
  52:	fc 01       	movw	r30, r24
  54:	20 83       	st	Z, r18
	DDRB |=  (1 << PORTB1);  // qenc.chb
  56:	87 e3       	ldi	r24, 0x37	; 55
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	27 e3       	ldi	r18, 0x37	; 55
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	f9 01       	movw	r30, r18
  60:	20 81       	ld	r18, Z
  62:	22 60       	ori	r18, 0x02	; 2
  64:	fc 01       	movw	r30, r24
  66:	20 83       	st	Z, r18

	// Loop forever
	while (1)
	{
		// Set state to 0,0
		PORTB = 0;
  68:	88 e3       	ldi	r24, 0x38	; 56
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	fc 01       	movw	r30, r24
  6e:	10 82       	st	Z, r1
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	a8 ec       	ldi	r26, 0xC8	; 200
  76:	b2 e4       	ldi	r27, 0x42	; 66
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	9a 83       	std	Y+2, r25	; 0x02
  7c:	ab 83       	std	Y+3, r26	; 0x03
  7e:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	4a ef       	ldi	r20, 0xFA	; 250
  86:	54 e4       	ldi	r21, 0x44	; 68
  88:	69 81       	ldd	r22, Y+1	; 0x01
  8a:	7a 81       	ldd	r23, Y+2	; 0x02
  8c:	8b 81       	ldd	r24, Y+3	; 0x03
  8e:	9c 81       	ldd	r25, Y+4	; 0x04
  90:	30 d2       	rcall	.+1120   	; 0x4f2 <__mulsf3>
  92:	dc 01       	movw	r26, r24
  94:	cb 01       	movw	r24, r22
  96:	8d 83       	std	Y+5, r24	; 0x05
  98:	9e 83       	std	Y+6, r25	; 0x06
  9a:	af 83       	std	Y+7, r26	; 0x07
  9c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 e8       	ldi	r20, 0x80	; 128
  a4:	5f e3       	ldi	r21, 0x3F	; 63
  a6:	6d 81       	ldd	r22, Y+5	; 0x05
  a8:	7e 81       	ldd	r23, Y+6	; 0x06
  aa:	8f 81       	ldd	r24, Y+7	; 0x07
  ac:	98 85       	ldd	r25, Y+8	; 0x08
  ae:	a0 d1       	rcall	.+832    	; 0x3f0 <__cmpsf2>
  b0:	88 23       	and	r24, r24
  b2:	2c f4       	brge	.+10     	; 0xbe <__SREG__+0x7f>
		__ticks = 1;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	9a 87       	std	Y+10, r25	; 0x0a
  ba:	89 87       	std	Y+9, r24	; 0x09
  bc:	3b c0       	rjmp	.+118    	; 0x134 <__SREG__+0xf5>
	else if (__tmp > 65535)
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	3f ef       	ldi	r19, 0xFF	; 255
  c2:	4f e7       	ldi	r20, 0x7F	; 127
  c4:	57 e4       	ldi	r21, 0x47	; 71
  c6:	6d 81       	ldd	r22, Y+5	; 0x05
  c8:	7e 81       	ldd	r23, Y+6	; 0x06
  ca:	8f 81       	ldd	r24, Y+7	; 0x07
  cc:	98 85       	ldd	r25, Y+8	; 0x08
  ce:	0d d2       	rcall	.+1050   	; 0x4ea <__gesf2>
  d0:	18 16       	cp	r1, r24
  d2:	3c f5       	brge	.+78     	; 0x122 <__SREG__+0xe3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
  d4:	20 e0       	ldi	r18, 0x00	; 0
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	40 e2       	ldi	r20, 0x20	; 32
  da:	51 e4       	ldi	r21, 0x41	; 65
  dc:	69 81       	ldd	r22, Y+1	; 0x01
  de:	7a 81       	ldd	r23, Y+2	; 0x02
  e0:	8b 81       	ldd	r24, Y+3	; 0x03
  e2:	9c 81       	ldd	r25, Y+4	; 0x04
  e4:	06 d2       	rcall	.+1036   	; 0x4f2 <__mulsf3>
  e6:	dc 01       	movw	r26, r24
  e8:	cb 01       	movw	r24, r22
  ea:	bc 01       	movw	r22, r24
  ec:	cd 01       	movw	r24, r26
  ee:	84 d1       	rcall	.+776    	; 0x3f8 <__fixunssfsi>
  f0:	dc 01       	movw	r26, r24
  f2:	cb 01       	movw	r24, r22
  f4:	9a 87       	std	Y+10, r25	; 0x0a
  f6:	89 87       	std	Y+9, r24	; 0x09
  f8:	0f c0       	rjmp	.+30     	; 0x118 <__SREG__+0xd9>
  fa:	88 ec       	ldi	r24, 0xC8	; 200
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9c 87       	std	Y+12, r25	; 0x0c
 100:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 102:	8b 85       	ldd	r24, Y+11	; 0x0b
 104:	9c 85       	ldd	r25, Y+12	; 0x0c
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <__SREG__+0xc7>
 10a:	9c 87       	std	Y+12, r25	; 0x0c
 10c:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 10e:	89 85       	ldd	r24, Y+9	; 0x09
 110:	9a 85       	ldd	r25, Y+10	; 0x0a
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	9a 87       	std	Y+10, r25	; 0x0a
 116:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 118:	89 85       	ldd	r24, Y+9	; 0x09
 11a:	9a 85       	ldd	r25, Y+10	; 0x0a
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	69 f7       	brne	.-38     	; 0xfa <__SREG__+0xbb>
 120:	13 c0       	rjmp	.+38     	; 0x148 <__SREG__+0x109>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 122:	6d 81       	ldd	r22, Y+5	; 0x05
 124:	7e 81       	ldd	r23, Y+6	; 0x06
 126:	8f 81       	ldd	r24, Y+7	; 0x07
 128:	98 85       	ldd	r25, Y+8	; 0x08
 12a:	66 d1       	rcall	.+716    	; 0x3f8 <__fixunssfsi>
 12c:	dc 01       	movw	r26, r24
 12e:	cb 01       	movw	r24, r22
 130:	9a 87       	std	Y+10, r25	; 0x0a
 132:	89 87       	std	Y+9, r24	; 0x09
 134:	89 85       	ldd	r24, Y+9	; 0x09
 136:	9a 85       	ldd	r25, Y+10	; 0x0a
 138:	9e 87       	std	Y+14, r25	; 0x0e
 13a:	8d 87       	std	Y+13, r24	; 0x0d
 13c:	8d 85       	ldd	r24, Y+13	; 0x0d
 13e:	9e 85       	ldd	r25, Y+14	; 0x0e
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <__SREG__+0x101>
 144:	9e 87       	std	Y+14, r25	; 0x0e
 146:	8d 87       	std	Y+13, r24	; 0x0d
		_delay_ms(100);

		// Set state to 1,0
		PORTB = 2;
 148:	88 e3       	ldi	r24, 0x38	; 56
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	22 e0       	ldi	r18, 0x02	; 2
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	a8 ec       	ldi	r26, 0xC8	; 200
 158:	b2 e4       	ldi	r27, 0x42	; 66
 15a:	8f 87       	std	Y+15, r24	; 0x0f
 15c:	98 8b       	std	Y+16, r25	; 0x10
 15e:	a9 8b       	std	Y+17, r26	; 0x11
 160:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	4a ef       	ldi	r20, 0xFA	; 250
 168:	54 e4       	ldi	r21, 0x44	; 68
 16a:	6f 85       	ldd	r22, Y+15	; 0x0f
 16c:	78 89       	ldd	r23, Y+16	; 0x10
 16e:	89 89       	ldd	r24, Y+17	; 0x11
 170:	9a 89       	ldd	r25, Y+18	; 0x12
 172:	bf d1       	rcall	.+894    	; 0x4f2 <__mulsf3>
 174:	dc 01       	movw	r26, r24
 176:	cb 01       	movw	r24, r22
 178:	8b 8b       	std	Y+19, r24	; 0x13
 17a:	9c 8b       	std	Y+20, r25	; 0x14
 17c:	ad 8b       	std	Y+21, r26	; 0x15
 17e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	40 e8       	ldi	r20, 0x80	; 128
 186:	5f e3       	ldi	r21, 0x3F	; 63
 188:	6b 89       	ldd	r22, Y+19	; 0x13
 18a:	7c 89       	ldd	r23, Y+20	; 0x14
 18c:	8d 89       	ldd	r24, Y+21	; 0x15
 18e:	9e 89       	ldd	r25, Y+22	; 0x16
 190:	2f d1       	rcall	.+606    	; 0x3f0 <__cmpsf2>
 192:	88 23       	and	r24, r24
 194:	2c f4       	brge	.+10     	; 0x1a0 <__SREG__+0x161>
		__ticks = 1;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	98 8f       	std	Y+24, r25	; 0x18
 19c:	8f 8b       	std	Y+23, r24	; 0x17
 19e:	3b c0       	rjmp	.+118    	; 0x216 <__SREG__+0x1d7>
	else if (__tmp > 65535)
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	3f ef       	ldi	r19, 0xFF	; 255
 1a4:	4f e7       	ldi	r20, 0x7F	; 127
 1a6:	57 e4       	ldi	r21, 0x47	; 71
 1a8:	6b 89       	ldd	r22, Y+19	; 0x13
 1aa:	7c 89       	ldd	r23, Y+20	; 0x14
 1ac:	8d 89       	ldd	r24, Y+21	; 0x15
 1ae:	9e 89       	ldd	r25, Y+22	; 0x16
 1b0:	9c d1       	rcall	.+824    	; 0x4ea <__gesf2>
 1b2:	18 16       	cp	r1, r24
 1b4:	3c f5       	brge	.+78     	; 0x204 <__SREG__+0x1c5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e2       	ldi	r20, 0x20	; 32
 1bc:	51 e4       	ldi	r21, 0x41	; 65
 1be:	6f 85       	ldd	r22, Y+15	; 0x0f
 1c0:	78 89       	ldd	r23, Y+16	; 0x10
 1c2:	89 89       	ldd	r24, Y+17	; 0x11
 1c4:	9a 89       	ldd	r25, Y+18	; 0x12
 1c6:	95 d1       	rcall	.+810    	; 0x4f2 <__mulsf3>
 1c8:	dc 01       	movw	r26, r24
 1ca:	cb 01       	movw	r24, r22
 1cc:	bc 01       	movw	r22, r24
 1ce:	cd 01       	movw	r24, r26
 1d0:	13 d1       	rcall	.+550    	; 0x3f8 <__fixunssfsi>
 1d2:	dc 01       	movw	r26, r24
 1d4:	cb 01       	movw	r24, r22
 1d6:	98 8f       	std	Y+24, r25	; 0x18
 1d8:	8f 8b       	std	Y+23, r24	; 0x17
 1da:	0f c0       	rjmp	.+30     	; 0x1fa <__SREG__+0x1bb>
 1dc:	88 ec       	ldi	r24, 0xC8	; 200
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	9a 8f       	std	Y+26, r25	; 0x1a
 1e2:	89 8f       	std	Y+25, r24	; 0x19
 1e4:	89 8d       	ldd	r24, Y+25	; 0x19
 1e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <__SREG__+0x1a9>
 1ec:	9a 8f       	std	Y+26, r25	; 0x1a
 1ee:	89 8f       	std	Y+25, r24	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1f0:	8f 89       	ldd	r24, Y+23	; 0x17
 1f2:	98 8d       	ldd	r25, Y+24	; 0x18
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	98 8f       	std	Y+24, r25	; 0x18
 1f8:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1fa:	8f 89       	ldd	r24, Y+23	; 0x17
 1fc:	98 8d       	ldd	r25, Y+24	; 0x18
 1fe:	00 97       	sbiw	r24, 0x00	; 0
 200:	69 f7       	brne	.-38     	; 0x1dc <__SREG__+0x19d>
 202:	13 c0       	rjmp	.+38     	; 0x22a <__SREG__+0x1eb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 204:	6b 89       	ldd	r22, Y+19	; 0x13
 206:	7c 89       	ldd	r23, Y+20	; 0x14
 208:	8d 89       	ldd	r24, Y+21	; 0x15
 20a:	9e 89       	ldd	r25, Y+22	; 0x16
 20c:	f5 d0       	rcall	.+490    	; 0x3f8 <__fixunssfsi>
 20e:	dc 01       	movw	r26, r24
 210:	cb 01       	movw	r24, r22
 212:	98 8f       	std	Y+24, r25	; 0x18
 214:	8f 8b       	std	Y+23, r24	; 0x17
 216:	8f 89       	ldd	r24, Y+23	; 0x17
 218:	98 8d       	ldd	r25, Y+24	; 0x18
 21a:	9c 8f       	std	Y+28, r25	; 0x1c
 21c:	8b 8f       	std	Y+27, r24	; 0x1b
 21e:	8b 8d       	ldd	r24, Y+27	; 0x1b
 220:	9c 8d       	ldd	r25, Y+28	; 0x1c
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <__SREG__+0x1e3>
 226:	9c 8f       	std	Y+28, r25	; 0x1c
 228:	8b 8f       	std	Y+27, r24	; 0x1b
		_delay_ms(100);

		// Set state to 1,1
		PORTB = 3;
 22a:	88 e3       	ldi	r24, 0x38	; 56
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	23 e0       	ldi	r18, 0x03	; 3
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	a8 ec       	ldi	r26, 0xC8	; 200
 23a:	b2 e4       	ldi	r27, 0x42	; 66
 23c:	8d 8f       	std	Y+29, r24	; 0x1d
 23e:	9e 8f       	std	Y+30, r25	; 0x1e
 240:	af 8f       	std	Y+31, r26	; 0x1f
 242:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 244:	20 e0       	ldi	r18, 0x00	; 0
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	4a ef       	ldi	r20, 0xFA	; 250
 24a:	54 e4       	ldi	r21, 0x44	; 68
 24c:	6d 8d       	ldd	r22, Y+29	; 0x1d
 24e:	7e 8d       	ldd	r23, Y+30	; 0x1e
 250:	8f 8d       	ldd	r24, Y+31	; 0x1f
 252:	98 a1       	ldd	r25, Y+32	; 0x20
 254:	4e d1       	rcall	.+668    	; 0x4f2 <__mulsf3>
 256:	dc 01       	movw	r26, r24
 258:	cb 01       	movw	r24, r22
 25a:	89 a3       	std	Y+33, r24	; 0x21
 25c:	9a a3       	std	Y+34, r25	; 0x22
 25e:	ab a3       	std	Y+35, r26	; 0x23
 260:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	40 e8       	ldi	r20, 0x80	; 128
 268:	5f e3       	ldi	r21, 0x3F	; 63
 26a:	69 a1       	ldd	r22, Y+33	; 0x21
 26c:	7a a1       	ldd	r23, Y+34	; 0x22
 26e:	8b a1       	ldd	r24, Y+35	; 0x23
 270:	9c a1       	ldd	r25, Y+36	; 0x24
 272:	be d0       	rcall	.+380    	; 0x3f0 <__cmpsf2>
 274:	88 23       	and	r24, r24
 276:	2c f4       	brge	.+10     	; 0x282 <__stack+0x23>
		__ticks = 1;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9e a3       	std	Y+38, r25	; 0x26
 27e:	8d a3       	std	Y+37, r24	; 0x25
 280:	3b c0       	rjmp	.+118    	; 0x2f8 <__stack+0x99>
	else if (__tmp > 65535)
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	4f e7       	ldi	r20, 0x7F	; 127
 288:	57 e4       	ldi	r21, 0x47	; 71
 28a:	69 a1       	ldd	r22, Y+33	; 0x21
 28c:	7a a1       	ldd	r23, Y+34	; 0x22
 28e:	8b a1       	ldd	r24, Y+35	; 0x23
 290:	9c a1       	ldd	r25, Y+36	; 0x24
 292:	2b d1       	rcall	.+598    	; 0x4ea <__gesf2>
 294:	18 16       	cp	r1, r24
 296:	3c f5       	brge	.+78     	; 0x2e6 <__stack+0x87>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	40 e2       	ldi	r20, 0x20	; 32
 29e:	51 e4       	ldi	r21, 0x41	; 65
 2a0:	6d 8d       	ldd	r22, Y+29	; 0x1d
 2a2:	7e 8d       	ldd	r23, Y+30	; 0x1e
 2a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2a6:	98 a1       	ldd	r25, Y+32	; 0x20
 2a8:	24 d1       	rcall	.+584    	; 0x4f2 <__mulsf3>
 2aa:	dc 01       	movw	r26, r24
 2ac:	cb 01       	movw	r24, r22
 2ae:	bc 01       	movw	r22, r24
 2b0:	cd 01       	movw	r24, r26
 2b2:	a2 d0       	rcall	.+324    	; 0x3f8 <__fixunssfsi>
 2b4:	dc 01       	movw	r26, r24
 2b6:	cb 01       	movw	r24, r22
 2b8:	9e a3       	std	Y+38, r25	; 0x26
 2ba:	8d a3       	std	Y+37, r24	; 0x25
 2bc:	0f c0       	rjmp	.+30     	; 0x2dc <__stack+0x7d>
 2be:	88 ec       	ldi	r24, 0xC8	; 200
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	98 a7       	std	Y+40, r25	; 0x28
 2c4:	8f a3       	std	Y+39, r24	; 0x27
 2c6:	8f a1       	ldd	r24, Y+39	; 0x27
 2c8:	98 a5       	ldd	r25, Y+40	; 0x28
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <__stack+0x6b>
 2ce:	98 a7       	std	Y+40, r25	; 0x28
 2d0:	8f a3       	std	Y+39, r24	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2d2:	8d a1       	ldd	r24, Y+37	; 0x25
 2d4:	9e a1       	ldd	r25, Y+38	; 0x26
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	9e a3       	std	Y+38, r25	; 0x26
 2da:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2dc:	8d a1       	ldd	r24, Y+37	; 0x25
 2de:	9e a1       	ldd	r25, Y+38	; 0x26
 2e0:	00 97       	sbiw	r24, 0x00	; 0
 2e2:	69 f7       	brne	.-38     	; 0x2be <__stack+0x5f>
 2e4:	13 c0       	rjmp	.+38     	; 0x30c <__stack+0xad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2e6:	69 a1       	ldd	r22, Y+33	; 0x21
 2e8:	7a a1       	ldd	r23, Y+34	; 0x22
 2ea:	8b a1       	ldd	r24, Y+35	; 0x23
 2ec:	9c a1       	ldd	r25, Y+36	; 0x24
 2ee:	84 d0       	rcall	.+264    	; 0x3f8 <__fixunssfsi>
 2f0:	dc 01       	movw	r26, r24
 2f2:	cb 01       	movw	r24, r22
 2f4:	9e a3       	std	Y+38, r25	; 0x26
 2f6:	8d a3       	std	Y+37, r24	; 0x25
 2f8:	8d a1       	ldd	r24, Y+37	; 0x25
 2fa:	9e a1       	ldd	r25, Y+38	; 0x26
 2fc:	9a a7       	std	Y+42, r25	; 0x2a
 2fe:	89 a7       	std	Y+41, r24	; 0x29
 300:	89 a5       	ldd	r24, Y+41	; 0x29
 302:	9a a5       	ldd	r25, Y+42	; 0x2a
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <__stack+0xa5>
 308:	9a a7       	std	Y+42, r25	; 0x2a
 30a:	89 a7       	std	Y+41, r24	; 0x29
		_delay_ms(100);

		// Set state to 0,1
		PORTB = 1;
 30c:	88 e3       	ldi	r24, 0x38	; 56
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	a8 ec       	ldi	r26, 0xC8	; 200
 31c:	b2 e4       	ldi	r27, 0x42	; 66
 31e:	8b a7       	std	Y+43, r24	; 0x2b
 320:	9c a7       	std	Y+44, r25	; 0x2c
 322:	ad a7       	std	Y+45, r26	; 0x2d
 324:	be a7       	std	Y+46, r27	; 0x2e
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	4a ef       	ldi	r20, 0xFA	; 250
 32c:	54 e4       	ldi	r21, 0x44	; 68
 32e:	6b a5       	ldd	r22, Y+43	; 0x2b
 330:	7c a5       	ldd	r23, Y+44	; 0x2c
 332:	8d a5       	ldd	r24, Y+45	; 0x2d
 334:	9e a5       	ldd	r25, Y+46	; 0x2e
 336:	dd d0       	rcall	.+442    	; 0x4f2 <__mulsf3>
 338:	dc 01       	movw	r26, r24
 33a:	cb 01       	movw	r24, r22
 33c:	8f a7       	std	Y+47, r24	; 0x2f
 33e:	98 ab       	std	Y+48, r25	; 0x30
 340:	a9 ab       	std	Y+49, r26	; 0x31
 342:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 e8       	ldi	r20, 0x80	; 128
 34a:	5f e3       	ldi	r21, 0x3F	; 63
 34c:	6f a5       	ldd	r22, Y+47	; 0x2f
 34e:	78 a9       	ldd	r23, Y+48	; 0x30
 350:	89 a9       	ldd	r24, Y+49	; 0x31
 352:	9a a9       	ldd	r25, Y+50	; 0x32
 354:	4d d0       	rcall	.+154    	; 0x3f0 <__cmpsf2>
 356:	88 23       	and	r24, r24
 358:	2c f4       	brge	.+10     	; 0x364 <__stack+0x105>
		__ticks = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	9c ab       	std	Y+52, r25	; 0x34
 360:	8b ab       	std	Y+51, r24	; 0x33
 362:	3b c0       	rjmp	.+118    	; 0x3da <__stack+0x17b>
	else if (__tmp > 65535)
 364:	20 e0       	ldi	r18, 0x00	; 0
 366:	3f ef       	ldi	r19, 0xFF	; 255
 368:	4f e7       	ldi	r20, 0x7F	; 127
 36a:	57 e4       	ldi	r21, 0x47	; 71
 36c:	6f a5       	ldd	r22, Y+47	; 0x2f
 36e:	78 a9       	ldd	r23, Y+48	; 0x30
 370:	89 a9       	ldd	r24, Y+49	; 0x31
 372:	9a a9       	ldd	r25, Y+50	; 0x32
 374:	ba d0       	rcall	.+372    	; 0x4ea <__gesf2>
 376:	18 16       	cp	r1, r24
 378:	3c f5       	brge	.+78     	; 0x3c8 <__stack+0x169>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 37a:	20 e0       	ldi	r18, 0x00	; 0
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	40 e2       	ldi	r20, 0x20	; 32
 380:	51 e4       	ldi	r21, 0x41	; 65
 382:	6b a5       	ldd	r22, Y+43	; 0x2b
 384:	7c a5       	ldd	r23, Y+44	; 0x2c
 386:	8d a5       	ldd	r24, Y+45	; 0x2d
 388:	9e a5       	ldd	r25, Y+46	; 0x2e
 38a:	b3 d0       	rcall	.+358    	; 0x4f2 <__mulsf3>
 38c:	dc 01       	movw	r26, r24
 38e:	cb 01       	movw	r24, r22
 390:	bc 01       	movw	r22, r24
 392:	cd 01       	movw	r24, r26
 394:	31 d0       	rcall	.+98     	; 0x3f8 <__fixunssfsi>
 396:	dc 01       	movw	r26, r24
 398:	cb 01       	movw	r24, r22
 39a:	9c ab       	std	Y+52, r25	; 0x34
 39c:	8b ab       	std	Y+51, r24	; 0x33
 39e:	0f c0       	rjmp	.+30     	; 0x3be <__stack+0x15f>
 3a0:	88 ec       	ldi	r24, 0xC8	; 200
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	9e ab       	std	Y+54, r25	; 0x36
 3a6:	8d ab       	std	Y+53, r24	; 0x35
 3a8:	8d a9       	ldd	r24, Y+53	; 0x35
 3aa:	9e a9       	ldd	r25, Y+54	; 0x36
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <__stack+0x14d>
 3b0:	9e ab       	std	Y+54, r25	; 0x36
 3b2:	8d ab       	std	Y+53, r24	; 0x35
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3b4:	8b a9       	ldd	r24, Y+51	; 0x33
 3b6:	9c a9       	ldd	r25, Y+52	; 0x34
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	9c ab       	std	Y+52, r25	; 0x34
 3bc:	8b ab       	std	Y+51, r24	; 0x33
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3be:	8b a9       	ldd	r24, Y+51	; 0x33
 3c0:	9c a9       	ldd	r25, Y+52	; 0x34
 3c2:	00 97       	sbiw	r24, 0x00	; 0
 3c4:	69 f7       	brne	.-38     	; 0x3a0 <__stack+0x141>
		_delay_ms(100);
	}
 3c6:	50 ce       	rjmp	.-864    	; 0x68 <__SREG__+0x29>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 3c8:	6f a5       	ldd	r22, Y+47	; 0x2f
 3ca:	78 a9       	ldd	r23, Y+48	; 0x30
 3cc:	89 a9       	ldd	r24, Y+49	; 0x31
 3ce:	9a a9       	ldd	r25, Y+50	; 0x32
 3d0:	13 d0       	rcall	.+38     	; 0x3f8 <__fixunssfsi>
 3d2:	dc 01       	movw	r26, r24
 3d4:	cb 01       	movw	r24, r22
 3d6:	9c ab       	std	Y+52, r25	; 0x34
 3d8:	8b ab       	std	Y+51, r24	; 0x33
 3da:	8b a9       	ldd	r24, Y+51	; 0x33
 3dc:	9c a9       	ldd	r25, Y+52	; 0x34
 3de:	98 af       	std	Y+56, r25	; 0x38
 3e0:	8f ab       	std	Y+55, r24	; 0x37
 3e2:	8f a9       	ldd	r24, Y+55	; 0x37
 3e4:	98 ad       	ldd	r25, Y+56	; 0x38
 3e6:	01 97       	sbiw	r24, 0x01	; 1
 3e8:	f1 f7       	brne	.-4      	; 0x3e6 <__stack+0x187>
 3ea:	98 af       	std	Y+56, r25	; 0x38
 3ec:	8f ab       	std	Y+55, r24	; 0x37
 3ee:	3c ce       	rjmp	.-904    	; 0x68 <__SREG__+0x29>

000003f0 <__cmpsf2>:
 3f0:	2f d0       	rcall	.+94     	; 0x450 <__fp_cmp>
 3f2:	08 f4       	brcc	.+2      	; 0x3f6 <__cmpsf2+0x6>
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret

000003f8 <__fixunssfsi>:
 3f8:	57 d0       	rcall	.+174    	; 0x4a8 <__fp_splitA>
 3fa:	88 f0       	brcs	.+34     	; 0x41e <__fixunssfsi+0x26>
 3fc:	9f 57       	subi	r25, 0x7F	; 127
 3fe:	90 f0       	brcs	.+36     	; 0x424 <__fixunssfsi+0x2c>
 400:	b9 2f       	mov	r27, r25
 402:	99 27       	eor	r25, r25
 404:	b7 51       	subi	r27, 0x17	; 23
 406:	a0 f0       	brcs	.+40     	; 0x430 <__fixunssfsi+0x38>
 408:	d1 f0       	breq	.+52     	; 0x43e <__fixunssfsi+0x46>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	88 1f       	adc	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	1a f0       	brmi	.+6      	; 0x41a <__fixunssfsi+0x22>
 414:	ba 95       	dec	r27
 416:	c9 f7       	brne	.-14     	; 0x40a <__fixunssfsi+0x12>
 418:	12 c0       	rjmp	.+36     	; 0x43e <__fixunssfsi+0x46>
 41a:	b1 30       	cpi	r27, 0x01	; 1
 41c:	81 f0       	breq	.+32     	; 0x43e <__fixunssfsi+0x46>
 41e:	5e d0       	rcall	.+188    	; 0x4dc <__fp_zero>
 420:	b1 e0       	ldi	r27, 0x01	; 1
 422:	08 95       	ret
 424:	5b c0       	rjmp	.+182    	; 0x4dc <__fp_zero>
 426:	67 2f       	mov	r22, r23
 428:	78 2f       	mov	r23, r24
 42a:	88 27       	eor	r24, r24
 42c:	b8 5f       	subi	r27, 0xF8	; 248
 42e:	39 f0       	breq	.+14     	; 0x43e <__fixunssfsi+0x46>
 430:	b9 3f       	cpi	r27, 0xF9	; 249
 432:	cc f3       	brlt	.-14     	; 0x426 <__fixunssfsi+0x2e>
 434:	86 95       	lsr	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b3 95       	inc	r27
 43c:	d9 f7       	brne	.-10     	; 0x434 <__fixunssfsi+0x3c>
 43e:	3e f4       	brtc	.+14     	; 0x44e <__fixunssfsi+0x56>
 440:	90 95       	com	r25
 442:	80 95       	com	r24
 444:	70 95       	com	r23
 446:	61 95       	neg	r22
 448:	7f 4f       	sbci	r23, 0xFF	; 255
 44a:	8f 4f       	sbci	r24, 0xFF	; 255
 44c:	9f 4f       	sbci	r25, 0xFF	; 255
 44e:	08 95       	ret

00000450 <__fp_cmp>:
 450:	99 0f       	add	r25, r25
 452:	00 08       	sbc	r0, r0
 454:	55 0f       	add	r21, r21
 456:	aa 0b       	sbc	r26, r26
 458:	e0 e8       	ldi	r30, 0x80	; 128
 45a:	fe ef       	ldi	r31, 0xFE	; 254
 45c:	16 16       	cp	r1, r22
 45e:	17 06       	cpc	r1, r23
 460:	e8 07       	cpc	r30, r24
 462:	f9 07       	cpc	r31, r25
 464:	c0 f0       	brcs	.+48     	; 0x496 <__fp_cmp+0x46>
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	e4 07       	cpc	r30, r20
 46c:	f5 07       	cpc	r31, r21
 46e:	98 f0       	brcs	.+38     	; 0x496 <__fp_cmp+0x46>
 470:	62 1b       	sub	r22, r18
 472:	73 0b       	sbc	r23, r19
 474:	84 0b       	sbc	r24, r20
 476:	95 0b       	sbc	r25, r21
 478:	39 f4       	brne	.+14     	; 0x488 <__fp_cmp+0x38>
 47a:	0a 26       	eor	r0, r26
 47c:	61 f0       	breq	.+24     	; 0x496 <__fp_cmp+0x46>
 47e:	23 2b       	or	r18, r19
 480:	24 2b       	or	r18, r20
 482:	25 2b       	or	r18, r21
 484:	21 f4       	brne	.+8      	; 0x48e <__fp_cmp+0x3e>
 486:	08 95       	ret
 488:	0a 26       	eor	r0, r26
 48a:	09 f4       	brne	.+2      	; 0x48e <__fp_cmp+0x3e>
 48c:	a1 40       	sbci	r26, 0x01	; 1
 48e:	a6 95       	lsr	r26
 490:	8f ef       	ldi	r24, 0xFF	; 255
 492:	81 1d       	adc	r24, r1
 494:	81 1d       	adc	r24, r1
 496:	08 95       	ret

00000498 <__fp_split3>:
 498:	57 fd       	sbrc	r21, 7
 49a:	90 58       	subi	r25, 0x80	; 128
 49c:	44 0f       	add	r20, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	59 f0       	breq	.+22     	; 0x4b8 <__fp_splitA+0x10>
 4a2:	5f 3f       	cpi	r21, 0xFF	; 255
 4a4:	71 f0       	breq	.+28     	; 0x4c2 <__fp_splitA+0x1a>
 4a6:	47 95       	ror	r20

000004a8 <__fp_splitA>:
 4a8:	88 0f       	add	r24, r24
 4aa:	97 fb       	bst	r25, 7
 4ac:	99 1f       	adc	r25, r25
 4ae:	61 f0       	breq	.+24     	; 0x4c8 <__fp_splitA+0x20>
 4b0:	9f 3f       	cpi	r25, 0xFF	; 255
 4b2:	79 f0       	breq	.+30     	; 0x4d2 <__fp_splitA+0x2a>
 4b4:	87 95       	ror	r24
 4b6:	08 95       	ret
 4b8:	12 16       	cp	r1, r18
 4ba:	13 06       	cpc	r1, r19
 4bc:	14 06       	cpc	r1, r20
 4be:	55 1f       	adc	r21, r21
 4c0:	f2 cf       	rjmp	.-28     	; 0x4a6 <__fp_split3+0xe>
 4c2:	46 95       	lsr	r20
 4c4:	f1 df       	rcall	.-30     	; 0x4a8 <__fp_splitA>
 4c6:	08 c0       	rjmp	.+16     	; 0x4d8 <__fp_splitA+0x30>
 4c8:	16 16       	cp	r1, r22
 4ca:	17 06       	cpc	r1, r23
 4cc:	18 06       	cpc	r1, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	f1 cf       	rjmp	.-30     	; 0x4b4 <__fp_splitA+0xc>
 4d2:	86 95       	lsr	r24
 4d4:	71 05       	cpc	r23, r1
 4d6:	61 05       	cpc	r22, r1
 4d8:	08 94       	sec
 4da:	08 95       	ret

000004dc <__fp_zero>:
 4dc:	e8 94       	clt

000004de <__fp_szero>:
 4de:	bb 27       	eor	r27, r27
 4e0:	66 27       	eor	r22, r22
 4e2:	77 27       	eor	r23, r23
 4e4:	cb 01       	movw	r24, r22
 4e6:	97 f9       	bld	r25, 7
 4e8:	08 95       	ret

000004ea <__gesf2>:
 4ea:	b2 df       	rcall	.-156    	; 0x450 <__fp_cmp>
 4ec:	08 f4       	brcc	.+2      	; 0x4f0 <__gesf2+0x6>
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	08 95       	ret

000004f2 <__mulsf3>:
 4f2:	0a d0       	rcall	.+20     	; 0x508 <__mulsf3x>
 4f4:	80 c0       	rjmp	.+256    	; 0x5f6 <__fp_round>
 4f6:	71 d0       	rcall	.+226    	; 0x5da <__fp_pscA>
 4f8:	28 f0       	brcs	.+10     	; 0x504 <__mulsf3+0x12>
 4fa:	76 d0       	rcall	.+236    	; 0x5e8 <__fp_pscB>
 4fc:	18 f0       	brcs	.+6      	; 0x504 <__mulsf3+0x12>
 4fe:	95 23       	and	r25, r21
 500:	09 f0       	breq	.+2      	; 0x504 <__mulsf3+0x12>
 502:	62 c0       	rjmp	.+196    	; 0x5c8 <__fp_inf>
 504:	67 c0       	rjmp	.+206    	; 0x5d4 <__fp_nan>
 506:	eb cf       	rjmp	.-42     	; 0x4de <__fp_szero>

00000508 <__mulsf3x>:
 508:	c7 df       	rcall	.-114    	; 0x498 <__fp_split3>
 50a:	a8 f3       	brcs	.-22     	; 0x4f6 <__mulsf3+0x4>

0000050c <__mulsf3_pse>:
 50c:	99 23       	and	r25, r25
 50e:	d9 f3       	breq	.-10     	; 0x506 <__mulsf3+0x14>
 510:	55 23       	and	r21, r21
 512:	c9 f3       	breq	.-14     	; 0x506 <__mulsf3+0x14>
 514:	95 0f       	add	r25, r21
 516:	50 e0       	ldi	r21, 0x00	; 0
 518:	55 1f       	adc	r21, r21
 51a:	aa 27       	eor	r26, r26
 51c:	ee 27       	eor	r30, r30
 51e:	ff 27       	eor	r31, r31
 520:	bb 27       	eor	r27, r27
 522:	00 24       	eor	r0, r0
 524:	08 94       	sec
 526:	67 95       	ror	r22
 528:	20 f4       	brcc	.+8      	; 0x532 <__mulsf3_pse+0x26>
 52a:	e2 0f       	add	r30, r18
 52c:	f3 1f       	adc	r31, r19
 52e:	b4 1f       	adc	r27, r20
 530:	0a 1e       	adc	r0, r26
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	44 1f       	adc	r20, r20
 538:	aa 1f       	adc	r26, r26
 53a:	66 95       	lsr	r22
 53c:	a9 f7       	brne	.-22     	; 0x528 <__mulsf3_pse+0x1c>
 53e:	77 95       	ror	r23
 540:	30 f4       	brcc	.+12     	; 0x54e <__mulsf3_pse+0x42>
 542:	f3 0f       	add	r31, r19
 544:	b4 1f       	adc	r27, r20
 546:	0a 1e       	adc	r0, r26
 548:	12 1e       	adc	r1, r18
 54a:	08 f4       	brcc	.+2      	; 0x54e <__mulsf3_pse+0x42>
 54c:	63 95       	inc	r22
 54e:	33 0f       	add	r19, r19
 550:	44 1f       	adc	r20, r20
 552:	aa 1f       	adc	r26, r26
 554:	22 1f       	adc	r18, r18
 556:	76 95       	lsr	r23
 558:	99 f7       	brne	.-26     	; 0x540 <__mulsf3_pse+0x34>
 55a:	87 95       	ror	r24
 55c:	20 f4       	brcc	.+8      	; 0x566 <__mulsf3_pse+0x5a>
 55e:	b4 0f       	add	r27, r20
 560:	0a 1e       	adc	r0, r26
 562:	12 1e       	adc	r1, r18
 564:	63 1f       	adc	r22, r19
 566:	44 0f       	add	r20, r20
 568:	aa 1f       	adc	r26, r26
 56a:	22 1f       	adc	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	86 95       	lsr	r24
 570:	a9 f7       	brne	.-22     	; 0x55c <__mulsf3_pse+0x50>
 572:	86 2f       	mov	r24, r22
 574:	71 2d       	mov	r23, r1
 576:	60 2d       	mov	r22, r0
 578:	11 24       	eor	r1, r1
 57a:	9f 57       	subi	r25, 0x7F	; 127
 57c:	50 40       	sbci	r21, 0x00	; 0
 57e:	8a f0       	brmi	.+34     	; 0x5a2 <__mulsf3_pse+0x96>
 580:	e1 f0       	breq	.+56     	; 0x5ba <__mulsf3_pse+0xae>
 582:	88 23       	and	r24, r24
 584:	4a f0       	brmi	.+18     	; 0x598 <__mulsf3_pse+0x8c>
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	bb 1f       	adc	r27, r27
 58c:	66 1f       	adc	r22, r22
 58e:	77 1f       	adc	r23, r23
 590:	88 1f       	adc	r24, r24
 592:	91 50       	subi	r25, 0x01	; 1
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	a9 f7       	brne	.-22     	; 0x582 <__mulsf3_pse+0x76>
 598:	9e 3f       	cpi	r25, 0xFE	; 254
 59a:	51 05       	cpc	r21, r1
 59c:	70 f0       	brcs	.+28     	; 0x5ba <__mulsf3_pse+0xae>
 59e:	14 c0       	rjmp	.+40     	; 0x5c8 <__fp_inf>
 5a0:	9e cf       	rjmp	.-196    	; 0x4de <__fp_szero>
 5a2:	5f 3f       	cpi	r21, 0xFF	; 255
 5a4:	ec f3       	brlt	.-6      	; 0x5a0 <__mulsf3_pse+0x94>
 5a6:	98 3e       	cpi	r25, 0xE8	; 232
 5a8:	dc f3       	brlt	.-10     	; 0x5a0 <__mulsf3_pse+0x94>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	e7 95       	ror	r30
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c1 f7       	brne	.-16     	; 0x5aa <__mulsf3_pse+0x9e>
 5ba:	fe 2b       	or	r31, r30
 5bc:	88 0f       	add	r24, r24
 5be:	91 1d       	adc	r25, r1
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__fp_inf>:
 5c8:	97 f9       	bld	r25, 7
 5ca:	9f 67       	ori	r25, 0x7F	; 127
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	08 95       	ret

000005d4 <__fp_nan>:
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	80 ec       	ldi	r24, 0xC0	; 192
 5d8:	08 95       	ret

000005da <__fp_pscA>:
 5da:	00 24       	eor	r0, r0
 5dc:	0a 94       	dec	r0
 5de:	16 16       	cp	r1, r22
 5e0:	17 06       	cpc	r1, r23
 5e2:	18 06       	cpc	r1, r24
 5e4:	09 06       	cpc	r0, r25
 5e6:	08 95       	ret

000005e8 <__fp_pscB>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	12 16       	cp	r1, r18
 5ee:	13 06       	cpc	r1, r19
 5f0:	14 06       	cpc	r1, r20
 5f2:	05 06       	cpc	r0, r21
 5f4:	08 95       	ret

000005f6 <__fp_round>:
 5f6:	09 2e       	mov	r0, r25
 5f8:	03 94       	inc	r0
 5fa:	00 0c       	add	r0, r0
 5fc:	11 f4       	brne	.+4      	; 0x602 <__fp_round+0xc>
 5fe:	88 23       	and	r24, r24
 600:	52 f0       	brmi	.+20     	; 0x616 <__fp_round+0x20>
 602:	bb 0f       	add	r27, r27
 604:	40 f4       	brcc	.+16     	; 0x616 <__fp_round+0x20>
 606:	bf 2b       	or	r27, r31
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0x18>
 60a:	60 ff       	sbrs	r22, 0
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__fp_round+0x20>
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	8f 4f       	sbci	r24, 0xFF	; 255
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
